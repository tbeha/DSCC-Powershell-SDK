#
# Data Services Cloud Console API
# Data Services Cloud Console API
# Version: 1.5.0
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Request body to remove protection policies

.PARAMETER Policies
List of protection policies to be removed
.OUTPUTS

RemoveProtectionPoliciesInputSchema<PSCustomObject>
#>

function Initialize-RemoveProtectionPoliciesInputSchema {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Policies}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => RemoveProtectionPoliciesInputSchema' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $Policies) {
            throw "invalid value for 'Policies', 'Policies' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "policies" = ${Policies}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to RemoveProtectionPoliciesInputSchema<PSCustomObject>

.DESCRIPTION

Convert from JSON to RemoveProtectionPoliciesInputSchema<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

RemoveProtectionPoliciesInputSchema<PSCustomObject>
#>
function ConvertFrom-JsonToRemoveProtectionPoliciesInputSchema {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => RemoveProtectionPoliciesInputSchema' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in RemoveProtectionPoliciesInputSchema
        $AllProperties = ("policies")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'policies' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "policies"))) {
            throw "Error! JSON cannot be serialized due to the required property 'policies' missing."
        } else {
            $Policies = $JsonParameters.PSobject.Properties["policies"].value
        }

        $PSO = [PSCustomObject]@{
            "policies" = ${Policies}
        }

        return $PSO
    }

}

