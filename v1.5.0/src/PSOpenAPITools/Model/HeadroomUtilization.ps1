#
# Data Services Cloud Console API
# Data Services Cloud Console API
# Version: 1.5.0
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

headroom-utilization response structure

.PARAMETER AverageHeadroomUtilizationData
No description available.
.PARAMETER CustomerId
CustomerId
.PARAMETER EndTime
End time of the interval for which headroom-utilization are calculated
.PARAMETER GranularityInMin
Time interval granularity in minutes
.PARAMETER HeadroomUtilizationData
No description available.
.PARAMETER RequestUri
requestUri for headroom-utilization 
.PARAMETER StartTime
Start time of the interval for which headroom-utilization are calculated
.OUTPUTS

HeadroomUtilization<PSCustomObject>
#>

function Initialize-HeadroomUtilization {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${AverageHeadroomUtilizationData},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${CustomerId},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${EndTime},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${GranularityInMin},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${HeadroomUtilizationData},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${RequestUri},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${StartTime}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => HeadroomUtilization' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "averageHeadroomUtilizationData" = ${AverageHeadroomUtilizationData}
            "customerId" = ${CustomerId}
            "endTime" = ${EndTime}
            "granularityInMin" = ${GranularityInMin}
            "headroomUtilizationData" = ${HeadroomUtilizationData}
            "requestUri" = ${RequestUri}
            "startTime" = ${StartTime}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to HeadroomUtilization<PSCustomObject>

.DESCRIPTION

Convert from JSON to HeadroomUtilization<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

HeadroomUtilization<PSCustomObject>
#>
function ConvertFrom-JsonToHeadroomUtilization {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => HeadroomUtilization' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in HeadroomUtilization
        $AllProperties = ("averageHeadroomUtilizationData", "customerId", "endTime", "granularityInMin", "headroomUtilizationData", "requestUri", "startTime")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "averageHeadroomUtilizationData"))) { #optional property not found
            $AverageHeadroomUtilizationData = $null
        } else {
            $AverageHeadroomUtilizationData = $JsonParameters.PSobject.Properties["averageHeadroomUtilizationData"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "customerId"))) { #optional property not found
            $CustomerId = $null
        } else {
            $CustomerId = $JsonParameters.PSobject.Properties["customerId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "endTime"))) { #optional property not found
            $EndTime = $null
        } else {
            $EndTime = $JsonParameters.PSobject.Properties["endTime"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "granularityInMin"))) { #optional property not found
            $GranularityInMin = $null
        } else {
            $GranularityInMin = $JsonParameters.PSobject.Properties["granularityInMin"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "headroomUtilizationData"))) { #optional property not found
            $HeadroomUtilizationData = $null
        } else {
            $HeadroomUtilizationData = $JsonParameters.PSobject.Properties["headroomUtilizationData"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "requestUri"))) { #optional property not found
            $RequestUri = $null
        } else {
            $RequestUri = $JsonParameters.PSobject.Properties["requestUri"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "startTime"))) { #optional property not found
            $StartTime = $null
        } else {
            $StartTime = $JsonParameters.PSobject.Properties["startTime"].value
        }

        $PSO = [PSCustomObject]@{
            "averageHeadroomUtilizationData" = ${AverageHeadroomUtilizationData}
            "customerId" = ${CustomerId}
            "endTime" = ${EndTime}
            "granularityInMin" = ${GranularityInMin}
            "headroomUtilizationData" = ${HeadroomUtilizationData}
            "requestUri" = ${RequestUri}
            "startTime" = ${StartTime}
        }

        return $PSO
    }

}

