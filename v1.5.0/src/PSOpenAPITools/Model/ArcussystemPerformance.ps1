#
# Data Services Cloud Console API
# Data Services Cloud Console API
# Version: 1.5.0
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

system performance statistics

.PARAMETER CustomerId
customerId
.PARAMETER Iops
No description available.
.PARAMETER Latency
No description available.
.PARAMETER RequestUri
requestUri for detailed storage object
.PARAMETER ResourceUri
resourceUri for detailed storage object
.PARAMETER Throughput
No description available.
.OUTPUTS

ArcussystemPerformance<PSCustomObject>
#>

function Initialize-ArcussystemPerformance {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${CustomerId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Iops},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Latency},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${RequestUri},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ResourceUri},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Throughput}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => ArcussystemPerformance' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "customerId" = ${CustomerId}
            "iops" = ${Iops}
            "latency" = ${Latency}
            "requestUri" = ${RequestUri}
            "resourceUri" = ${ResourceUri}
            "throughput" = ${Throughput}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to ArcussystemPerformance<PSCustomObject>

.DESCRIPTION

Convert from JSON to ArcussystemPerformance<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

ArcussystemPerformance<PSCustomObject>
#>
function ConvertFrom-JsonToArcussystemPerformance {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => ArcussystemPerformance' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in ArcussystemPerformance
        $AllProperties = ("customerId", "iops", "latency", "requestUri", "resourceUri", "throughput")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "customerId"))) { #optional property not found
            $CustomerId = $null
        } else {
            $CustomerId = $JsonParameters.PSobject.Properties["customerId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "iops"))) { #optional property not found
            $Iops = $null
        } else {
            $Iops = $JsonParameters.PSobject.Properties["iops"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "latency"))) { #optional property not found
            $Latency = $null
        } else {
            $Latency = $JsonParameters.PSobject.Properties["latency"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "requestUri"))) { #optional property not found
            $RequestUri = $null
        } else {
            $RequestUri = $JsonParameters.PSobject.Properties["requestUri"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "resourceUri"))) { #optional property not found
            $ResourceUri = $null
        } else {
            $ResourceUri = $JsonParameters.PSobject.Properties["resourceUri"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "throughput"))) { #optional property not found
            $Throughput = $null
        } else {
            $Throughput = $JsonParameters.PSobject.Properties["throughput"].value
        }

        $PSO = [PSCustomObject]@{
            "customerId" = ${CustomerId}
            "iops" = ${Iops}
            "latency" = ${Latency}
            "requestUri" = ${RequestUri}
            "resourceUri" = ${ResourceUri}
            "throughput" = ${Throughput}
        }

        return $PSO
    }

}

