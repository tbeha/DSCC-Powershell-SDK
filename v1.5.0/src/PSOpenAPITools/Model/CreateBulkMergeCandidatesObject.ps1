#
# Data Services Cloud Console API
# Data Services Cloud Console API
# Version: 1.5.0
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER DuplicateIds
host/hostgroup ids of all avialable duplicates
.PARAMETER Members
List of Initiator address/ List of Host names for the host group
.PARAMETER Name
Name of the host/host group.
.PARAMETER Systems
system IDs to which the host/hostgroup belongs to.
.OUTPUTS

CreateBulkMergeCandidatesObject<PSCustomObject>
#>

function Initialize-CreateBulkMergeCandidatesObject {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${DuplicateIds},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${Members},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${Systems}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => CreateBulkMergeCandidatesObject' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "duplicateIds" = ${DuplicateIds}
            "members" = ${Members}
            "name" = ${Name}
            "systems" = ${Systems}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to CreateBulkMergeCandidatesObject<PSCustomObject>

.DESCRIPTION

Convert from JSON to CreateBulkMergeCandidatesObject<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

CreateBulkMergeCandidatesObject<PSCustomObject>
#>
function ConvertFrom-JsonToCreateBulkMergeCandidatesObject {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => CreateBulkMergeCandidatesObject' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in CreateBulkMergeCandidatesObject
        $AllProperties = ("duplicateIds", "members", "name", "systems")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'duplicateIds' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "duplicateIds"))) {
            throw "Error! JSON cannot be serialized due to the required property 'duplicateIds' missing."
        } else {
            $DuplicateIds = $JsonParameters.PSobject.Properties["duplicateIds"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "members"))) {
            throw "Error! JSON cannot be serialized due to the required property 'members' missing."
        } else {
            $Members = $JsonParameters.PSobject.Properties["members"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) {
            throw "Error! JSON cannot be serialized due to the required property 'name' missing."
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "systems"))) {
            throw "Error! JSON cannot be serialized due to the required property 'systems' missing."
        } else {
            $Systems = $JsonParameters.PSobject.Properties["systems"].value
        }

        $PSO = [PSCustomObject]@{
            "duplicateIds" = ${DuplicateIds}
            "members" = ${Members}
            "name" = ${Name}
            "systems" = ${Systems}
        }

        return $PSO
    }

}

