#
# Data Services Cloud Console API
# Data Services Cloud Console API
# Version: 1.5.0
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Headroom
Average headroom utilization
.PARAMETER HeadroomUtilization
Average headroom utilization level
.OUTPUTS

HeadroomUtilizationAverageHeadroomUtilizationData<PSCustomObject>
#>

function Initialize-HeadroomUtilizationAverageHeadroomUtilizationData {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Decimal]]
        ${Headroom},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${HeadroomUtilization}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => HeadroomUtilizationAverageHeadroomUtilizationData' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "headroom" = ${Headroom}
            "headroomUtilization" = ${HeadroomUtilization}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to HeadroomUtilizationAverageHeadroomUtilizationData<PSCustomObject>

.DESCRIPTION

Convert from JSON to HeadroomUtilizationAverageHeadroomUtilizationData<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

HeadroomUtilizationAverageHeadroomUtilizationData<PSCustomObject>
#>
function ConvertFrom-JsonToHeadroomUtilizationAverageHeadroomUtilizationData {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => HeadroomUtilizationAverageHeadroomUtilizationData' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in HeadroomUtilizationAverageHeadroomUtilizationData
        $AllProperties = ("headroom", "headroomUtilization")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "headroom"))) { #optional property not found
            $Headroom = $null
        } else {
            $Headroom = $JsonParameters.PSobject.Properties["headroom"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "headroomUtilization"))) { #optional property not found
            $HeadroomUtilization = $null
        } else {
            $HeadroomUtilization = $JsonParameters.PSobject.Properties["headroomUtilization"].value
        }

        $PSO = [PSCustomObject]@{
            "headroom" = ${Headroom}
            "headroomUtilization" = ${HeadroomUtilization}
        }

        return $PSO
    }

}

