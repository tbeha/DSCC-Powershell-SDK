#
# Data Services Cloud Console API
# Data Services Cloud Console API
# Version: 1.5.0
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER AssociatedLinks
Associated Links Details
.PARAMETER CapacitySummary
No description available.
.PARAMETER CustomerId
The customer application identifier
.PARAMETER Id
Uid of the applicationset
.PARAMETER Members
Volume Names
.PARAMETER Name
Name of the application set
.PARAMETER RequestUri
RequestUri for applicationsets resources
.PARAMETER SystemId
SystemId/serialNumber of the array.
.OUTPUTS

ArcusApplicationSetCapacityStats<PSCustomObject>
#>

function Initialize-ArcusApplicationSetCapacityStats {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${AssociatedLinks},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${CapacitySummary},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${CustomerId},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Id},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${Members},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${RequestUri},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SystemId}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => ArcusApplicationSetCapacityStats' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if (!$Name -and $Name.length -gt 255) {
            throw "invalid value for 'Name', the character length must be smaller than or equal to 255."
        }


        $PSO = [PSCustomObject]@{
            "associatedLinks" = ${AssociatedLinks}
            "capacitySummary" = ${CapacitySummary}
            "customerId" = ${CustomerId}
            "id" = ${Id}
            "members" = ${Members}
            "name" = ${Name}
            "requestUri" = ${RequestUri}
            "systemId" = ${SystemId}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to ArcusApplicationSetCapacityStats<PSCustomObject>

.DESCRIPTION

Convert from JSON to ArcusApplicationSetCapacityStats<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

ArcusApplicationSetCapacityStats<PSCustomObject>
#>
function ConvertFrom-JsonToArcusApplicationSetCapacityStats {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => ArcusApplicationSetCapacityStats' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in ArcusApplicationSetCapacityStats
        $AllProperties = ("associatedLinks", "capacitySummary", "customerId", "id", "members", "name", "requestUri", "systemId")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "associatedLinks"))) { #optional property not found
            $AssociatedLinks = $null
        } else {
            $AssociatedLinks = $JsonParameters.PSobject.Properties["associatedLinks"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "capacitySummary"))) { #optional property not found
            $CapacitySummary = $null
        } else {
            $CapacitySummary = $JsonParameters.PSobject.Properties["capacitySummary"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "customerId"))) { #optional property not found
            $CustomerId = $null
        } else {
            $CustomerId = $JsonParameters.PSobject.Properties["customerId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) { #optional property not found
            $Id = $null
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "members"))) { #optional property not found
            $Members = $null
        } else {
            $Members = $JsonParameters.PSobject.Properties["members"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) { #optional property not found
            $Name = $null
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "requestUri"))) { #optional property not found
            $RequestUri = $null
        } else {
            $RequestUri = $JsonParameters.PSobject.Properties["requestUri"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "systemId"))) { #optional property not found
            $SystemId = $null
        } else {
            $SystemId = $JsonParameters.PSobject.Properties["systemId"].value
        }

        $PSO = [PSCustomObject]@{
            "associatedLinks" = ${AssociatedLinks}
            "capacitySummary" = ${CapacitySummary}
            "customerId" = ${CustomerId}
            "id" = ${Id}
            "members" = ${Members}
            "name" = ${Name}
            "requestUri" = ${RequestUri}
            "systemId" = ${SystemId}
        }

        return $PSO
    }

}

