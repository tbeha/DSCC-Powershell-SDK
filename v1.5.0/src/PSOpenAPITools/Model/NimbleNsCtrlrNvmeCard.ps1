#
# Data Services Cloud Console API
# Data Services Cloud Console API
# Version: 1.5.0
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER SerialNumber
Serial number.
.PARAMETER Size
NVMe card cache size in bytes.
.PARAMETER State
Online state. Possible values: 'valid', 'in use', 'failed'.
.OUTPUTS

NimbleNsCtrlrNvmeCard<PSCustomObject>
#>

function Initialize-NimbleNsCtrlrNvmeCard {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SerialNumber},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${Size},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${State}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => NimbleNsCtrlrNvmeCard' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "serial_number" = ${SerialNumber}
            "size" = ${Size}
            "state" = ${State}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to NimbleNsCtrlrNvmeCard<PSCustomObject>

.DESCRIPTION

Convert from JSON to NimbleNsCtrlrNvmeCard<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

NimbleNsCtrlrNvmeCard<PSCustomObject>
#>
function ConvertFrom-JsonToNimbleNsCtrlrNvmeCard {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => NimbleNsCtrlrNvmeCard' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in NimbleNsCtrlrNvmeCard
        $AllProperties = ("serial_number", "size", "state")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "serial_number"))) { #optional property not found
            $SerialNumber = $null
        } else {
            $SerialNumber = $JsonParameters.PSobject.Properties["serial_number"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "size"))) { #optional property not found
            $Size = $null
        } else {
            $Size = $JsonParameters.PSobject.Properties["size"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "state"))) { #optional property not found
            $State = $null
        } else {
            $State = $JsonParameters.PSobject.Properties["state"].value
        }

        $PSO = [PSCustomObject]@{
            "serial_number" = ${SerialNumber}
            "size" = ${Size}
            "state" = ${State}
        }

        return $PSO
    }

}

