#
# Data Services Cloud Console API
# Data Services Cloud Console API
# Version: 1.5.0
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

System parameters

.PARAMETER ServiceProcessorCookie
Service processor cookie
.PARAMETER AllowDomainUsersAffectNoDomain
No description available.
.PARAMETER AllowSSZ
Enables or disables support for using the -ssz option during CPG creation
.PARAMETER AllowWrtbackSingleNode
Allow writeback single node setting in days
.PARAMETER AllowWrtbackUpgrade
Allow the system to continue caching when in a single node state during an upgrade for up to the specified number of days
.PARAMETER AutoAdmitTune
Enables or disables automatic rebalancing when admithw detects new disks. Only applies to 2-node systems
.PARAMETER AutoExportAfterReboot
Enables or disables automatically exporting vluns after a reboot. If disabled, vluns and host ports will not become active after a reboot until ""setsysmgr export_vluns"" is issued.
.PARAMETER ComplianceOfficerApproval
Specifies whether to enable or disable the compliance officer approval mode.
.PARAMETER DisableChunkletInitUNMAP
Flag to know if the ChunkletInitUNMAP is disabled
.PARAMETER EnableAIQoS
Enable or disable AI QoS feature, values are:yes or no
.PARAMETER EventLogNum
The number of event log files
.PARAMETER EventLogSize
The size of the event log file
.PARAMETER FailoverMatchedSet
When using Matched Set VLUN templates for exports and Persistent Ports together, you must enable this parameter. The default for this setting is disabled
.PARAMETER FcRawSpaceAlert
FC raw space alert setting in MiB
.PARAMETER HostDIF
Host Data Integrity Field type are:yes or no
.PARAMETER HostDIFTemplate
HostDIF Template
.PARAMETER MaxVolumeRetention
Maximum global volume retention policy in seconds
.PARAMETER NlRawSpaceAlert
NL raw space alert setting in MiB
.PARAMETER OverprovRatioLimit
Over provisioning ratio limit setting
.PARAMETER OverprovRatioWarning
Over provisioning ratio warning setting
.PARAMETER PersonaProfile
If set to 'block-preferred' File persona is supported. The default is 'block-only'
.PARAMETER PortFailoverEnabled
Enables or disables the automatic failover of target ports to their designated partner ports
.PARAMETER R6LayoutVersion
RAID6 implementation version in use
.PARAMETER RemoteCopyHostThrottling
Enables or disables Remote Copy throttling policy for host IO replicated in asynchronous streaming mode
.PARAMETER RemoteSysLog
Remote Syslog Enabled/Disabled
.PARAMETER RemoteSysLogHost
Host details for Remote Syslog
.PARAMETER RemoteSysLogSecurityHost
Security Host details for Remote Syslog
.PARAMETER SessionTimeout
Idle session timeout for a CLI session
.PARAMETER SingleLunHost
Enables or disables support to limit volume exports such that each volume can only be exported to a given host one time
.PARAMETER SsdRawSpaceAlert
SSD raw space alert setting in MiB
.PARAMETER ThermalShutdown
Enables or disables a system shutdown when the temperature gets too hot
.OUTPUTS

Arcusparameters<PSCustomObject>
#>

function Initialize-Arcusparameters {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ServiceProcessorCookie},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${AllowDomainUsersAffectNoDomain},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${AllowSSZ},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${AllowWrtbackSingleNode},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${AllowWrtbackUpgrade},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${AutoAdmitTune},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${AutoExportAfterReboot},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${ComplianceOfficerApproval},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${DisableChunkletInitUNMAP},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${EnableAIQoS},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${EventLogNum},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${EventLogSize},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${FailoverMatchedSet},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${FcRawSpaceAlert},
        [Parameter(Position = 14, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${HostDIF},
        [Parameter(Position = 15, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("NO_HOST_DIF", "THREEPAR_HOST_DIF", "STD_HOST_DIF", "HBA_HOST_DIF", "")]
        [String]
        ${HostDIFTemplate},
        [Parameter(Position = 16, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${MaxVolumeRetention},
        [Parameter(Position = 17, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${NlRawSpaceAlert},
        [Parameter(Position = 18, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Decimal]]
        ${OverprovRatioLimit},
        [Parameter(Position = 19, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Decimal]]
        ${OverprovRatioWarning},
        [Parameter(Position = 20, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${PersonaProfile},
        [Parameter(Position = 21, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${PortFailoverEnabled},
        [Parameter(Position = 22, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${R6LayoutVersion},
        [Parameter(Position = 23, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${RemoteCopyHostThrottling},
        [Parameter(Position = 24, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${RemoteSysLog},
        [Parameter(Position = 25, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${RemoteSysLogHost},
        [Parameter(Position = 26, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${RemoteSysLogSecurityHost},
        [Parameter(Position = 27, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${SessionTimeout},
        [Parameter(Position = 28, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${SingleLunHost},
        [Parameter(Position = 29, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${SsdRawSpaceAlert},
        [Parameter(Position = 30, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${ThermalShutdown}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => Arcusparameters' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "ServiceProcessorCookie" = ${ServiceProcessorCookie}
            "allowDomainUsersAffectNoDomain" = ${AllowDomainUsersAffectNoDomain}
            "allowSSZ" = ${AllowSSZ}
            "allowWrtbackSingleNode" = ${AllowWrtbackSingleNode}
            "allowWrtbackUpgrade" = ${AllowWrtbackUpgrade}
            "autoAdmitTune" = ${AutoAdmitTune}
            "autoExportAfterReboot" = ${AutoExportAfterReboot}
            "complianceOfficerApproval" = ${ComplianceOfficerApproval}
            "disableChunkletInitUNMAP" = ${DisableChunkletInitUNMAP}
            "enableAIQoS" = ${EnableAIQoS}
            "eventLogNum" = ${EventLogNum}
            "eventLogSize" = ${EventLogSize}
            "failoverMatchedSet" = ${FailoverMatchedSet}
            "fcRawSpaceAlert" = ${FcRawSpaceAlert}
            "hostDIF" = ${HostDIF}
            "hostDIFTemplate" = ${HostDIFTemplate}
            "maxVolumeRetention" = ${MaxVolumeRetention}
            "nlRawSpaceAlert" = ${NlRawSpaceAlert}
            "overprovRatioLimit" = ${OverprovRatioLimit}
            "overprovRatioWarning" = ${OverprovRatioWarning}
            "personaProfile" = ${PersonaProfile}
            "portFailoverEnabled" = ${PortFailoverEnabled}
            "r6LayoutVersion" = ${R6LayoutVersion}
            "remoteCopyHostThrottling" = ${RemoteCopyHostThrottling}
            "remoteSysLog" = ${RemoteSysLog}
            "remoteSysLogHost" = ${RemoteSysLogHost}
            "remoteSysLogSecurityHost" = ${RemoteSysLogSecurityHost}
            "sessionTimeout" = ${SessionTimeout}
            "singleLunHost" = ${SingleLunHost}
            "ssdRawSpaceAlert" = ${SsdRawSpaceAlert}
            "thermalShutdown" = ${ThermalShutdown}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to Arcusparameters<PSCustomObject>

.DESCRIPTION

Convert from JSON to Arcusparameters<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

Arcusparameters<PSCustomObject>
#>
function ConvertFrom-JsonToArcusparameters {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => Arcusparameters' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in Arcusparameters
        $AllProperties = ("ServiceProcessorCookie", "allowDomainUsersAffectNoDomain", "allowSSZ", "allowWrtbackSingleNode", "allowWrtbackUpgrade", "autoAdmitTune", "autoExportAfterReboot", "complianceOfficerApproval", "disableChunkletInitUNMAP", "enableAIQoS", "eventLogNum", "eventLogSize", "failoverMatchedSet", "fcRawSpaceAlert", "hostDIF", "hostDIFTemplate", "maxVolumeRetention", "nlRawSpaceAlert", "overprovRatioLimit", "overprovRatioWarning", "personaProfile", "portFailoverEnabled", "r6LayoutVersion", "remoteCopyHostThrottling", "remoteSysLog", "remoteSysLogHost", "remoteSysLogSecurityHost", "sessionTimeout", "singleLunHost", "ssdRawSpaceAlert", "thermalShutdown")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ServiceProcessorCookie"))) { #optional property not found
            $ServiceProcessorCookie = $null
        } else {
            $ServiceProcessorCookie = $JsonParameters.PSobject.Properties["ServiceProcessorCookie"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "allowDomainUsersAffectNoDomain"))) { #optional property not found
            $AllowDomainUsersAffectNoDomain = $null
        } else {
            $AllowDomainUsersAffectNoDomain = $JsonParameters.PSobject.Properties["allowDomainUsersAffectNoDomain"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "allowSSZ"))) { #optional property not found
            $AllowSSZ = $null
        } else {
            $AllowSSZ = $JsonParameters.PSobject.Properties["allowSSZ"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "allowWrtbackSingleNode"))) { #optional property not found
            $AllowWrtbackSingleNode = $null
        } else {
            $AllowWrtbackSingleNode = $JsonParameters.PSobject.Properties["allowWrtbackSingleNode"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "allowWrtbackUpgrade"))) { #optional property not found
            $AllowWrtbackUpgrade = $null
        } else {
            $AllowWrtbackUpgrade = $JsonParameters.PSobject.Properties["allowWrtbackUpgrade"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "autoAdmitTune"))) { #optional property not found
            $AutoAdmitTune = $null
        } else {
            $AutoAdmitTune = $JsonParameters.PSobject.Properties["autoAdmitTune"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "autoExportAfterReboot"))) { #optional property not found
            $AutoExportAfterReboot = $null
        } else {
            $AutoExportAfterReboot = $JsonParameters.PSobject.Properties["autoExportAfterReboot"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "complianceOfficerApproval"))) { #optional property not found
            $ComplianceOfficerApproval = $null
        } else {
            $ComplianceOfficerApproval = $JsonParameters.PSobject.Properties["complianceOfficerApproval"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "disableChunkletInitUNMAP"))) { #optional property not found
            $DisableChunkletInitUNMAP = $null
        } else {
            $DisableChunkletInitUNMAP = $JsonParameters.PSobject.Properties["disableChunkletInitUNMAP"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "enableAIQoS"))) { #optional property not found
            $EnableAIQoS = $null
        } else {
            $EnableAIQoS = $JsonParameters.PSobject.Properties["enableAIQoS"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "eventLogNum"))) { #optional property not found
            $EventLogNum = $null
        } else {
            $EventLogNum = $JsonParameters.PSobject.Properties["eventLogNum"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "eventLogSize"))) { #optional property not found
            $EventLogSize = $null
        } else {
            $EventLogSize = $JsonParameters.PSobject.Properties["eventLogSize"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "failoverMatchedSet"))) { #optional property not found
            $FailoverMatchedSet = $null
        } else {
            $FailoverMatchedSet = $JsonParameters.PSobject.Properties["failoverMatchedSet"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "fcRawSpaceAlert"))) { #optional property not found
            $FcRawSpaceAlert = $null
        } else {
            $FcRawSpaceAlert = $JsonParameters.PSobject.Properties["fcRawSpaceAlert"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "hostDIF"))) { #optional property not found
            $HostDIF = $null
        } else {
            $HostDIF = $JsonParameters.PSobject.Properties["hostDIF"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "hostDIFTemplate"))) { #optional property not found
            $HostDIFTemplate = $null
        } else {
            $HostDIFTemplate = $JsonParameters.PSobject.Properties["hostDIFTemplate"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "maxVolumeRetention"))) { #optional property not found
            $MaxVolumeRetention = $null
        } else {
            $MaxVolumeRetention = $JsonParameters.PSobject.Properties["maxVolumeRetention"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "nlRawSpaceAlert"))) { #optional property not found
            $NlRawSpaceAlert = $null
        } else {
            $NlRawSpaceAlert = $JsonParameters.PSobject.Properties["nlRawSpaceAlert"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "overprovRatioLimit"))) { #optional property not found
            $OverprovRatioLimit = $null
        } else {
            $OverprovRatioLimit = $JsonParameters.PSobject.Properties["overprovRatioLimit"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "overprovRatioWarning"))) { #optional property not found
            $OverprovRatioWarning = $null
        } else {
            $OverprovRatioWarning = $JsonParameters.PSobject.Properties["overprovRatioWarning"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "personaProfile"))) { #optional property not found
            $PersonaProfile = $null
        } else {
            $PersonaProfile = $JsonParameters.PSobject.Properties["personaProfile"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "portFailoverEnabled"))) { #optional property not found
            $PortFailoverEnabled = $null
        } else {
            $PortFailoverEnabled = $JsonParameters.PSobject.Properties["portFailoverEnabled"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "r6LayoutVersion"))) { #optional property not found
            $R6LayoutVersion = $null
        } else {
            $R6LayoutVersion = $JsonParameters.PSobject.Properties["r6LayoutVersion"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "remoteCopyHostThrottling"))) { #optional property not found
            $RemoteCopyHostThrottling = $null
        } else {
            $RemoteCopyHostThrottling = $JsonParameters.PSobject.Properties["remoteCopyHostThrottling"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "remoteSysLog"))) { #optional property not found
            $RemoteSysLog = $null
        } else {
            $RemoteSysLog = $JsonParameters.PSobject.Properties["remoteSysLog"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "remoteSysLogHost"))) { #optional property not found
            $RemoteSysLogHost = $null
        } else {
            $RemoteSysLogHost = $JsonParameters.PSobject.Properties["remoteSysLogHost"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "remoteSysLogSecurityHost"))) { #optional property not found
            $RemoteSysLogSecurityHost = $null
        } else {
            $RemoteSysLogSecurityHost = $JsonParameters.PSobject.Properties["remoteSysLogSecurityHost"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "sessionTimeout"))) { #optional property not found
            $SessionTimeout = $null
        } else {
            $SessionTimeout = $JsonParameters.PSobject.Properties["sessionTimeout"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "singleLunHost"))) { #optional property not found
            $SingleLunHost = $null
        } else {
            $SingleLunHost = $JsonParameters.PSobject.Properties["singleLunHost"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ssdRawSpaceAlert"))) { #optional property not found
            $SsdRawSpaceAlert = $null
        } else {
            $SsdRawSpaceAlert = $JsonParameters.PSobject.Properties["ssdRawSpaceAlert"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "thermalShutdown"))) { #optional property not found
            $ThermalShutdown = $null
        } else {
            $ThermalShutdown = $JsonParameters.PSobject.Properties["thermalShutdown"].value
        }

        $PSO = [PSCustomObject]@{
            "ServiceProcessorCookie" = ${ServiceProcessorCookie}
            "allowDomainUsersAffectNoDomain" = ${AllowDomainUsersAffectNoDomain}
            "allowSSZ" = ${AllowSSZ}
            "allowWrtbackSingleNode" = ${AllowWrtbackSingleNode}
            "allowWrtbackUpgrade" = ${AllowWrtbackUpgrade}
            "autoAdmitTune" = ${AutoAdmitTune}
            "autoExportAfterReboot" = ${AutoExportAfterReboot}
            "complianceOfficerApproval" = ${ComplianceOfficerApproval}
            "disableChunkletInitUNMAP" = ${DisableChunkletInitUNMAP}
            "enableAIQoS" = ${EnableAIQoS}
            "eventLogNum" = ${EventLogNum}
            "eventLogSize" = ${EventLogSize}
            "failoverMatchedSet" = ${FailoverMatchedSet}
            "fcRawSpaceAlert" = ${FcRawSpaceAlert}
            "hostDIF" = ${HostDIF}
            "hostDIFTemplate" = ${HostDIFTemplate}
            "maxVolumeRetention" = ${MaxVolumeRetention}
            "nlRawSpaceAlert" = ${NlRawSpaceAlert}
            "overprovRatioLimit" = ${OverprovRatioLimit}
            "overprovRatioWarning" = ${OverprovRatioWarning}
            "personaProfile" = ${PersonaProfile}
            "portFailoverEnabled" = ${PortFailoverEnabled}
            "r6LayoutVersion" = ${R6LayoutVersion}
            "remoteCopyHostThrottling" = ${RemoteCopyHostThrottling}
            "remoteSysLog" = ${RemoteSysLog}
            "remoteSysLogHost" = ${RemoteSysLogHost}
            "remoteSysLogSecurityHost" = ${RemoteSysLogSecurityHost}
            "sessionTimeout" = ${SessionTimeout}
            "singleLunHost" = ${SingleLunHost}
            "ssdRawSpaceAlert" = ${SsdRawSpaceAlert}
            "thermalShutdown" = ${ThermalShutdown}
        }

        return $PSO
    }

}

