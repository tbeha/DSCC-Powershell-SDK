#
# Data Services Cloud Console API
# Data Services Cloud Console API
# Version: 1.5.0
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER CurValue
Current value.
.PARAMETER Flags
Smart flags.
.PARAMETER LastUpdatedEpochSecs
Last update time in epoch seconds.
.PARAMETER Name
Name of the Smart attribute.
.PARAMETER RawValue
Raw value.
.PARAMETER SmartId
Smart attribute ID.
.PARAMETER Threshold
Smart threshold.
.PARAMETER WorstValue
Worst value.
.OUTPUTS

NimbleDiskSmartAttributes<PSCustomObject>
#>

function Initialize-NimbleDiskSmartAttributes {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${CurValue},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${Flags},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${LastUpdatedEpochSecs},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${RawValue},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${SmartId},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${Threshold},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${WorstValue}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => NimbleDiskSmartAttributes' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "cur_value" = ${CurValue}
            "flags" = ${Flags}
            "last_updated_epoch_secs" = ${LastUpdatedEpochSecs}
            "name" = ${Name}
            "raw_value" = ${RawValue}
            "smart_id" = ${SmartId}
            "threshold" = ${Threshold}
            "worst_value" = ${WorstValue}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to NimbleDiskSmartAttributes<PSCustomObject>

.DESCRIPTION

Convert from JSON to NimbleDiskSmartAttributes<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

NimbleDiskSmartAttributes<PSCustomObject>
#>
function ConvertFrom-JsonToNimbleDiskSmartAttributes {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => NimbleDiskSmartAttributes' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in NimbleDiskSmartAttributes
        $AllProperties = ("cur_value", "flags", "last_updated_epoch_secs", "name", "raw_value", "smart_id", "threshold", "worst_value")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "cur_value"))) { #optional property not found
            $CurValue = $null
        } else {
            $CurValue = $JsonParameters.PSobject.Properties["cur_value"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "flags"))) { #optional property not found
            $Flags = $null
        } else {
            $Flags = $JsonParameters.PSobject.Properties["flags"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "last_updated_epoch_secs"))) { #optional property not found
            $LastUpdatedEpochSecs = $null
        } else {
            $LastUpdatedEpochSecs = $JsonParameters.PSobject.Properties["last_updated_epoch_secs"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) { #optional property not found
            $Name = $null
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "raw_value"))) { #optional property not found
            $RawValue = $null
        } else {
            $RawValue = $JsonParameters.PSobject.Properties["raw_value"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "smart_id"))) { #optional property not found
            $SmartId = $null
        } else {
            $SmartId = $JsonParameters.PSobject.Properties["smart_id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "threshold"))) { #optional property not found
            $Threshold = $null
        } else {
            $Threshold = $JsonParameters.PSobject.Properties["threshold"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "worst_value"))) { #optional property not found
            $WorstValue = $null
        } else {
            $WorstValue = $JsonParameters.PSobject.Properties["worst_value"].value
        }

        $PSO = [PSCustomObject]@{
            "cur_value" = ${CurValue}
            "flags" = ${Flags}
            "last_updated_epoch_secs" = ${LastUpdatedEpochSecs}
            "name" = ${Name}
            "raw_value" = ${RawValue}
            "smart_id" = ${SmartId}
            "threshold" = ${Threshold}
            "worst_value" = ${WorstValue}
        }

        return $PSO
    }

}

