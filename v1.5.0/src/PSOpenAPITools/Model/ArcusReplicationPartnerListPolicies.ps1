#
# Data Services Cloud Console API
# Data Services Cloud Console API
# Version: 1.5.0
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

The policy assigned to the replication partner remote group.

.PARAMETER ActiveActive
Specifies active active policy of the group.
.PARAMETER AutoFailover
Automatic failover on a group.
.PARAMETER AutoRecover
If the group is stopped as a result of links going down, the group can be automatically restarted after the links come back up.
.PARAMETER AutoSynchronize
Specifies auto synchronization of the group.
.PARAMETER MultiTargetPeerPersistence
Specifies that the group is participating in a Multi-target Peer Persistence configuration. The group must have two targets, one of which must be synchronous.The synchronous group target also requires pathManagement and auto Fail over policy settings.
.PARAMETER OverPeriodAlert
If synchronization of an asynchronous periodic group takes longer to complete than its synchronization period, an alert is generated.
.PARAMETER PathManagement
Path management on a group.
.OUTPUTS

ArcusReplicationPartnerListPolicies<PSCustomObject>
#>

function Initialize-ArcusReplicationPartnerListPolicies {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${ActiveActive},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${AutoFailover},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${AutoRecover},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${AutoSynchronize},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${MultiTargetPeerPersistence},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${OverPeriodAlert},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${PathManagement}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => ArcusReplicationPartnerListPolicies' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "activeActive" = ${ActiveActive}
            "autoFailover" = ${AutoFailover}
            "autoRecover" = ${AutoRecover}
            "autoSynchronize" = ${AutoSynchronize}
            "multiTargetPeerPersistence" = ${MultiTargetPeerPersistence}
            "overPeriodAlert" = ${OverPeriodAlert}
            "pathManagement" = ${PathManagement}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to ArcusReplicationPartnerListPolicies<PSCustomObject>

.DESCRIPTION

Convert from JSON to ArcusReplicationPartnerListPolicies<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

ArcusReplicationPartnerListPolicies<PSCustomObject>
#>
function ConvertFrom-JsonToArcusReplicationPartnerListPolicies {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => ArcusReplicationPartnerListPolicies' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in ArcusReplicationPartnerListPolicies
        $AllProperties = ("activeActive", "autoFailover", "autoRecover", "autoSynchronize", "multiTargetPeerPersistence", "overPeriodAlert", "pathManagement")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "activeActive"))) { #optional property not found
            $ActiveActive = $null
        } else {
            $ActiveActive = $JsonParameters.PSobject.Properties["activeActive"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "autoFailover"))) { #optional property not found
            $AutoFailover = $null
        } else {
            $AutoFailover = $JsonParameters.PSobject.Properties["autoFailover"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "autoRecover"))) { #optional property not found
            $AutoRecover = $null
        } else {
            $AutoRecover = $JsonParameters.PSobject.Properties["autoRecover"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "autoSynchronize"))) { #optional property not found
            $AutoSynchronize = $null
        } else {
            $AutoSynchronize = $JsonParameters.PSobject.Properties["autoSynchronize"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "multiTargetPeerPersistence"))) { #optional property not found
            $MultiTargetPeerPersistence = $null
        } else {
            $MultiTargetPeerPersistence = $JsonParameters.PSobject.Properties["multiTargetPeerPersistence"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "overPeriodAlert"))) { #optional property not found
            $OverPeriodAlert = $null
        } else {
            $OverPeriodAlert = $JsonParameters.PSobject.Properties["overPeriodAlert"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "pathManagement"))) { #optional property not found
            $PathManagement = $null
        } else {
            $PathManagement = $JsonParameters.PSobject.Properties["pathManagement"].value
        }

        $PSO = [PSCustomObject]@{
            "activeActive" = ${ActiveActive}
            "autoFailover" = ${AutoFailover}
            "autoRecover" = ${AutoRecover}
            "autoSynchronize" = ${AutoSynchronize}
            "multiTargetPeerPersistence" = ${MultiTargetPeerPersistence}
            "overPeriodAlert" = ${OverPeriodAlert}
            "pathManagement" = ${PathManagement}
        }

        return $PSO
    }

}

