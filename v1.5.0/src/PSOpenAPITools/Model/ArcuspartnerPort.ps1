#
# Data Services Cloud Console API
# Data Services Cloud Console API
# Version: 1.5.0
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER NodeWwnOrName
Node WWN (for FC) or iSCSI name (for iSCSI)
.PARAMETER PortWwnOrIp
Port WWN (for FC) or IP address (for iSCSI)
.PARAMETER Position
No description available.
.OUTPUTS

ArcuspartnerPort<PSCustomObject>
#>

function Initialize-ArcuspartnerPort {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${NodeWwnOrName},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${PortWwnOrIp},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Position}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => ArcuspartnerPort' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "nodeWwnOrName" = ${NodeWwnOrName}
            "portWwnOrIp" = ${PortWwnOrIp}
            "position" = ${Position}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to ArcuspartnerPort<PSCustomObject>

.DESCRIPTION

Convert from JSON to ArcuspartnerPort<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

ArcuspartnerPort<PSCustomObject>
#>
function ConvertFrom-JsonToArcuspartnerPort {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => ArcuspartnerPort' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in ArcuspartnerPort
        $AllProperties = ("nodeWwnOrName", "portWwnOrIp", "position")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "nodeWwnOrName"))) { #optional property not found
            $NodeWwnOrName = $null
        } else {
            $NodeWwnOrName = $JsonParameters.PSobject.Properties["nodeWwnOrName"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "portWwnOrIp"))) { #optional property not found
            $PortWwnOrIp = $null
        } else {
            $PortWwnOrIp = $JsonParameters.PSobject.Properties["portWwnOrIp"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "position"))) { #optional property not found
            $Position = $null
        } else {
            $Position = $JsonParameters.PSobject.Properties["position"].value
        }

        $PSO = [PSCustomObject]@{
            "nodeWwnOrName" = ${NodeWwnOrName}
            "portWwnOrIp" = ${PortWwnOrIp}
            "position" = ${Position}
        }

        return $PSO
    }

}

