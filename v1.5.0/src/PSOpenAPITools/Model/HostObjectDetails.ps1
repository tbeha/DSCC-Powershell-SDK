#
# Data Services Cloud Console API
# Data Services Cloud Console API
# Version: 1.5.0
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER AssociatedLinks
Associated Links Details
.PARAMETER AssociatedSystems
system IDs to which the host belongs to.
.PARAMETER Comment
Comment
.PARAMETER ConsoleUri
consoleUri for detailed storage object
.PARAMETER Contact
Contact information
.PARAMETER CustomerId
The customer application identifier
.PARAMETER EditStatus
Host Update or Delete progress status. Possible status are: Update_In_Progress,Update_Success,Update_Failed,Delete_In_Progress,Delete_Failed,Not_Applicable,Merge_Success,Merge_In_Progress,Merge_Failed,Convert_In_Progress,Convert_Failed,Convert_Success.
.PARAMETER Fqdn
Fully qualified domain name of the host.
.PARAMETER Generation
A monotonically increasing value. This value updates when the resource is updated and can be used as a short way to determine if a resource has changed or which of two different copies of a resource is more up to date.
.PARAMETER HostGroups
Host group to which the host belongs to.
.PARAMETER Id
Identifier for host.
.PARAMETER Initiators
Host initiator list this host is associated with.
.PARAMETER IpAddress
IP address of the host.
.PARAMETER IsMergable
Indicates whether host has a duplicate. This field is applicable only when isMergable `Filter` is set to true on the GET All else will be set to false always.
.PARAMETER Location
location.
.PARAMETER MarkedForDelete
Indicates whether host is marked for deletion or not
.PARAMETER Model
Model
.PARAMETER Name
Name of the host.
.PARAMETER OperatingSystem
Host operating system.
.PARAMETER Persona
Host persona details.
.PARAMETER Protocol
protocol supported are : FC ,iSCSI or NVMe
.PARAMETER Subnet
subnet.
.PARAMETER Systems
system IDs to which the host belongs to.
.PARAMETER Type
The type of resource.
.PARAMETER UserCreated
Indicates whether user created host or discovered host
.OUTPUTS

HostObjectDetails<PSCustomObject>
#>

function Initialize-HostObjectDetails {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${AssociatedLinks},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${AssociatedSystems},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Comment},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ConsoleUri},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Contact},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${CustomerId},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${EditStatus},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Fqdn},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${Generation},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${HostGroups},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Id},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Initiators},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${IpAddress},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${IsMergable},
        [Parameter(Position = 14, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Location},
        [Parameter(Position = 15, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${MarkedForDelete},
        [Parameter(Position = 16, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Model},
        [Parameter(Position = 17, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 18, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${OperatingSystem},
        [Parameter(Position = 19, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Persona},
        [Parameter(Position = 20, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Protocol},
        [Parameter(Position = 21, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Subnet},
        [Parameter(Position = 22, ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${Systems},
        [Parameter(Position = 23, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Type},
        [Parameter(Position = 24, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${UserCreated}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => HostObjectDetails' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "associatedLinks" = ${AssociatedLinks}
            "associatedSystems" = ${AssociatedSystems}
            "comment" = ${Comment}
            "consoleUri" = ${ConsoleUri}
            "contact" = ${Contact}
            "customerId" = ${CustomerId}
            "editStatus" = ${EditStatus}
            "fqdn" = ${Fqdn}
            "generation" = ${Generation}
            "hostGroups" = ${HostGroups}
            "id" = ${Id}
            "initiators" = ${Initiators}
            "ipAddress" = ${IpAddress}
            "isMergable" = ${IsMergable}
            "location" = ${Location}
            "markedForDelete" = ${MarkedForDelete}
            "model" = ${Model}
            "name" = ${Name}
            "operatingSystem" = ${OperatingSystem}
            "persona" = ${Persona}
            "protocol" = ${Protocol}
            "subnet" = ${Subnet}
            "systems" = ${Systems}
            "type" = ${Type}
            "userCreated" = ${UserCreated}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to HostObjectDetails<PSCustomObject>

.DESCRIPTION

Convert from JSON to HostObjectDetails<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

HostObjectDetails<PSCustomObject>
#>
function ConvertFrom-JsonToHostObjectDetails {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => HostObjectDetails' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in HostObjectDetails
        $AllProperties = ("associatedLinks", "associatedSystems", "comment", "consoleUri", "contact", "customerId", "editStatus", "fqdn", "generation", "hostGroups", "id", "initiators", "ipAddress", "isMergable", "location", "markedForDelete", "model", "name", "operatingSystem", "persona", "protocol", "subnet", "systems", "type", "userCreated")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "associatedLinks"))) { #optional property not found
            $AssociatedLinks = $null
        } else {
            $AssociatedLinks = $JsonParameters.PSobject.Properties["associatedLinks"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "associatedSystems"))) { #optional property not found
            $AssociatedSystems = $null
        } else {
            $AssociatedSystems = $JsonParameters.PSobject.Properties["associatedSystems"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "comment"))) { #optional property not found
            $Comment = $null
        } else {
            $Comment = $JsonParameters.PSobject.Properties["comment"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "consoleUri"))) { #optional property not found
            $ConsoleUri = $null
        } else {
            $ConsoleUri = $JsonParameters.PSobject.Properties["consoleUri"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "contact"))) { #optional property not found
            $Contact = $null
        } else {
            $Contact = $JsonParameters.PSobject.Properties["contact"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "customerId"))) { #optional property not found
            $CustomerId = $null
        } else {
            $CustomerId = $JsonParameters.PSobject.Properties["customerId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "editStatus"))) { #optional property not found
            $EditStatus = $null
        } else {
            $EditStatus = $JsonParameters.PSobject.Properties["editStatus"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "fqdn"))) { #optional property not found
            $Fqdn = $null
        } else {
            $Fqdn = $JsonParameters.PSobject.Properties["fqdn"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "generation"))) { #optional property not found
            $Generation = $null
        } else {
            $Generation = $JsonParameters.PSobject.Properties["generation"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "hostGroups"))) { #optional property not found
            $HostGroups = $null
        } else {
            $HostGroups = $JsonParameters.PSobject.Properties["hostGroups"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) { #optional property not found
            $Id = $null
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "initiators"))) { #optional property not found
            $Initiators = $null
        } else {
            $Initiators = $JsonParameters.PSobject.Properties["initiators"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ipAddress"))) { #optional property not found
            $IpAddress = $null
        } else {
            $IpAddress = $JsonParameters.PSobject.Properties["ipAddress"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "isMergable"))) { #optional property not found
            $IsMergable = $null
        } else {
            $IsMergable = $JsonParameters.PSobject.Properties["isMergable"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "location"))) { #optional property not found
            $Location = $null
        } else {
            $Location = $JsonParameters.PSobject.Properties["location"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "markedForDelete"))) { #optional property not found
            $MarkedForDelete = $null
        } else {
            $MarkedForDelete = $JsonParameters.PSobject.Properties["markedForDelete"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "model"))) { #optional property not found
            $Model = $null
        } else {
            $Model = $JsonParameters.PSobject.Properties["model"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) { #optional property not found
            $Name = $null
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "operatingSystem"))) { #optional property not found
            $OperatingSystem = $null
        } else {
            $OperatingSystem = $JsonParameters.PSobject.Properties["operatingSystem"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "persona"))) { #optional property not found
            $Persona = $null
        } else {
            $Persona = $JsonParameters.PSobject.Properties["persona"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "protocol"))) { #optional property not found
            $Protocol = $null
        } else {
            $Protocol = $JsonParameters.PSobject.Properties["protocol"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "subnet"))) { #optional property not found
            $Subnet = $null
        } else {
            $Subnet = $JsonParameters.PSobject.Properties["subnet"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "systems"))) { #optional property not found
            $Systems = $null
        } else {
            $Systems = $JsonParameters.PSobject.Properties["systems"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "type"))) { #optional property not found
            $Type = $null
        } else {
            $Type = $JsonParameters.PSobject.Properties["type"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "userCreated"))) { #optional property not found
            $UserCreated = $null
        } else {
            $UserCreated = $JsonParameters.PSobject.Properties["userCreated"].value
        }

        $PSO = [PSCustomObject]@{
            "associatedLinks" = ${AssociatedLinks}
            "associatedSystems" = ${AssociatedSystems}
            "comment" = ${Comment}
            "consoleUri" = ${ConsoleUri}
            "contact" = ${Contact}
            "customerId" = ${CustomerId}
            "editStatus" = ${EditStatus}
            "fqdn" = ${Fqdn}
            "generation" = ${Generation}
            "hostGroups" = ${HostGroups}
            "id" = ${Id}
            "initiators" = ${Initiators}
            "ipAddress" = ${IpAddress}
            "isMergable" = ${IsMergable}
            "location" = ${Location}
            "markedForDelete" = ${MarkedForDelete}
            "model" = ${Model}
            "name" = ${Name}
            "operatingSystem" = ${OperatingSystem}
            "persona" = ${Persona}
            "protocol" = ${Protocol}
            "subnet" = ${Subnet}
            "systems" = ${Systems}
            "type" = ${Type}
            "userCreated" = ${UserCreated}
        }

        return $PSO
    }

}

