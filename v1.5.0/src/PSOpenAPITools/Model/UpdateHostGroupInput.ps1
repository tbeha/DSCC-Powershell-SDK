#
# Data Services Cloud Console API
# Data Services Cloud Console API
# Version: 1.5.0
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER HostProximityValues
Change Proximity for list of hosts
.PARAMETER HostsToCreate
List of hosts to be replaced to the group
.PARAMETER Name
Name of the host group
.PARAMETER RemovedHosts
List of host IDs to be removed from the group
.PARAMETER UpdatedHosts
List of host IDs to be added to the group
.OUTPUTS

UpdateHostGroupInput<PSCustomObject>
#>

function Initialize-UpdateHostGroupInput {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${HostProximityValues},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${HostsToCreate},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${RemovedHosts},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${UpdatedHosts}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => UpdateHostGroupInput' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "hostProximityValues" = ${HostProximityValues}
            "hostsToCreate" = ${HostsToCreate}
            "name" = ${Name}
            "removedHosts" = ${RemovedHosts}
            "updatedHosts" = ${UpdatedHosts}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to UpdateHostGroupInput<PSCustomObject>

.DESCRIPTION

Convert from JSON to UpdateHostGroupInput<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

UpdateHostGroupInput<PSCustomObject>
#>
function ConvertFrom-JsonToUpdateHostGroupInput {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => UpdateHostGroupInput' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in UpdateHostGroupInput
        $AllProperties = ("hostProximityValues", "hostsToCreate", "name", "removedHosts", "updatedHosts")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "hostProximityValues"))) { #optional property not found
            $HostProximityValues = $null
        } else {
            $HostProximityValues = $JsonParameters.PSobject.Properties["hostProximityValues"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "hostsToCreate"))) { #optional property not found
            $HostsToCreate = $null
        } else {
            $HostsToCreate = $JsonParameters.PSobject.Properties["hostsToCreate"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) { #optional property not found
            $Name = $null
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "removedHosts"))) { #optional property not found
            $RemovedHosts = $null
        } else {
            $RemovedHosts = $JsonParameters.PSobject.Properties["removedHosts"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "updatedHosts"))) { #optional property not found
            $UpdatedHosts = $null
        } else {
            $UpdatedHosts = $JsonParameters.PSobject.Properties["updatedHosts"].value
        }

        $PSO = [PSCustomObject]@{
            "hostProximityValues" = ${HostProximityValues}
            "hostsToCreate" = ${HostsToCreate}
            "name" = ${Name}
            "removedHosts" = ${RemovedHosts}
            "updatedHosts" = ${UpdatedHosts}
        }

        return $PSO
    }

}

