#
# Data Services Cloud Console API
# Data Services Cloud Console API
# Version: 1.5.0
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Protection schedule details.

.PARAMETER AtTime
Time of day when snapshot should be taken. In case repeat frequency specifies more than one snapshot in a day then the until_time option specifies until what time of day to take snapshots. Non-negative integer in range [0,86399] which is equivalent to [0:00:00 AM, 23:59:59 PM].
.PARAMETER Days
Specifies which days snapshots should be taken. Comma separated list of days of the week or 'all'.
.PARAMETER Description
Description of the schedule. String of up to 255 printable ASCII characters.
.PARAMETER DisableAppsync
Disables application synchronized snapshots and creates crash consistent snapshots instead. Possible values: 'true', 'false'.
.PARAMETER DownstreamPartner
Specifies the partner name if snapshots created by this schedule should be replicated. String of up to 64 alphanumeric characters, - and . and : are allowed after first character.
.PARAMETER DownstreamPartnerId
Specifies the partner ID if snapshots created by this schedule should be replicated. In an update operation, if snapshots should be replicated, set this attribute to the ID of the replication partner. If snapshots should not be replicated, set this attribute to the empty string. An optional NsObjectID. A 42 digit hexadecimal number or the empty string.
.PARAMETER Name
Name of snapshot schedule to create. String of up to 64 alphanumeric characters, - and . and : are allowed after first character.
.PARAMETER NumRetain
Number of snapshots to retain. If replication is enabled on this schedule the array will always retain the latest replicated snapshot, which may exceed the specified retention value. This is necessary to ensure efficient replication performance. Unsigned 64-bit integer.
.PARAMETER NumRetainReplica
Number of snapshots to retain on the replica. Unsigned 64-bit integer.
.PARAMETER Period
Repeat interval for snapshots with respect to the period_unit. For example, a value of 2 with the 'period_unit' of 'hours' results in one snapshot every 2 hours. Unsigned 64-bit integer.
.PARAMETER PeriodUnit
Time unit over which to take the number of snapshots specified in 'period'. For example, a value of 'days' with a 'period' of '1' results in one snapshot every day. Possible values: 'minutes', 'hours', 'days', 'weeks'.
.PARAMETER ReplAlertThres
Replication alert threshold in seconds. If the replication of a snapshot takes more than this amount of time to complete an alert will be generated. Enter 0 to disable this alert. Seconds since last epoch i.e. 00:00 January 1, 1970.
.PARAMETER ReplicateEvery
Specifies which snapshots should be replicated. If snapshots are replicated and this option is not specified, every snapshot is replicated. Unsigned 64-bit integer.
.PARAMETER ScheduleType
Normal schedules have internal timers which drive snapshot creation. An externally driven schedule has no internal timers. All snapshot activity is driven by an external trigger. In other words, these schedules are used only for externally driven manual snapshots. Possible values: 'regular', 'external_trigger'
.PARAMETER SkipDbConsistencyCheck
Skip consistency check for database files on snapshots created by this schedule. This option only applies to snapshot schedules of a protection template with application synchronization set to VSS, application ID set to MS Exchange 2010 or later w/DAG, this schedule's snap_verify option set to yes, and its disable_appsync option set to false. Skipping consistency checks is only recommended if each database in a DAG has multiple copies. Possible values: 'true', 'false'.
.PARAMETER SnapVerify
Run verification tool on snapshot created by this schedule. This option can only be used with snapshot schedules of a protection template that has application synchronization. The tool used to verify snapshot depends on the type of application. For example, if application synchronization is VSS and the application ID is Exchange, eseutil tool is run on the snapshots. If verification fails, the logs are not truncated. Possible values: 'true', 'false'.
.PARAMETER UntilTime
Time of day to stop taking snapshots. Applicable only when repeat frequency specifies more than one snapshot in a day. Non-negative integer in range [0,86399] which is equivalent to [0:00:00 AM, 23:59:59 PM].
.OUTPUTS

ProtectionScheduleInput<PSCustomObject>
#>

function Initialize-ProtectionScheduleInput {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${AtTime},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Days},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Description},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${DisableAppsync},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${DownstreamPartner},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${DownstreamPartnerId},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [Int32]
        ${NumRetain},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${NumRetainReplica},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Period},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${PeriodUnit},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${ReplAlertThres},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${ReplicateEvery},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ScheduleType},
        [Parameter(Position = 14, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${SkipDbConsistencyCheck},
        [Parameter(Position = 15, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${SnapVerify},
        [Parameter(Position = 16, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${UntilTime}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => ProtectionScheduleInput' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $Name) {
            throw "invalid value for 'Name', 'Name' cannot be null."
        }

        if ($null -eq $NumRetain) {
            throw "invalid value for 'NumRetain', 'NumRetain' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "at_time" = ${AtTime}
            "days" = ${Days}
            "description" = ${Description}
            "disable_appsync" = ${DisableAppsync}
            "downstream_partner" = ${DownstreamPartner}
            "downstream_partner_id" = ${DownstreamPartnerId}
            "name" = ${Name}
            "num_retain" = ${NumRetain}
            "num_retain_replica" = ${NumRetainReplica}
            "period" = ${Period}
            "period_unit" = ${PeriodUnit}
            "repl_alert_thres" = ${ReplAlertThres}
            "replicate_every" = ${ReplicateEvery}
            "schedule_type" = ${ScheduleType}
            "skip_db_consistency_check" = ${SkipDbConsistencyCheck}
            "snap_verify" = ${SnapVerify}
            "until_time" = ${UntilTime}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to ProtectionScheduleInput<PSCustomObject>

.DESCRIPTION

Convert from JSON to ProtectionScheduleInput<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

ProtectionScheduleInput<PSCustomObject>
#>
function ConvertFrom-JsonToProtectionScheduleInput {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => ProtectionScheduleInput' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in ProtectionScheduleInput
        $AllProperties = ("at_time", "days", "description", "disable_appsync", "downstream_partner", "downstream_partner_id", "name", "num_retain", "num_retain_replica", "period", "period_unit", "repl_alert_thres", "replicate_every", "schedule_type", "skip_db_consistency_check", "snap_verify", "until_time")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'name' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) {
            throw "Error! JSON cannot be serialized due to the required property 'name' missing."
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "num_retain"))) {
            throw "Error! JSON cannot be serialized due to the required property 'num_retain' missing."
        } else {
            $NumRetain = $JsonParameters.PSobject.Properties["num_retain"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "at_time"))) { #optional property not found
            $AtTime = $null
        } else {
            $AtTime = $JsonParameters.PSobject.Properties["at_time"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "days"))) { #optional property not found
            $Days = $null
        } else {
            $Days = $JsonParameters.PSobject.Properties["days"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "description"))) { #optional property not found
            $Description = $null
        } else {
            $Description = $JsonParameters.PSobject.Properties["description"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "disable_appsync"))) { #optional property not found
            $DisableAppsync = $null
        } else {
            $DisableAppsync = $JsonParameters.PSobject.Properties["disable_appsync"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "downstream_partner"))) { #optional property not found
            $DownstreamPartner = $null
        } else {
            $DownstreamPartner = $JsonParameters.PSobject.Properties["downstream_partner"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "downstream_partner_id"))) { #optional property not found
            $DownstreamPartnerId = $null
        } else {
            $DownstreamPartnerId = $JsonParameters.PSobject.Properties["downstream_partner_id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "num_retain_replica"))) { #optional property not found
            $NumRetainReplica = $null
        } else {
            $NumRetainReplica = $JsonParameters.PSobject.Properties["num_retain_replica"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "period"))) { #optional property not found
            $Period = $null
        } else {
            $Period = $JsonParameters.PSobject.Properties["period"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "period_unit"))) { #optional property not found
            $PeriodUnit = $null
        } else {
            $PeriodUnit = $JsonParameters.PSobject.Properties["period_unit"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "repl_alert_thres"))) { #optional property not found
            $ReplAlertThres = $null
        } else {
            $ReplAlertThres = $JsonParameters.PSobject.Properties["repl_alert_thres"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "replicate_every"))) { #optional property not found
            $ReplicateEvery = $null
        } else {
            $ReplicateEvery = $JsonParameters.PSobject.Properties["replicate_every"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "schedule_type"))) { #optional property not found
            $ScheduleType = $null
        } else {
            $ScheduleType = $JsonParameters.PSobject.Properties["schedule_type"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "skip_db_consistency_check"))) { #optional property not found
            $SkipDbConsistencyCheck = $null
        } else {
            $SkipDbConsistencyCheck = $JsonParameters.PSobject.Properties["skip_db_consistency_check"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "snap_verify"))) { #optional property not found
            $SnapVerify = $null
        } else {
            $SnapVerify = $JsonParameters.PSobject.Properties["snap_verify"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "until_time"))) { #optional property not found
            $UntilTime = $null
        } else {
            $UntilTime = $JsonParameters.PSobject.Properties["until_time"].value
        }

        $PSO = [PSCustomObject]@{
            "at_time" = ${AtTime}
            "days" = ${Days}
            "description" = ${Description}
            "disable_appsync" = ${DisableAppsync}
            "downstream_partner" = ${DownstreamPartner}
            "downstream_partner_id" = ${DownstreamPartnerId}
            "name" = ${Name}
            "num_retain" = ${NumRetain}
            "num_retain_replica" = ${NumRetainReplica}
            "period" = ${Period}
            "period_unit" = ${PeriodUnit}
            "repl_alert_thres" = ${ReplAlertThres}
            "replicate_every" = ${ReplicateEvery}
            "schedule_type" = ${ScheduleType}
            "skip_db_consistency_check" = ${SkipDbConsistencyCheck}
            "snap_verify" = ${SnapVerify}
            "until_time" = ${UntilTime}
        }

        return $PSO
    }

}

