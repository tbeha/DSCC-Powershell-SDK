#
# Data Services Cloud Console API
# Data Services Cloud Console API
# Version: 1.5.0
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Schedule created on application set

.PARAMETER AtTime
Time of the day when snapshot should be taken. If more than one snapshots in a day then untilTime specifies until what time snapshots should be taken
.PARAMETER CustomerId
tenantId of resource
.PARAMETER DayOfMonth
Day of month that a scheduled task will execute. Allowed values are 1-28
.PARAMETER Days
Days on which schedule task will run. Possible values: sunday,monday,tuesday,wednesday,thursday,friday,saturday
.PARAMETER ExpireSecs
Expiration time in seconds
.PARAMETER Generation
Generation value
.PARAMETER Id
Unique Identifier of the resource
.PARAMETER IsAlertEnabled
Whether the schedule will generate an alert if it could not run.
.PARAMETER IsPaused
Whether the schedule has been paused.
.PARAMETER IsRemote
Specifies that this schedule is remote protection schedule
.PARAMETER IsSystemTask
Whether the schedule is a system created one.
.PARAMETER Name
Name of the resource
.PARAMETER NextRunTime
The next time a schedule will run
.PARAMETER Period
Time interval for schedule task to run. Possible values:               - hours: 1,2,3,4,6,8,12               - minutes: 15,20,30               - days & months: 1
.PARAMETER PeriodUnit
Unit of time in which period is defined. Possible values: minutes, hours, days, months
.PARAMETER RetainSecs
Retention time in seconds.
.PARAMETER Status
Whether the schedule task is active or has been suspended
.PARAMETER SystemWwn
WWN of the array
.PARAMETER Type
Type of object
.PARAMETER UntilTime
Time of the day to stop taking snapshots. Applicable only when more than one snapshots should be taken in a day.
.PARAMETER User
The user that created the schedule.
.OUTPUTS

ArcusSchedule<PSCustomObject>
#>

function Initialize-ArcusSchedule {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${AtTime},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${CustomerId},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${DayOfMonth},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Days},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${ExpireSecs},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${Generation},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Id},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${IsAlertEnabled},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${IsPaused},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${IsRemote},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${IsSystemTask},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${NextRunTime},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${Period},
        [Parameter(Position = 14, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${PeriodUnit},
        [Parameter(Position = 15, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${RetainSecs},
        [Parameter(Position = 16, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Status},
        [Parameter(Position = 17, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SystemWwn},
        [Parameter(Position = 18, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Type},
        [Parameter(Position = 19, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${UntilTime},
        [Parameter(Position = 20, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${User}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => ArcusSchedule' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "atTime" = ${AtTime}
            "customerId" = ${CustomerId}
            "dayOfMonth" = ${DayOfMonth}
            "days" = ${Days}
            "expireSecs" = ${ExpireSecs}
            "generation" = ${Generation}
            "id" = ${Id}
            "isAlertEnabled" = ${IsAlertEnabled}
            "isPaused" = ${IsPaused}
            "isRemote" = ${IsRemote}
            "isSystemTask" = ${IsSystemTask}
            "name" = ${Name}
            "nextRunTime" = ${NextRunTime}
            "period" = ${Period}
            "periodUnit" = ${PeriodUnit}
            "retainSecs" = ${RetainSecs}
            "status" = ${Status}
            "systemWwn" = ${SystemWwn}
            "type" = ${Type}
            "untilTime" = ${UntilTime}
            "user" = ${User}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to ArcusSchedule<PSCustomObject>

.DESCRIPTION

Convert from JSON to ArcusSchedule<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

ArcusSchedule<PSCustomObject>
#>
function ConvertFrom-JsonToArcusSchedule {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => ArcusSchedule' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in ArcusSchedule
        $AllProperties = ("atTime", "customerId", "dayOfMonth", "days", "expireSecs", "generation", "id", "isAlertEnabled", "isPaused", "isRemote", "isSystemTask", "name", "nextRunTime", "period", "periodUnit", "retainSecs", "status", "systemWwn", "type", "untilTime", "user")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "atTime"))) { #optional property not found
            $AtTime = $null
        } else {
            $AtTime = $JsonParameters.PSobject.Properties["atTime"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "customerId"))) { #optional property not found
            $CustomerId = $null
        } else {
            $CustomerId = $JsonParameters.PSobject.Properties["customerId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "dayOfMonth"))) { #optional property not found
            $DayOfMonth = $null
        } else {
            $DayOfMonth = $JsonParameters.PSobject.Properties["dayOfMonth"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "days"))) { #optional property not found
            $Days = $null
        } else {
            $Days = $JsonParameters.PSobject.Properties["days"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "expireSecs"))) { #optional property not found
            $ExpireSecs = $null
        } else {
            $ExpireSecs = $JsonParameters.PSobject.Properties["expireSecs"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "generation"))) { #optional property not found
            $Generation = $null
        } else {
            $Generation = $JsonParameters.PSobject.Properties["generation"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) { #optional property not found
            $Id = $null
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "isAlertEnabled"))) { #optional property not found
            $IsAlertEnabled = $null
        } else {
            $IsAlertEnabled = $JsonParameters.PSobject.Properties["isAlertEnabled"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "isPaused"))) { #optional property not found
            $IsPaused = $null
        } else {
            $IsPaused = $JsonParameters.PSobject.Properties["isPaused"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "isRemote"))) { #optional property not found
            $IsRemote = $null
        } else {
            $IsRemote = $JsonParameters.PSobject.Properties["isRemote"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "isSystemTask"))) { #optional property not found
            $IsSystemTask = $null
        } else {
            $IsSystemTask = $JsonParameters.PSobject.Properties["isSystemTask"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) { #optional property not found
            $Name = $null
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "nextRunTime"))) { #optional property not found
            $NextRunTime = $null
        } else {
            $NextRunTime = $JsonParameters.PSobject.Properties["nextRunTime"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "period"))) { #optional property not found
            $Period = $null
        } else {
            $Period = $JsonParameters.PSobject.Properties["period"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "periodUnit"))) { #optional property not found
            $PeriodUnit = $null
        } else {
            $PeriodUnit = $JsonParameters.PSobject.Properties["periodUnit"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "retainSecs"))) { #optional property not found
            $RetainSecs = $null
        } else {
            $RetainSecs = $JsonParameters.PSobject.Properties["retainSecs"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "status"))) { #optional property not found
            $Status = $null
        } else {
            $Status = $JsonParameters.PSobject.Properties["status"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "systemWwn"))) { #optional property not found
            $SystemWwn = $null
        } else {
            $SystemWwn = $JsonParameters.PSobject.Properties["systemWwn"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "type"))) { #optional property not found
            $Type = $null
        } else {
            $Type = $JsonParameters.PSobject.Properties["type"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "untilTime"))) { #optional property not found
            $UntilTime = $null
        } else {
            $UntilTime = $JsonParameters.PSobject.Properties["untilTime"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "user"))) { #optional property not found
            $User = $null
        } else {
            $User = $JsonParameters.PSobject.Properties["user"].value
        }

        $PSO = [PSCustomObject]@{
            "atTime" = ${AtTime}
            "customerId" = ${CustomerId}
            "dayOfMonth" = ${DayOfMonth}
            "days" = ${Days}
            "expireSecs" = ${ExpireSecs}
            "generation" = ${Generation}
            "id" = ${Id}
            "isAlertEnabled" = ${IsAlertEnabled}
            "isPaused" = ${IsPaused}
            "isRemote" = ${IsRemote}
            "isSystemTask" = ${IsSystemTask}
            "name" = ${Name}
            "nextRunTime" = ${NextRunTime}
            "period" = ${Period}
            "periodUnit" = ${PeriodUnit}
            "retainSecs" = ${RetainSecs}
            "status" = ${Status}
            "systemWwn" = ${SystemWwn}
            "type" = ${Type}
            "untilTime" = ${UntilTime}
            "user" = ${User}
        }

        return $PSO
    }

}

