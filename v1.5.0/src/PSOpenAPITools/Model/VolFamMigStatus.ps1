#
# Data Services Cloud Console API
# Data Services Cloud Console API
# Version: 1.5.0
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Data migration status for a group of related volumes.

.PARAMETER ArrayList
Data migration status for the arrays that store the volumes.
.PARAMETER DestPoolId
ID of the destination pool, where the volumes are moved.
.PARAMETER DestPoolName
Name of the destination pool, where the volumes are moved.
.PARAMETER MoveBytesMigrated
The bytes of volumes which have been moved.
.PARAMETER MoveBytesRemaining
The bytes of volumes which have not been moved.
.PARAMETER MoveEstComplTime
The estimated time of completion of a move.
.PARAMETER MoveStartTime
The start time when the volumes was moved.
.PARAMETER RootVolId
ID of the root volume in the group.
.PARAMETER RootVolName
Name of the root volume in the group.
.PARAMETER SourcePoolId
ID of the source pool, where the volumes originally locate.
.PARAMETER SourcePoolName
Name of the source pool, where the volumes originally locate.
.OUTPUTS

VolFamMigStatus<PSCustomObject>
#>

function Initialize-VolFamMigStatus {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${ArrayList},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${DestPoolId},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${DestPoolName},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${MoveBytesMigrated},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${MoveBytesRemaining},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${MoveEstComplTime},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${MoveStartTime},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${RootVolId},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${RootVolName},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SourcePoolId},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SourcePoolName}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => VolFamMigStatus' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "array_list" = ${ArrayList}
            "dest_pool_id" = ${DestPoolId}
            "dest_pool_name" = ${DestPoolName}
            "move_bytes_migrated" = ${MoveBytesMigrated}
            "move_bytes_remaining" = ${MoveBytesRemaining}
            "move_est_compl_time" = ${MoveEstComplTime}
            "move_start_time" = ${MoveStartTime}
            "root_vol_id" = ${RootVolId}
            "root_vol_name" = ${RootVolName}
            "source_pool_id" = ${SourcePoolId}
            "source_pool_name" = ${SourcePoolName}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to VolFamMigStatus<PSCustomObject>

.DESCRIPTION

Convert from JSON to VolFamMigStatus<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

VolFamMigStatus<PSCustomObject>
#>
function ConvertFrom-JsonToVolFamMigStatus {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => VolFamMigStatus' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in VolFamMigStatus
        $AllProperties = ("array_list", "dest_pool_id", "dest_pool_name", "move_bytes_migrated", "move_bytes_remaining", "move_est_compl_time", "move_start_time", "root_vol_id", "root_vol_name", "source_pool_id", "source_pool_name")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "array_list"))) { #optional property not found
            $ArrayList = $null
        } else {
            $ArrayList = $JsonParameters.PSobject.Properties["array_list"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "dest_pool_id"))) { #optional property not found
            $DestPoolId = $null
        } else {
            $DestPoolId = $JsonParameters.PSobject.Properties["dest_pool_id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "dest_pool_name"))) { #optional property not found
            $DestPoolName = $null
        } else {
            $DestPoolName = $JsonParameters.PSobject.Properties["dest_pool_name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "move_bytes_migrated"))) { #optional property not found
            $MoveBytesMigrated = $null
        } else {
            $MoveBytesMigrated = $JsonParameters.PSobject.Properties["move_bytes_migrated"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "move_bytes_remaining"))) { #optional property not found
            $MoveBytesRemaining = $null
        } else {
            $MoveBytesRemaining = $JsonParameters.PSobject.Properties["move_bytes_remaining"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "move_est_compl_time"))) { #optional property not found
            $MoveEstComplTime = $null
        } else {
            $MoveEstComplTime = $JsonParameters.PSobject.Properties["move_est_compl_time"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "move_start_time"))) { #optional property not found
            $MoveStartTime = $null
        } else {
            $MoveStartTime = $JsonParameters.PSobject.Properties["move_start_time"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "root_vol_id"))) { #optional property not found
            $RootVolId = $null
        } else {
            $RootVolId = $JsonParameters.PSobject.Properties["root_vol_id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "root_vol_name"))) { #optional property not found
            $RootVolName = $null
        } else {
            $RootVolName = $JsonParameters.PSobject.Properties["root_vol_name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "source_pool_id"))) { #optional property not found
            $SourcePoolId = $null
        } else {
            $SourcePoolId = $JsonParameters.PSobject.Properties["source_pool_id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "source_pool_name"))) { #optional property not found
            $SourcePoolName = $null
        } else {
            $SourcePoolName = $JsonParameters.PSobject.Properties["source_pool_name"].value
        }

        $PSO = [PSCustomObject]@{
            "array_list" = ${ArrayList}
            "dest_pool_id" = ${DestPoolId}
            "dest_pool_name" = ${DestPoolName}
            "move_bytes_migrated" = ${MoveBytesMigrated}
            "move_bytes_remaining" = ${MoveBytesRemaining}
            "move_est_compl_time" = ${MoveEstComplTime}
            "move_start_time" = ${MoveStartTime}
            "root_vol_id" = ${RootVolId}
            "root_vol_name" = ${RootVolName}
            "source_pool_id" = ${SourcePoolId}
            "source_pool_name" = ${SourcePoolName}
        }

        return $PSO
    }

}

