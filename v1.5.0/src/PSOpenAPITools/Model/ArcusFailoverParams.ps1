#
# Data Services Cloud Console API
# Data Services Cloud Console API
# Version: 1.5.0
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER ForcePPFailover
Specifies that the Peer Persistence failover operation is forced overriding data inconsistency warnings. All I/O to the existing primary volumes should be quiesced when using this option.
.PARAMETER NoSnapshot
Specifies that snapshots are not taken of application sets that are switched from secondary to primary. Additionally, existing snapshots are deleted if application sets are switched from primary to secondary. The use of this option may result in a full synchronization of the secondary volumes.
.PARAMETER SkipPromote
Specifies that the synchronized snapshots of the protected volume set that are switched from primary to secondary should not be promoted to the base volume. The incorrect use of this option can lead to the primary and secondary volumes not being consistent.
.PARAMETER TargetName
Replication partner name on which to failover.
.OUTPUTS

ArcusFailoverParams<PSCustomObject>
#>

function Initialize-ArcusFailoverParams {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${ForcePPFailover},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${NoSnapshot},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${SkipPromote},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${TargetName}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => ArcusFailoverParams' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "forcePPFailover" = ${ForcePPFailover}
            "noSnapshot" = ${NoSnapshot}
            "skipPromote" = ${SkipPromote}
            "targetName" = ${TargetName}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to ArcusFailoverParams<PSCustomObject>

.DESCRIPTION

Convert from JSON to ArcusFailoverParams<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

ArcusFailoverParams<PSCustomObject>
#>
function ConvertFrom-JsonToArcusFailoverParams {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => ArcusFailoverParams' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in ArcusFailoverParams
        $AllProperties = ("forcePPFailover", "noSnapshot", "skipPromote", "targetName")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "forcePPFailover"))) { #optional property not found
            $ForcePPFailover = $null
        } else {
            $ForcePPFailover = $JsonParameters.PSobject.Properties["forcePPFailover"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "noSnapshot"))) { #optional property not found
            $NoSnapshot = $null
        } else {
            $NoSnapshot = $JsonParameters.PSobject.Properties["noSnapshot"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "skipPromote"))) { #optional property not found
            $SkipPromote = $null
        } else {
            $SkipPromote = $JsonParameters.PSobject.Properties["skipPromote"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "targetName"))) { #optional property not found
            $TargetName = $null
        } else {
            $TargetName = $JsonParameters.PSobject.Properties["targetName"].value
        }

        $PSO = [PSCustomObject]@{
            "forcePPFailover" = ${ForcePPFailover}
            "noSnapshot" = ${NoSnapshot}
            "skipPromote" = ${SkipPromote}
            "targetName" = ${TargetName}
        }

        return $PSO
    }

}

