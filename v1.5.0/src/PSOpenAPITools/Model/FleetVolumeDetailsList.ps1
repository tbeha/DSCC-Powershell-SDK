#
# Data Services Cloud Console API
# Data Services Cloud Console API
# Version: 1.5.0
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER AssociatedLinks
Associated Links
.PARAMETER ConsoleUri
consoleUri for detailed storage object
.PARAMETER CustomerId
customerId
.PARAMETER Generation
generation
.PARAMETER HealthState
Health State of volume. `Filter, Sort`
.PARAMETER HostWrittenCapacityMiB
Host written data size in MiB. `Filter, Sort`
.PARAMETER Id
UUID string uniquely identifying the storage system object. `Filter`
.PARAMETER Initiators
Initiator details. This field is deprecated.
.PARAMETER IsInternal
boolean value which specifies if it is a systemVolume or not `Filter`
.PARAMETER IsSystemVolume
boolean value which specifies if it is a systemVolume or not `Filter`
.PARAMETER Name
A user friendly name to identify the storage system volume (resourceName). `Filter, Sort`
.PARAMETER ProductFamily
Product Family
.PARAMETER ResourceUri
resourceUri for detailed volume object
.PARAMETER SizeMiB
Size in MiB `Filter, Sort`
.PARAMETER SpaceWarning
User alloc space warning
.PARAMETER SubType
subType of the volume
.PARAMETER SystemId
SystemUid/Serial Number  of the array. `Filter, Sort`
.PARAMETER ThinSavings
Thin savings
.PARAMETER Type
type
.PARAMETER UsedCapacityPercent
Used capacity percentage of volume. `Filter, Sort`
.PARAMETER UsedSizeMiB
Size in MiB
.PARAMETER VolumeSetId
SystemUid/serialNumber of the volumeSet.
.PARAMETER VolumeType
VV Type
.PARAMETER Wwn
Volume wwn.
.OUTPUTS

FleetVolumeDetailsList<PSCustomObject>
#>

function Initialize-FleetVolumeDetailsList {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${AssociatedLinks},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ConsoleUri},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${CustomerId},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Generation},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${HealthState},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Decimal]]
        ${HostWrittenCapacityMiB},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Id},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Initiators},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${IsInternal},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${IsSystemVolume},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ProductFamily},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ResourceUri},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Decimal]]
        ${SizeMiB},
        [Parameter(Position = 14, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Decimal]]
        ${SpaceWarning},
        [Parameter(Position = 15, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SubType},
        [Parameter(Position = 16, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SystemId},
        [Parameter(Position = 17, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ThinSavings},
        [Parameter(Position = 18, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Type},
        [Parameter(Position = 19, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Decimal]]
        ${UsedCapacityPercent},
        [Parameter(Position = 20, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Decimal]]
        ${UsedSizeMiB},
        [Parameter(Position = 21, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${VolumeSetId},
        [Parameter(Position = 22, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${VolumeType},
        [Parameter(Position = 23, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Wwn}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => FleetVolumeDetailsList' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "associatedLinks" = ${AssociatedLinks}
            "consoleUri" = ${ConsoleUri}
            "customerId" = ${CustomerId}
            "generation" = ${Generation}
            "healthState" = ${HealthState}
            "hostWrittenCapacityMiB" = ${HostWrittenCapacityMiB}
            "id" = ${Id}
            "initiators" = ${Initiators}
            "isInternal" = ${IsInternal}
            "isSystemVolume" = ${IsSystemVolume}
            "name" = ${Name}
            "productFamily" = ${ProductFamily}
            "resourceUri" = ${ResourceUri}
            "sizeMiB" = ${SizeMiB}
            "spaceWarning" = ${SpaceWarning}
            "subType" = ${SubType}
            "systemId" = ${SystemId}
            "thinSavings" = ${ThinSavings}
            "type" = ${Type}
            "usedCapacityPercent" = ${UsedCapacityPercent}
            "usedSizeMiB" = ${UsedSizeMiB}
            "volumeSetId" = ${VolumeSetId}
            "volumeType" = ${VolumeType}
            "wwn" = ${Wwn}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to FleetVolumeDetailsList<PSCustomObject>

.DESCRIPTION

Convert from JSON to FleetVolumeDetailsList<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

FleetVolumeDetailsList<PSCustomObject>
#>
function ConvertFrom-JsonToFleetVolumeDetailsList {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => FleetVolumeDetailsList' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in FleetVolumeDetailsList
        $AllProperties = ("associatedLinks", "consoleUri", "customerId", "generation", "healthState", "hostWrittenCapacityMiB", "id", "initiators", "isInternal", "isSystemVolume", "name", "productFamily", "resourceUri", "sizeMiB", "spaceWarning", "subType", "systemId", "thinSavings", "type", "usedCapacityPercent", "usedSizeMiB", "volumeSetId", "volumeType", "wwn")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "associatedLinks"))) { #optional property not found
            $AssociatedLinks = $null
        } else {
            $AssociatedLinks = $JsonParameters.PSobject.Properties["associatedLinks"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "consoleUri"))) { #optional property not found
            $ConsoleUri = $null
        } else {
            $ConsoleUri = $JsonParameters.PSobject.Properties["consoleUri"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "customerId"))) { #optional property not found
            $CustomerId = $null
        } else {
            $CustomerId = $JsonParameters.PSobject.Properties["customerId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "generation"))) { #optional property not found
            $Generation = $null
        } else {
            $Generation = $JsonParameters.PSobject.Properties["generation"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "healthState"))) { #optional property not found
            $HealthState = $null
        } else {
            $HealthState = $JsonParameters.PSobject.Properties["healthState"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "hostWrittenCapacityMiB"))) { #optional property not found
            $HostWrittenCapacityMiB = $null
        } else {
            $HostWrittenCapacityMiB = $JsonParameters.PSobject.Properties["hostWrittenCapacityMiB"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) { #optional property not found
            $Id = $null
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "initiators"))) { #optional property not found
            $Initiators = $null
        } else {
            $Initiators = $JsonParameters.PSobject.Properties["initiators"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "isInternal"))) { #optional property not found
            $IsInternal = $null
        } else {
            $IsInternal = $JsonParameters.PSobject.Properties["isInternal"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "isSystemVolume"))) { #optional property not found
            $IsSystemVolume = $null
        } else {
            $IsSystemVolume = $JsonParameters.PSobject.Properties["isSystemVolume"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) { #optional property not found
            $Name = $null
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "productFamily"))) { #optional property not found
            $ProductFamily = $null
        } else {
            $ProductFamily = $JsonParameters.PSobject.Properties["productFamily"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "resourceUri"))) { #optional property not found
            $ResourceUri = $null
        } else {
            $ResourceUri = $JsonParameters.PSobject.Properties["resourceUri"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "sizeMiB"))) { #optional property not found
            $SizeMiB = $null
        } else {
            $SizeMiB = $JsonParameters.PSobject.Properties["sizeMiB"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "spaceWarning"))) { #optional property not found
            $SpaceWarning = $null
        } else {
            $SpaceWarning = $JsonParameters.PSobject.Properties["spaceWarning"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "subType"))) { #optional property not found
            $SubType = $null
        } else {
            $SubType = $JsonParameters.PSobject.Properties["subType"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "systemId"))) { #optional property not found
            $SystemId = $null
        } else {
            $SystemId = $JsonParameters.PSobject.Properties["systemId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "thinSavings"))) { #optional property not found
            $ThinSavings = $null
        } else {
            $ThinSavings = $JsonParameters.PSobject.Properties["thinSavings"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "type"))) { #optional property not found
            $Type = $null
        } else {
            $Type = $JsonParameters.PSobject.Properties["type"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "usedCapacityPercent"))) { #optional property not found
            $UsedCapacityPercent = $null
        } else {
            $UsedCapacityPercent = $JsonParameters.PSobject.Properties["usedCapacityPercent"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "usedSizeMiB"))) { #optional property not found
            $UsedSizeMiB = $null
        } else {
            $UsedSizeMiB = $JsonParameters.PSobject.Properties["usedSizeMiB"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "volumeSetId"))) { #optional property not found
            $VolumeSetId = $null
        } else {
            $VolumeSetId = $JsonParameters.PSobject.Properties["volumeSetId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "volumeType"))) { #optional property not found
            $VolumeType = $null
        } else {
            $VolumeType = $JsonParameters.PSobject.Properties["volumeType"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "wwn"))) { #optional property not found
            $Wwn = $null
        } else {
            $Wwn = $JsonParameters.PSobject.Properties["wwn"].value
        }

        $PSO = [PSCustomObject]@{
            "associatedLinks" = ${AssociatedLinks}
            "consoleUri" = ${ConsoleUri}
            "customerId" = ${CustomerId}
            "generation" = ${Generation}
            "healthState" = ${HealthState}
            "hostWrittenCapacityMiB" = ${HostWrittenCapacityMiB}
            "id" = ${Id}
            "initiators" = ${Initiators}
            "isInternal" = ${IsInternal}
            "isSystemVolume" = ${IsSystemVolume}
            "name" = ${Name}
            "productFamily" = ${ProductFamily}
            "resourceUri" = ${ResourceUri}
            "sizeMiB" = ${SizeMiB}
            "spaceWarning" = ${SpaceWarning}
            "subType" = ${SubType}
            "systemId" = ${SystemId}
            "thinSavings" = ${ThinSavings}
            "type" = ${Type}
            "usedCapacityPercent" = ${UsedCapacityPercent}
            "usedSizeMiB" = ${UsedSizeMiB}
            "volumeSetId" = ${VolumeSetId}
            "volumeType" = ${VolumeType}
            "wwn" = ${Wwn}
        }

        return $PSO
    }

}

