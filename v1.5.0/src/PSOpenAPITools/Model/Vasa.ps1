#
# Data Services Cloud Console API
# Data Services Cloud Console API
# Version: 1.5.0
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Vasa service details for a device

.PARAMETER CertMgmt
No description available.
.PARAMETER CertSubject
Certificate subject of the VASA Provider
.PARAMETER CertThumbprint
Certificate thumbprint of the VASA Provider
.PARAMETER ConsoleUri
consoleUri for detailed storage object
.PARAMETER CustomerId
The customer application identifier
.PARAMETER Enabled
Indicates if the service status is enabled or not
.PARAMETER Generation
A monotonically increasing value. This value updates when the resource is updated and can be used as a short way to determine if a resource has changed or which of two different copies of a resource is more up to date.
.PARAMETER HttpsEnabled
Indicates if the vasa https state is enabled or not
.PARAMETER HttpsPort
Vasa https port number
.PARAMETER Id
Unique Identifier of the resource
.PARAMETER MemUsageMiB
Memory usage of the VASA provider
.PARAMETER MoreUris
List of VASA Service URLs 
.PARAMETER ServerName
Name of the vasa server
.PARAMETER SystemId
SystemId of the storage system
.PARAMETER SystemWWN
WWN of the array
.PARAMETER Type
The type of resource.
.PARAMETER Version
Version of the VASA provider
.OUTPUTS

Vasa<PSCustomObject>
#>

function Initialize-Vasa {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${CertMgmt},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${CertSubject},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${CertThumbprint},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ConsoleUri},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${CustomerId},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${Enabled},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${Generation},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${HttpsEnabled},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${HttpsPort},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Id},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${MemUsageMiB},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${MoreUris},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ServerName},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SystemId},
        [Parameter(Position = 14, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SystemWWN},
        [Parameter(Position = 15, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Type},
        [Parameter(Position = 16, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Version}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => Vasa' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "certMgmt" = ${CertMgmt}
            "certSubject" = ${CertSubject}
            "certThumbprint" = ${CertThumbprint}
            "consoleUri" = ${ConsoleUri}
            "customerId" = ${CustomerId}
            "enabled" = ${Enabled}
            "generation" = ${Generation}
            "httpsEnabled" = ${HttpsEnabled}
            "httpsPort" = ${HttpsPort}
            "id" = ${Id}
            "memUsageMiB" = ${MemUsageMiB}
            "moreUris" = ${MoreUris}
            "serverName" = ${ServerName}
            "systemId" = ${SystemId}
            "systemWWN" = ${SystemWWN}
            "type" = ${Type}
            "version" = ${Version}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to Vasa<PSCustomObject>

.DESCRIPTION

Convert from JSON to Vasa<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

Vasa<PSCustomObject>
#>
function ConvertFrom-JsonToVasa {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => Vasa' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in Vasa
        $AllProperties = ("certMgmt", "certSubject", "certThumbprint", "consoleUri", "customerId", "enabled", "generation", "httpsEnabled", "httpsPort", "id", "memUsageMiB", "moreUris", "serverName", "systemId", "systemWWN", "type", "version")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "certMgmt"))) { #optional property not found
            $CertMgmt = $null
        } else {
            $CertMgmt = $JsonParameters.PSobject.Properties["certMgmt"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "certSubject"))) { #optional property not found
            $CertSubject = $null
        } else {
            $CertSubject = $JsonParameters.PSobject.Properties["certSubject"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "certThumbprint"))) { #optional property not found
            $CertThumbprint = $null
        } else {
            $CertThumbprint = $JsonParameters.PSobject.Properties["certThumbprint"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "consoleUri"))) { #optional property not found
            $ConsoleUri = $null
        } else {
            $ConsoleUri = $JsonParameters.PSobject.Properties["consoleUri"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "customerId"))) { #optional property not found
            $CustomerId = $null
        } else {
            $CustomerId = $JsonParameters.PSobject.Properties["customerId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "enabled"))) { #optional property not found
            $Enabled = $null
        } else {
            $Enabled = $JsonParameters.PSobject.Properties["enabled"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "generation"))) { #optional property not found
            $Generation = $null
        } else {
            $Generation = $JsonParameters.PSobject.Properties["generation"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "httpsEnabled"))) { #optional property not found
            $HttpsEnabled = $null
        } else {
            $HttpsEnabled = $JsonParameters.PSobject.Properties["httpsEnabled"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "httpsPort"))) { #optional property not found
            $HttpsPort = $null
        } else {
            $HttpsPort = $JsonParameters.PSobject.Properties["httpsPort"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) { #optional property not found
            $Id = $null
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "memUsageMiB"))) { #optional property not found
            $MemUsageMiB = $null
        } else {
            $MemUsageMiB = $JsonParameters.PSobject.Properties["memUsageMiB"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "moreUris"))) { #optional property not found
            $MoreUris = $null
        } else {
            $MoreUris = $JsonParameters.PSobject.Properties["moreUris"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "serverName"))) { #optional property not found
            $ServerName = $null
        } else {
            $ServerName = $JsonParameters.PSobject.Properties["serverName"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "systemId"))) { #optional property not found
            $SystemId = $null
        } else {
            $SystemId = $JsonParameters.PSobject.Properties["systemId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "systemWWN"))) { #optional property not found
            $SystemWWN = $null
        } else {
            $SystemWWN = $JsonParameters.PSobject.Properties["systemWWN"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "type"))) { #optional property not found
            $Type = $null
        } else {
            $Type = $JsonParameters.PSobject.Properties["type"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "version"))) { #optional property not found
            $Version = $null
        } else {
            $Version = $JsonParameters.PSobject.Properties["version"].value
        }

        $PSO = [PSCustomObject]@{
            "certMgmt" = ${CertMgmt}
            "certSubject" = ${CertSubject}
            "certThumbprint" = ${CertThumbprint}
            "consoleUri" = ${ConsoleUri}
            "customerId" = ${CustomerId}
            "enabled" = ${Enabled}
            "generation" = ${Generation}
            "httpsEnabled" = ${HttpsEnabled}
            "httpsPort" = ${HttpsPort}
            "id" = ${Id}
            "memUsageMiB" = ${MemUsageMiB}
            "moreUris" = ${MoreUris}
            "serverName" = ${ServerName}
            "systemId" = ${SystemId}
            "systemWWN" = ${SystemWWN}
            "type" = ${Type}
            "version" = ${Version}
        }

        return $PSO
    }

}

