#
# Data Services Cloud Console API
# Data Services Cloud Console API
# Version: 1.5.0
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
Identifier for the snapshot collection. A 42 digit hexadecimal number. `Filter`
.PARAMETER Name
Name of snapshot. String of up to 215 alphanumeric, hyphenated, colon, or period-separated characters; but cannot begin with hyphen, colon or period. `Filter, Sort`
.PARAMETER OnlineStatus
Online status of snapshot collection. This is based on the online status of the individual snapshots. Online status based on that of the constituent entities. Possible values: 'online', 'offline' or 'partial'.
.PARAMETER ScheduleId
Identifier of protection schedule. A 42 digit hexadecimal number. `Filter, Sort`
.PARAMETER SrepOwnerId
ID of the partner where snapshots for this snapshot collection reside which were created by synchronous replication. Field will be null if no peer snapshot_collection was created by synchronous replication. A 42 digit hexadecimal number. `Filter, Sort`
.PARAMETER VolcollId
Parent volume collection ID. A 42 digit hexadecimal number. `Filter, Sort`
.OUTPUTS

NimbleSnapshotCollectionFilterableFieldsWithoutFilter<PSCustomObject>
#>

function Initialize-NimbleSnapshotCollectionFilterableFieldsWithoutFilter {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${OnlineStatus},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ScheduleId},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SrepOwnerId},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${VolcollId}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => NimbleSnapshotCollectionFilterableFieldsWithoutFilter' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "name" = ${Name}
            "online_status" = ${OnlineStatus}
            "schedule_id" = ${ScheduleId}
            "srep_owner_id" = ${SrepOwnerId}
            "volcoll_id" = ${VolcollId}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to NimbleSnapshotCollectionFilterableFieldsWithoutFilter<PSCustomObject>

.DESCRIPTION

Convert from JSON to NimbleSnapshotCollectionFilterableFieldsWithoutFilter<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

NimbleSnapshotCollectionFilterableFieldsWithoutFilter<PSCustomObject>
#>
function ConvertFrom-JsonToNimbleSnapshotCollectionFilterableFieldsWithoutFilter {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => NimbleSnapshotCollectionFilterableFieldsWithoutFilter' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in NimbleSnapshotCollectionFilterableFieldsWithoutFilter
        $AllProperties = ("id", "name", "online_status", "schedule_id", "srep_owner_id", "volcoll_id")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) { #optional property not found
            $Id = $null
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) { #optional property not found
            $Name = $null
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "online_status"))) { #optional property not found
            $OnlineStatus = $null
        } else {
            $OnlineStatus = $JsonParameters.PSobject.Properties["online_status"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "schedule_id"))) { #optional property not found
            $ScheduleId = $null
        } else {
            $ScheduleId = $JsonParameters.PSobject.Properties["schedule_id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "srep_owner_id"))) { #optional property not found
            $SrepOwnerId = $null
        } else {
            $SrepOwnerId = $JsonParameters.PSobject.Properties["srep_owner_id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "volcoll_id"))) { #optional property not found
            $VolcollId = $null
        } else {
            $VolcollId = $JsonParameters.PSobject.Properties["volcoll_id"].value
        }

        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "name" = ${Name}
            "online_status" = ${OnlineStatus}
            "schedule_id" = ${ScheduleId}
            "srep_owner_id" = ${SrepOwnerId}
            "volcoll_id" = ${VolcollId}
        }

        return $PSO
    }

}

