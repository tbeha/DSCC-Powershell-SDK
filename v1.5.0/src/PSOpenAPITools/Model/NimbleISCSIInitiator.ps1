#
# Data Services Cloud Console API
# Data Services Cloud Console API
# Version: 1.5.0
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
Unique identifier of the iSCSI initiator.
.PARAMETER IpAddress
IP address of the iSCSI initiator.
.PARAMETER Iqn
IQN name of the iSCSI initiator.
.PARAMETER Label
Unique label of the iSCSI initiator.
.OUTPUTS

NimbleISCSIInitiator<PSCustomObject>
#>

function Initialize-NimbleISCSIInitiator {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${IpAddress},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Iqn},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Label}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => NimbleISCSIInitiator' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "ip_address" = ${IpAddress}
            "iqn" = ${Iqn}
            "label" = ${Label}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to NimbleISCSIInitiator<PSCustomObject>

.DESCRIPTION

Convert from JSON to NimbleISCSIInitiator<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

NimbleISCSIInitiator<PSCustomObject>
#>
function ConvertFrom-JsonToNimbleISCSIInitiator {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => NimbleISCSIInitiator' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in NimbleISCSIInitiator
        $AllProperties = ("id", "ip_address", "iqn", "label")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) { #optional property not found
            $Id = $null
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ip_address"))) { #optional property not found
            $IpAddress = $null
        } else {
            $IpAddress = $JsonParameters.PSobject.Properties["ip_address"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "iqn"))) { #optional property not found
            $Iqn = $null
        } else {
            $Iqn = $JsonParameters.PSobject.Properties["iqn"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "label"))) { #optional property not found
            $Label = $null
        } else {
            $Label = $JsonParameters.PSobject.Properties["label"].value
        }

        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "ip_address" = ${IpAddress}
            "iqn" = ${Iqn}
            "label" = ${Label}
        }

        return $PSO
    }

}

