#
# Data Services Cloud Console API
# Data Services Cloud Console API
# Version: 1.5.0
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER ConversionType
conversion type (this argument is depricated, use dataReduction instead)
.PARAMETER DataReduction
Data Reduction on Volume.
.PARAMETER Name
volume name
.PARAMETER SizeMib
Size of the volume to be edited.
.PARAMETER SnapshotAllocWarning
snapshot alloc space allocation warning
.PARAMETER UserAllocWarning
User alloc space limit warning
.PARAMETER UserCpgName
user cpg name
.OUTPUTS

ArcusvolumePut<PSCustomObject>
#>

function Initialize-ArcusvolumePut {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("CONVERSIONTYPE_THIN", "CONVERSIONTYPE_DDS", "CONVERSIONTYPE_V1", "CONVERSIONTYPE_V2")]
        [String]
        ${ConversionType},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${DataReduction},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Decimal]]
        ${SizeMib},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${SnapshotAllocWarning},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${UserAllocWarning},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${UserCpgName}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => ArcusvolumePut' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "conversionType" = ${ConversionType}
            "dataReduction" = ${DataReduction}
            "name" = ${Name}
            "sizeMib" = ${SizeMib}
            "snapshotAllocWarning" = ${SnapshotAllocWarning}
            "userAllocWarning" = ${UserAllocWarning}
            "userCpgName" = ${UserCpgName}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to ArcusvolumePut<PSCustomObject>

.DESCRIPTION

Convert from JSON to ArcusvolumePut<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

ArcusvolumePut<PSCustomObject>
#>
function ConvertFrom-JsonToArcusvolumePut {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => ArcusvolumePut' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in ArcusvolumePut
        $AllProperties = ("conversionType", "dataReduction", "name", "sizeMib", "snapshotAllocWarning", "userAllocWarning", "userCpgName")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "conversionType"))) { #optional property not found
            $ConversionType = $null
        } else {
            $ConversionType = $JsonParameters.PSobject.Properties["conversionType"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "dataReduction"))) { #optional property not found
            $DataReduction = $null
        } else {
            $DataReduction = $JsonParameters.PSobject.Properties["dataReduction"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) { #optional property not found
            $Name = $null
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "sizeMib"))) { #optional property not found
            $SizeMib = $null
        } else {
            $SizeMib = $JsonParameters.PSobject.Properties["sizeMib"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "snapshotAllocWarning"))) { #optional property not found
            $SnapshotAllocWarning = $null
        } else {
            $SnapshotAllocWarning = $JsonParameters.PSobject.Properties["snapshotAllocWarning"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "userAllocWarning"))) { #optional property not found
            $UserAllocWarning = $null
        } else {
            $UserAllocWarning = $JsonParameters.PSobject.Properties["userAllocWarning"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "userCpgName"))) { #optional property not found
            $UserCpgName = $null
        } else {
            $UserCpgName = $JsonParameters.PSobject.Properties["userCpgName"].value
        }

        $PSO = [PSCustomObject]@{
            "conversionType" = ${ConversionType}
            "dataReduction" = ${DataReduction}
            "name" = ${Name}
            "sizeMib" = ${SizeMib}
            "snapshotAllocWarning" = ${SnapshotAllocWarning}
            "userAllocWarning" = ${UserAllocWarning}
            "userCpgName" = ${UserCpgName}
        }

        return $PSO
    }

}

