#
# Data Services Cloud Console API
# Data Services Cloud Console API
# Version: 1.5.0
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER PoolId
ID of the pool to which the volume belongs to.
.PARAMETER PoolName
Name of the pool to which volume belongs to.
.PARAMETER VolId
ID of the volume.
.PARAMETER VolName
Name of the volume.
.PARAMETER VolumeCreatorId
Originator id for the associated volume.
.PARAMETER VolumeCreatorName
Originator name for the associated volume.
.OUTPUTS

NimbleVolumeCollectionVolumePoolInfo<PSCustomObject>
#>

function Initialize-NimbleVolumeCollectionVolumePoolInfo {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${PoolId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${PoolName},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${VolId},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${VolName},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${VolumeCreatorId},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${VolumeCreatorName}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => NimbleVolumeCollectionVolumePoolInfo' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "pool_id" = ${PoolId}
            "pool_name" = ${PoolName}
            "vol_id" = ${VolId}
            "vol_name" = ${VolName}
            "volume_creator_id" = ${VolumeCreatorId}
            "volume_creator_name" = ${VolumeCreatorName}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to NimbleVolumeCollectionVolumePoolInfo<PSCustomObject>

.DESCRIPTION

Convert from JSON to NimbleVolumeCollectionVolumePoolInfo<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

NimbleVolumeCollectionVolumePoolInfo<PSCustomObject>
#>
function ConvertFrom-JsonToNimbleVolumeCollectionVolumePoolInfo {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => NimbleVolumeCollectionVolumePoolInfo' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in NimbleVolumeCollectionVolumePoolInfo
        $AllProperties = ("pool_id", "pool_name", "vol_id", "vol_name", "volume_creator_id", "volume_creator_name")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "pool_id"))) { #optional property not found
            $PoolId = $null
        } else {
            $PoolId = $JsonParameters.PSobject.Properties["pool_id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "pool_name"))) { #optional property not found
            $PoolName = $null
        } else {
            $PoolName = $JsonParameters.PSobject.Properties["pool_name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "vol_id"))) { #optional property not found
            $VolId = $null
        } else {
            $VolId = $JsonParameters.PSobject.Properties["vol_id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "vol_name"))) { #optional property not found
            $VolName = $null
        } else {
            $VolName = $JsonParameters.PSobject.Properties["vol_name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "volume_creator_id"))) { #optional property not found
            $VolumeCreatorId = $null
        } else {
            $VolumeCreatorId = $JsonParameters.PSobject.Properties["volume_creator_id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "volume_creator_name"))) { #optional property not found
            $VolumeCreatorName = $null
        } else {
            $VolumeCreatorName = $JsonParameters.PSobject.Properties["volume_creator_name"].value
        }

        $PSO = [PSCustomObject]@{
            "pool_id" = ${PoolId}
            "pool_name" = ${PoolName}
            "vol_id" = ${VolId}
            "vol_name" = ${VolName}
            "volume_creator_id" = ${VolumeCreatorId}
            "volume_creator_name" = ${VolumeCreatorName}
        }

        return $PSO
    }

}

