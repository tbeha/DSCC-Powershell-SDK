#
# Data Services Cloud Console API
# Data Services Cloud Console API
# Version: 1.5.0
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER AsyncPartner
Shows asynchronous replication partner associated with SLD configuration. This is applicable only if the parent partner is of sync type.
.PARAMETER Id
Id of replication partner
.PARAMETER IsActiveSyncSupported
States if Active-Sync is supported or not
.PARAMETER IsPeerPersistanceSupported
States if Peer Persistance is supported or not
.PARAMETER MinAsyncRPO
Minimum async RPO value in seconds for asynchronous data replication.
.PARAMETER Name
Name of replication partner
.PARAMETER ResourceUri
Resource URI for replication partner
.PARAMETER SyncPartner
Shows synchronous replication partner associated with SLD configuration. This is applicable only if the parent partner is of async type.
.OUTPUTS

ArcusReplicationPartner<PSCustomObject>
#>

function Initialize-ArcusReplicationPartner {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${AsyncPartner},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Id},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${IsActiveSyncSupported},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${IsPeerPersistanceSupported},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${MinAsyncRPO},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ResourceUri},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SyncPartner}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => ArcusReplicationPartner' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "asyncPartner" = ${AsyncPartner}
            "id" = ${Id}
            "isActiveSyncSupported" = ${IsActiveSyncSupported}
            "isPeerPersistanceSupported" = ${IsPeerPersistanceSupported}
            "minAsyncRPO" = ${MinAsyncRPO}
            "name" = ${Name}
            "resourceUri" = ${ResourceUri}
            "syncPartner" = ${SyncPartner}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to ArcusReplicationPartner<PSCustomObject>

.DESCRIPTION

Convert from JSON to ArcusReplicationPartner<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

ArcusReplicationPartner<PSCustomObject>
#>
function ConvertFrom-JsonToArcusReplicationPartner {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => ArcusReplicationPartner' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in ArcusReplicationPartner
        $AllProperties = ("asyncPartner", "id", "isActiveSyncSupported", "isPeerPersistanceSupported", "minAsyncRPO", "name", "resourceUri", "syncPartner")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "asyncPartner"))) { #optional property not found
            $AsyncPartner = $null
        } else {
            $AsyncPartner = $JsonParameters.PSobject.Properties["asyncPartner"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) { #optional property not found
            $Id = $null
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "isActiveSyncSupported"))) { #optional property not found
            $IsActiveSyncSupported = $null
        } else {
            $IsActiveSyncSupported = $JsonParameters.PSobject.Properties["isActiveSyncSupported"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "isPeerPersistanceSupported"))) { #optional property not found
            $IsPeerPersistanceSupported = $null
        } else {
            $IsPeerPersistanceSupported = $JsonParameters.PSobject.Properties["isPeerPersistanceSupported"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "minAsyncRPO"))) { #optional property not found
            $MinAsyncRPO = $null
        } else {
            $MinAsyncRPO = $JsonParameters.PSobject.Properties["minAsyncRPO"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) { #optional property not found
            $Name = $null
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "resourceUri"))) { #optional property not found
            $ResourceUri = $null
        } else {
            $ResourceUri = $JsonParameters.PSobject.Properties["resourceUri"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "syncPartner"))) { #optional property not found
            $SyncPartner = $null
        } else {
            $SyncPartner = $JsonParameters.PSobject.Properties["syncPartner"].value
        }

        $PSO = [PSCustomObject]@{
            "asyncPartner" = ${AsyncPartner}
            "id" = ${Id}
            "isActiveSyncSupported" = ${IsActiveSyncSupported}
            "isPeerPersistanceSupported" = ${IsPeerPersistanceSupported}
            "minAsyncRPO" = ${MinAsyncRPO}
            "name" = ${Name}
            "resourceUri" = ${ResourceUri}
            "syncPartner" = ${SyncPartner}
        }

        return $PSO
    }

}

