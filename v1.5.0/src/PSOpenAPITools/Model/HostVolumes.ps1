#
# Data Services Cloud Console API
# Data Services Cloud Console API
# Version: 1.5.0
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER CustomerId
customerId
.PARAMETER Iops
IOPS
.PARAMETER LatencyMs
Latency in ms
.PARAMETER LunId
lunid
.PARAMETER PathCount
The number of connections from that volume
.PARAMETER ResourceUri
resourceUri of the volume
.PARAMETER SystemId
SystemUid of the system associated with the volume
.PARAMETER ThroughputKbps
The throughput in kbps
.PARAMETER VolumeName
The name of the volume
.OUTPUTS

HostVolumes<PSCustomObject>
#>

function Initialize-HostVolumes {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${CustomerId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Decimal]]
        ${Iops},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Decimal]]
        ${LatencyMs},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${LunId},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${PathCount},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ResourceUri},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SystemId},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Decimal]]
        ${ThroughputKbps},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${VolumeName}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => HostVolumes' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "customerId" = ${CustomerId}
            "iops" = ${Iops}
            "latencyMs" = ${LatencyMs}
            "lunId" = ${LunId}
            "pathCount" = ${PathCount}
            "resourceUri" = ${ResourceUri}
            "systemId" = ${SystemId}
            "throughputKbps" = ${ThroughputKbps}
            "volumeName" = ${VolumeName}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to HostVolumes<PSCustomObject>

.DESCRIPTION

Convert from JSON to HostVolumes<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

HostVolumes<PSCustomObject>
#>
function ConvertFrom-JsonToHostVolumes {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => HostVolumes' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in HostVolumes
        $AllProperties = ("customerId", "iops", "latencyMs", "lunId", "pathCount", "resourceUri", "systemId", "throughputKbps", "volumeName")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "customerId"))) { #optional property not found
            $CustomerId = $null
        } else {
            $CustomerId = $JsonParameters.PSobject.Properties["customerId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "iops"))) { #optional property not found
            $Iops = $null
        } else {
            $Iops = $JsonParameters.PSobject.Properties["iops"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "latencyMs"))) { #optional property not found
            $LatencyMs = $null
        } else {
            $LatencyMs = $JsonParameters.PSobject.Properties["latencyMs"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "lunId"))) { #optional property not found
            $LunId = $null
        } else {
            $LunId = $JsonParameters.PSobject.Properties["lunId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "pathCount"))) { #optional property not found
            $PathCount = $null
        } else {
            $PathCount = $JsonParameters.PSobject.Properties["pathCount"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "resourceUri"))) { #optional property not found
            $ResourceUri = $null
        } else {
            $ResourceUri = $JsonParameters.PSobject.Properties["resourceUri"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "systemId"))) { #optional property not found
            $SystemId = $null
        } else {
            $SystemId = $JsonParameters.PSobject.Properties["systemId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "throughputKbps"))) { #optional property not found
            $ThroughputKbps = $null
        } else {
            $ThroughputKbps = $JsonParameters.PSobject.Properties["throughputKbps"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "volumeName"))) { #optional property not found
            $VolumeName = $null
        } else {
            $VolumeName = $JsonParameters.PSobject.Properties["volumeName"].value
        }

        $PSO = [PSCustomObject]@{
            "customerId" = ${CustomerId}
            "iops" = ${Iops}
            "latencyMs" = ${LatencyMs}
            "lunId" = ${LunId}
            "pathCount" = ${PathCount}
            "resourceUri" = ${ResourceUri}
            "systemId" = ${SystemId}
            "throughputKbps" = ${ThroughputKbps}
            "volumeName" = ${VolumeName}
        }

        return $PSO
    }

}

