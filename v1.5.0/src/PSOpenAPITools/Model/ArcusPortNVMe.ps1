#
# Data Services Cloud Console API
# Data Services Cloud Console API
# Version: 1.5.0
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER DelimitedMacAddress
MAC address of the NVMe port
.PARAMETER Eth
Ethernet name used by the NVMe port
.PARAMETER GatewayAddress
Gateway of the NVMe port
.PARAMETER IpAddress
IP address of the NVMe port
.PARAMETER MacAddress
MAC address of the NVMe port
.PARAMETER Mode
Current mode the port is in
.PARAMETER Mtu
Maximum transmission unit (MTU) size
.PARAMETER Nqn
NVMe qualified name of the NVMe port
.PARAMETER Pcidev
PCI device used by the NVMe port
.PARAMETER PrefixLength
Prefix Length of the NVMe port
.PARAMETER Protocol
Current protocol the port is in
.PARAMETER Rate
Configured speed of the NVMe port
.PARAMETER State
State of the resource
.PARAMETER VlanCount
Number of configured VLANs on this NVMe port
.PARAMETER Vlans
No description available.
.OUTPUTS

ArcusPortNVMe<PSCustomObject>
#>

function Initialize-ArcusPortNVMe {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${DelimitedMacAddress},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Eth},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${GatewayAddress},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${IpAddress},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${MacAddress},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Mode},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Mtu},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Nqn},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Pcidev},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${PrefixLength},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Protocol},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Rate},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${State},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${VlanCount},
        [Parameter(Position = 14, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Vlans}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => ArcusPortNVMe' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "delimitedMacAddress" = ${DelimitedMacAddress}
            "eth" = ${Eth}
            "gatewayAddress" = ${GatewayAddress}
            "ipAddress" = ${IpAddress}
            "macAddress" = ${MacAddress}
            "mode" = ${Mode}
            "mtu" = ${Mtu}
            "nqn" = ${Nqn}
            "pcidev" = ${Pcidev}
            "prefixLength" = ${PrefixLength}
            "protocol" = ${Protocol}
            "rate" = ${Rate}
            "state" = ${State}
            "vlanCount" = ${VlanCount}
            "vlans" = ${Vlans}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to ArcusPortNVMe<PSCustomObject>

.DESCRIPTION

Convert from JSON to ArcusPortNVMe<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

ArcusPortNVMe<PSCustomObject>
#>
function ConvertFrom-JsonToArcusPortNVMe {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => ArcusPortNVMe' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in ArcusPortNVMe
        $AllProperties = ("delimitedMacAddress", "eth", "gatewayAddress", "ipAddress", "macAddress", "mode", "mtu", "nqn", "pcidev", "prefixLength", "protocol", "rate", "state", "vlanCount", "vlans")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "delimitedMacAddress"))) { #optional property not found
            $DelimitedMacAddress = $null
        } else {
            $DelimitedMacAddress = $JsonParameters.PSobject.Properties["delimitedMacAddress"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "eth"))) { #optional property not found
            $Eth = $null
        } else {
            $Eth = $JsonParameters.PSobject.Properties["eth"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "gatewayAddress"))) { #optional property not found
            $GatewayAddress = $null
        } else {
            $GatewayAddress = $JsonParameters.PSobject.Properties["gatewayAddress"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ipAddress"))) { #optional property not found
            $IpAddress = $null
        } else {
            $IpAddress = $JsonParameters.PSobject.Properties["ipAddress"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "macAddress"))) { #optional property not found
            $MacAddress = $null
        } else {
            $MacAddress = $JsonParameters.PSobject.Properties["macAddress"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "mode"))) { #optional property not found
            $Mode = $null
        } else {
            $Mode = $JsonParameters.PSobject.Properties["mode"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "mtu"))) { #optional property not found
            $Mtu = $null
        } else {
            $Mtu = $JsonParameters.PSobject.Properties["mtu"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "nqn"))) { #optional property not found
            $Nqn = $null
        } else {
            $Nqn = $JsonParameters.PSobject.Properties["nqn"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "pcidev"))) { #optional property not found
            $Pcidev = $null
        } else {
            $Pcidev = $JsonParameters.PSobject.Properties["pcidev"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "prefixLength"))) { #optional property not found
            $PrefixLength = $null
        } else {
            $PrefixLength = $JsonParameters.PSobject.Properties["prefixLength"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "protocol"))) { #optional property not found
            $Protocol = $null
        } else {
            $Protocol = $JsonParameters.PSobject.Properties["protocol"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "rate"))) { #optional property not found
            $Rate = $null
        } else {
            $Rate = $JsonParameters.PSobject.Properties["rate"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "state"))) { #optional property not found
            $State = $null
        } else {
            $State = $JsonParameters.PSobject.Properties["state"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "vlanCount"))) { #optional property not found
            $VlanCount = $null
        } else {
            $VlanCount = $JsonParameters.PSobject.Properties["vlanCount"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "vlans"))) { #optional property not found
            $Vlans = $null
        } else {
            $Vlans = $JsonParameters.PSobject.Properties["vlans"].value
        }

        $PSO = [PSCustomObject]@{
            "delimitedMacAddress" = ${DelimitedMacAddress}
            "eth" = ${Eth}
            "gatewayAddress" = ${GatewayAddress}
            "ipAddress" = ${IpAddress}
            "macAddress" = ${MacAddress}
            "mode" = ${Mode}
            "mtu" = ${Mtu}
            "nqn" = ${Nqn}
            "pcidev" = ${Pcidev}
            "prefixLength" = ${PrefixLength}
            "protocol" = ${Protocol}
            "rate" = ${Rate}
            "state" = ${State}
            "vlanCount" = ${VlanCount}
            "vlans" = ${Vlans}
        }

        return $PSO
    }

}

