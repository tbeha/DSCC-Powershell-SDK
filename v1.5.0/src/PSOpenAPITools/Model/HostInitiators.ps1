#
# Data Services Cloud Console API
# Data Services Cloud Console API
# Version: 1.5.0
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Address
Address of the initiator. `Filter`
.PARAMETER DriverVersion
Driver version of the host initiator.
.PARAMETER FirmwareVersion
Firmware version of the host initiator.
.PARAMETER HbaModel
Host bus adaptor model of the host initiator
.PARAMETER HostSpeed
Host speed
.PARAMETER Id
Identifier for an initiator. `Filter`
.PARAMETER IpAddress
IP address of the initiator.
.PARAMETER Name
Name of the initiator. `Filter, Sort`
.PARAMETER Vendor
Vendor of the host initiator
.OUTPUTS

HostInitiators<PSCustomObject>
#>

function Initialize-HostInitiators {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Address},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${DriverVersion},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${FirmwareVersion},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${HbaModel},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${HostSpeed},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Id},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${IpAddress},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Vendor}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => HostInitiators' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "address" = ${Address}
            "driverVersion" = ${DriverVersion}
            "firmwareVersion" = ${FirmwareVersion}
            "hbaModel" = ${HbaModel}
            "hostSpeed" = ${HostSpeed}
            "id" = ${Id}
            "ipAddress" = ${IpAddress}
            "name" = ${Name}
            "vendor" = ${Vendor}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to HostInitiators<PSCustomObject>

.DESCRIPTION

Convert from JSON to HostInitiators<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

HostInitiators<PSCustomObject>
#>
function ConvertFrom-JsonToHostInitiators {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => HostInitiators' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in HostInitiators
        $AllProperties = ("address", "driverVersion", "firmwareVersion", "hbaModel", "hostSpeed", "id", "ipAddress", "name", "vendor")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "address"))) { #optional property not found
            $Address = $null
        } else {
            $Address = $JsonParameters.PSobject.Properties["address"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "driverVersion"))) { #optional property not found
            $DriverVersion = $null
        } else {
            $DriverVersion = $JsonParameters.PSobject.Properties["driverVersion"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "firmwareVersion"))) { #optional property not found
            $FirmwareVersion = $null
        } else {
            $FirmwareVersion = $JsonParameters.PSobject.Properties["firmwareVersion"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "hbaModel"))) { #optional property not found
            $HbaModel = $null
        } else {
            $HbaModel = $JsonParameters.PSobject.Properties["hbaModel"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "hostSpeed"))) { #optional property not found
            $HostSpeed = $null
        } else {
            $HostSpeed = $JsonParameters.PSobject.Properties["hostSpeed"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) { #optional property not found
            $Id = $null
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ipAddress"))) { #optional property not found
            $IpAddress = $null
        } else {
            $IpAddress = $JsonParameters.PSobject.Properties["ipAddress"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) { #optional property not found
            $Name = $null
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "vendor"))) { #optional property not found
            $Vendor = $null
        } else {
            $Vendor = $JsonParameters.PSobject.Properties["vendor"].value
        }

        $PSO = [PSCustomObject]@{
            "address" = ${Address}
            "driverVersion" = ${DriverVersion}
            "firmwareVersion" = ${FirmwareVersion}
            "hbaModel" = ${HbaModel}
            "hostSpeed" = ${HostSpeed}
            "id" = ${Id}
            "ipAddress" = ${IpAddress}
            "name" = ${Name}
            "vendor" = ${Vendor}
        }

        return $PSO
    }

}

