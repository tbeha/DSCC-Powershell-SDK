#
# Data Services Cloud Console API
# Data Services Cloud Console API
# Version: 1.5.0
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Create Nimble / Alletra 6K Folder input.

.PARAMETER AccessProtocol
Access protocol of the folder. This attribute is used by the VASA Provider to determine the access protocol of the bind request. If not specified in the creation request, it will be the access protocol supported by the group. If the group supports multiple protocols, the default will be Fibre Channel. This field is meaningful only to VVol folder. Possible values: 'iscsi', 'fc'.
.PARAMETER AgentType
External management agent type. Possible values: 'none', 'smis', 'vvol', 'openstack'.
.PARAMETER AppserverId
Identifier of the application server associated with the folder.
.PARAMETER Description
Text description of folder.
.PARAMETER HostInitiatorGroupIDs
List of Host Initiator group IDs
.PARAMETER HostInitiatorsIDs
List of Host Initiator IDs
.PARAMETER InheritedVolPerfpolId
Identifier of the default performance policy for a newly created volume.
.PARAMETER LimitIops
IOPS limit for this folder. If limit_iops is not specified when a folder is created, or if limit_iops is set to -1, then the folder has no IOPS limit. IOPS limit should be in range [256, 4294967294] or -1 for unlimited.
.PARAMETER LimitMbps
Throughput limit for this folder in MB/s. If limit_mbps is not specified when a folder is created, or if limit_mbps is set to -1, then the folder has no throughput limit. MBPS limit should be in range [1, 4294967294] or -1 for unlimited.
.PARAMETER LimitSizeBytes
Folder size limit in bytes. If limit_size_bytes is not specified when a folder is created, or if limit_size_bytes is set to -1, then the folder has no limit. Otherwise, a limit smaller than the capacity of the pool can be set. Folders with an agent_type of 'smis' or 'vvol' must have a size limit.
.PARAMETER Name
Name of the folder.
.PARAMETER OverdraftLimitPct
Amount of space to consider as overdraft range for this folder as a percentage of folder used limit. Valid values are from 0% - 200%. This is the limit above the folder usage limit beyond which enforcement action(volume offline/non-writable) is issued.
.PARAMETER PoolId
ID of the pool where the folder resides.
.PARAMETER ProvisionedLimitSizeBytes
Limit on the provisioned size of volumes in a folder. If provisioned_limit_size_bytes is not specified when a folder is created, or if provisioned_limit_size_bytes is set to -1, then the folder has no provisioned size limit.
.OUTPUTS

NimbleCreateFolderInput<PSCustomObject>
#>

function Initialize-NimbleCreateFolderInput {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${AccessProtocol},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${AgentType},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${AppserverId},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Description},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${HostInitiatorGroupIDs},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${HostInitiatorsIDs},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${InheritedVolPerfpolId},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${LimitIops},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${LimitMbps},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${LimitSizeBytes},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${OverdraftLimitPct},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${PoolId},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${ProvisionedLimitSizeBytes}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => NimbleCreateFolderInput' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $Name) {
            throw "invalid value for 'Name', 'Name' cannot be null."
        }

        if ($null -eq $PoolId) {
            throw "invalid value for 'PoolId', 'PoolId' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "access_protocol" = ${AccessProtocol}
            "agent_type" = ${AgentType}
            "appserver_id" = ${AppserverId}
            "description" = ${Description}
            "hostInitiatorGroupIDs" = ${HostInitiatorGroupIDs}
            "hostInitiatorsIDs" = ${HostInitiatorsIDs}
            "inherited_vol_perfpol_id" = ${InheritedVolPerfpolId}
            "limit_iops" = ${LimitIops}
            "limit_mbps" = ${LimitMbps}
            "limit_size_bytes" = ${LimitSizeBytes}
            "name" = ${Name}
            "overdraft_limit_pct" = ${OverdraftLimitPct}
            "pool_id" = ${PoolId}
            "provisioned_limit_size_bytes" = ${ProvisionedLimitSizeBytes}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to NimbleCreateFolderInput<PSCustomObject>

.DESCRIPTION

Convert from JSON to NimbleCreateFolderInput<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

NimbleCreateFolderInput<PSCustomObject>
#>
function ConvertFrom-JsonToNimbleCreateFolderInput {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => NimbleCreateFolderInput' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in NimbleCreateFolderInput
        $AllProperties = ("access_protocol", "agent_type", "appserver_id", "description", "hostInitiatorGroupIDs", "hostInitiatorsIDs", "inherited_vol_perfpol_id", "limit_iops", "limit_mbps", "limit_size_bytes", "name", "overdraft_limit_pct", "pool_id", "provisioned_limit_size_bytes")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'name' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) {
            throw "Error! JSON cannot be serialized due to the required property 'name' missing."
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "pool_id"))) {
            throw "Error! JSON cannot be serialized due to the required property 'pool_id' missing."
        } else {
            $PoolId = $JsonParameters.PSobject.Properties["pool_id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "access_protocol"))) { #optional property not found
            $AccessProtocol = $null
        } else {
            $AccessProtocol = $JsonParameters.PSobject.Properties["access_protocol"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "agent_type"))) { #optional property not found
            $AgentType = $null
        } else {
            $AgentType = $JsonParameters.PSobject.Properties["agent_type"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "appserver_id"))) { #optional property not found
            $AppserverId = $null
        } else {
            $AppserverId = $JsonParameters.PSobject.Properties["appserver_id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "description"))) { #optional property not found
            $Description = $null
        } else {
            $Description = $JsonParameters.PSobject.Properties["description"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "hostInitiatorGroupIDs"))) { #optional property not found
            $HostInitiatorGroupIDs = $null
        } else {
            $HostInitiatorGroupIDs = $JsonParameters.PSobject.Properties["hostInitiatorGroupIDs"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "hostInitiatorsIDs"))) { #optional property not found
            $HostInitiatorsIDs = $null
        } else {
            $HostInitiatorsIDs = $JsonParameters.PSobject.Properties["hostInitiatorsIDs"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "inherited_vol_perfpol_id"))) { #optional property not found
            $InheritedVolPerfpolId = $null
        } else {
            $InheritedVolPerfpolId = $JsonParameters.PSobject.Properties["inherited_vol_perfpol_id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "limit_iops"))) { #optional property not found
            $LimitIops = $null
        } else {
            $LimitIops = $JsonParameters.PSobject.Properties["limit_iops"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "limit_mbps"))) { #optional property not found
            $LimitMbps = $null
        } else {
            $LimitMbps = $JsonParameters.PSobject.Properties["limit_mbps"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "limit_size_bytes"))) { #optional property not found
            $LimitSizeBytes = $null
        } else {
            $LimitSizeBytes = $JsonParameters.PSobject.Properties["limit_size_bytes"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "overdraft_limit_pct"))) { #optional property not found
            $OverdraftLimitPct = $null
        } else {
            $OverdraftLimitPct = $JsonParameters.PSobject.Properties["overdraft_limit_pct"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "provisioned_limit_size_bytes"))) { #optional property not found
            $ProvisionedLimitSizeBytes = $null
        } else {
            $ProvisionedLimitSizeBytes = $JsonParameters.PSobject.Properties["provisioned_limit_size_bytes"].value
        }

        $PSO = [PSCustomObject]@{
            "access_protocol" = ${AccessProtocol}
            "agent_type" = ${AgentType}
            "appserver_id" = ${AppserverId}
            "description" = ${Description}
            "hostInitiatorGroupIDs" = ${HostInitiatorGroupIDs}
            "hostInitiatorsIDs" = ${HostInitiatorsIDs}
            "inherited_vol_perfpol_id" = ${InheritedVolPerfpolId}
            "limit_iops" = ${LimitIops}
            "limit_mbps" = ${LimitMbps}
            "limit_size_bytes" = ${LimitSizeBytes}
            "name" = ${Name}
            "overdraft_limit_pct" = ${OverdraftLimitPct}
            "pool_id" = ${PoolId}
            "provisioned_limit_size_bytes" = ${ProvisionedLimitSizeBytes}
        }

        return $PSO
    }

}

