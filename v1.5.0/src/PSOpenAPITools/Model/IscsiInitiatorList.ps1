#
# Data Services Cloud Console API
# Data Services Cloud Console API
# Version: 1.5.0
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
Identifier for the ISCSI Initiator. A 42 digit hexadecimal number.
.PARAMETER IpAddress
IP address of the iSCSI initiator. Each initiator IP address must have an associated name specified using 'name' attribute.You can choose not to enter the name for an initiator if you prefer not to authenticate using both name and IP address, in this case the IQN name will be returned as '*'. Alphanumeric, hyphenated, colon or period separated string of up to 255 characters or '*'
.PARAMETER Iqn
IQN name of the iSCSI initiator. Each initiator IQN name must have an associated IP address specified using the 'ip_address' attribute.You can choose not to enter the IP address for an initiator if you prefer not to authenticate using both name and IP address,in this case the IP address will be returned as '*'.
.PARAMETER Label
Unique Identifier of the iSCSI initiator. Label is required when creating iSCSI initiator. String of up to 64 alphanumeric characters, - and . and : are allowed after first character. `Filter, Sort`
.OUTPUTS

IscsiInitiatorList<PSCustomObject>
#>

function Initialize-IscsiInitiatorList {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${IpAddress},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Iqn},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Label}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => IscsiInitiatorList' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "ip_address" = ${IpAddress}
            "iqn" = ${Iqn}
            "label" = ${Label}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to IscsiInitiatorList<PSCustomObject>

.DESCRIPTION

Convert from JSON to IscsiInitiatorList<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

IscsiInitiatorList<PSCustomObject>
#>
function ConvertFrom-JsonToIscsiInitiatorList {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => IscsiInitiatorList' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in IscsiInitiatorList
        $AllProperties = ("id", "ip_address", "iqn", "label")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) { #optional property not found
            $Id = $null
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ip_address"))) { #optional property not found
            $IpAddress = $null
        } else {
            $IpAddress = $JsonParameters.PSobject.Properties["ip_address"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "iqn"))) { #optional property not found
            $Iqn = $null
        } else {
            $Iqn = $JsonParameters.PSobject.Properties["iqn"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "label"))) { #optional property not found
            $Label = $null
        } else {
            $Label = $JsonParameters.PSobject.Properties["label"].value
        }

        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "ip_address" = ${IpAddress}
            "iqn" = ${Iqn}
            "label" = ${Label}
        }

        return $PSO
    }

}

