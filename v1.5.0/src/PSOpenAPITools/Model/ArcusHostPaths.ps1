#
# Data Services Cloud Console API
# Data Services Cloud Console API
# Version: 1.5.0
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER IPAddr
Ip Address
.PARAMETER Address
WWN Address of the Host Path
.PARAMETER AssociatedLinks
Associated Links Details
.PARAMETER Displayname
Name to be used for display purposes
.PARAMETER Domain
Domain name of the Host
.PARAMETER DriverVersion
Driver version   
.PARAMETER FirmwareVersion
Firmware version
.PARAMETER Generation
Generation Time of the Resource
.PARAMETER HostId
ID of the Host resource
.PARAMETER HostName
Host Name
.PARAMETER HostSpeed
ID of the Host resource
.PARAMETER Id
HostPath Resource UID
.PARAMETER Model
Host Model
.PARAMETER PathType
Path Type
.PARAMETER PortPos
No description available.
.PARAMETER ResourceUri
resourceUri for detailed hostpath object
.PARAMETER ScHostInitiatorId
Host Service Initiator Id
.PARAMETER SwitchPortWWN
Switch Port WWN
.PARAMETER SystemUid
System Uid
.PARAMETER SystemWWN
System serial Number   
.PARAMETER Uri
Uri 
.PARAMETER Vendor
Vendor
.OUTPUTS

ArcusHostPaths<PSCustomObject>
#>

function Initialize-ArcusHostPaths {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${IPAddr},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Address},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${AssociatedLinks},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Displayname},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Domain},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${DriverVersion},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${FirmwareVersion},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Generation},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${HostId},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${HostName},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${HostSpeed},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Id},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Model},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${PathType},
        [Parameter(Position = 14, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${PortPos},
        [Parameter(Position = 15, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ResourceUri},
        [Parameter(Position = 16, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ScHostInitiatorId},
        [Parameter(Position = 17, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SwitchPortWWN},
        [Parameter(Position = 18, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SystemUid},
        [Parameter(Position = 19, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SystemWWN},
        [Parameter(Position = 20, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Uri},
        [Parameter(Position = 21, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Vendor}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => ArcusHostPaths' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "IPAddr" = ${IPAddr}
            "address" = ${Address}
            "associatedLinks" = ${AssociatedLinks}
            "displayname" = ${Displayname}
            "domain" = ${Domain}
            "driverVersion" = ${DriverVersion}
            "firmwareVersion" = ${FirmwareVersion}
            "generation" = ${Generation}
            "hostId" = ${HostId}
            "hostName" = ${HostName}
            "hostSpeed" = ${HostSpeed}
            "id" = ${Id}
            "model" = ${Model}
            "pathType" = ${PathType}
            "portPos" = ${PortPos}
            "resourceUri" = ${ResourceUri}
            "sc_HostInitiatorId" = ${ScHostInitiatorId}
            "switchPortWWN" = ${SwitchPortWWN}
            "systemUid" = ${SystemUid}
            "systemWWN" = ${SystemWWN}
            "uri" = ${Uri}
            "vendor" = ${Vendor}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to ArcusHostPaths<PSCustomObject>

.DESCRIPTION

Convert from JSON to ArcusHostPaths<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

ArcusHostPaths<PSCustomObject>
#>
function ConvertFrom-JsonToArcusHostPaths {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => ArcusHostPaths' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in ArcusHostPaths
        $AllProperties = ("IPAddr", "address", "associatedLinks", "displayname", "domain", "driverVersion", "firmwareVersion", "generation", "hostId", "hostName", "hostSpeed", "id", "model", "pathType", "portPos", "resourceUri", "sc_HostInitiatorId", "switchPortWWN", "systemUid", "systemWWN", "uri", "vendor")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "IPAddr"))) { #optional property not found
            $IPAddr = $null
        } else {
            $IPAddr = $JsonParameters.PSobject.Properties["IPAddr"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "address"))) { #optional property not found
            $Address = $null
        } else {
            $Address = $JsonParameters.PSobject.Properties["address"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "associatedLinks"))) { #optional property not found
            $AssociatedLinks = $null
        } else {
            $AssociatedLinks = $JsonParameters.PSobject.Properties["associatedLinks"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "displayname"))) { #optional property not found
            $Displayname = $null
        } else {
            $Displayname = $JsonParameters.PSobject.Properties["displayname"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "domain"))) { #optional property not found
            $Domain = $null
        } else {
            $Domain = $JsonParameters.PSobject.Properties["domain"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "driverVersion"))) { #optional property not found
            $DriverVersion = $null
        } else {
            $DriverVersion = $JsonParameters.PSobject.Properties["driverVersion"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "firmwareVersion"))) { #optional property not found
            $FirmwareVersion = $null
        } else {
            $FirmwareVersion = $JsonParameters.PSobject.Properties["firmwareVersion"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "generation"))) { #optional property not found
            $Generation = $null
        } else {
            $Generation = $JsonParameters.PSobject.Properties["generation"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "hostId"))) { #optional property not found
            $HostId = $null
        } else {
            $HostId = $JsonParameters.PSobject.Properties["hostId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "hostName"))) { #optional property not found
            $HostName = $null
        } else {
            $HostName = $JsonParameters.PSobject.Properties["hostName"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "hostSpeed"))) { #optional property not found
            $HostSpeed = $null
        } else {
            $HostSpeed = $JsonParameters.PSobject.Properties["hostSpeed"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) { #optional property not found
            $Id = $null
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "model"))) { #optional property not found
            $Model = $null
        } else {
            $Model = $JsonParameters.PSobject.Properties["model"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "pathType"))) { #optional property not found
            $PathType = $null
        } else {
            $PathType = $JsonParameters.PSobject.Properties["pathType"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "portPos"))) { #optional property not found
            $PortPos = $null
        } else {
            $PortPos = $JsonParameters.PSobject.Properties["portPos"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "resourceUri"))) { #optional property not found
            $ResourceUri = $null
        } else {
            $ResourceUri = $JsonParameters.PSobject.Properties["resourceUri"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "sc_HostInitiatorId"))) { #optional property not found
            $ScHostInitiatorId = $null
        } else {
            $ScHostInitiatorId = $JsonParameters.PSobject.Properties["sc_HostInitiatorId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "switchPortWWN"))) { #optional property not found
            $SwitchPortWWN = $null
        } else {
            $SwitchPortWWN = $JsonParameters.PSobject.Properties["switchPortWWN"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "systemUid"))) { #optional property not found
            $SystemUid = $null
        } else {
            $SystemUid = $JsonParameters.PSobject.Properties["systemUid"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "systemWWN"))) { #optional property not found
            $SystemWWN = $null
        } else {
            $SystemWWN = $JsonParameters.PSobject.Properties["systemWWN"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "uri"))) { #optional property not found
            $Uri = $null
        } else {
            $Uri = $JsonParameters.PSobject.Properties["uri"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "vendor"))) { #optional property not found
            $Vendor = $null
        } else {
            $Vendor = $JsonParameters.PSobject.Properties["vendor"].value
        }

        $PSO = [PSCustomObject]@{
            "IPAddr" = ${IPAddr}
            "address" = ${Address}
            "associatedLinks" = ${AssociatedLinks}
            "displayname" = ${Displayname}
            "domain" = ${Domain}
            "driverVersion" = ${DriverVersion}
            "firmwareVersion" = ${FirmwareVersion}
            "generation" = ${Generation}
            "hostId" = ${HostId}
            "hostName" = ${HostName}
            "hostSpeed" = ${HostSpeed}
            "id" = ${Id}
            "model" = ${Model}
            "pathType" = ${PathType}
            "portPos" = ${PortPos}
            "resourceUri" = ${ResourceUri}
            "sc_HostInitiatorId" = ${ScHostInitiatorId}
            "switchPortWWN" = ${SwitchPortWWN}
            "systemUid" = ${SystemUid}
            "systemWWN" = ${SystemWWN}
            "uri" = ${Uri}
            "vendor" = ${Vendor}
        }

        return $PSO
    }

}

