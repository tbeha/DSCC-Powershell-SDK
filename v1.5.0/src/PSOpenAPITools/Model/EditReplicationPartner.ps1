#
# Data Services Cloud Console API
# Data Services Cloud Console API
# Version: 1.5.0
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

The request body for replication partner.

.PARAMETER ControlPort
Port number of partner control interface. Positive integer value up to 65535 representing TCP/IP port.
.PARAMETER DataPort
Port number of partner data interface. Positive integer value up to 65535 representing TCP/IP port.
.PARAMETER Description
Description of replication partner. String of up to 255 printable ASCII characters.
.PARAMETER RemotePartnerId
Remote replication partner ID
.PARAMETER ReplHostname
IP address or hostname of partner data interface. String of up to 64 alphanumeric characters, - and . and colon are allowed after first character.
.PARAMETER Source
No description available.
.PARAMETER SubnetLabel
Label of the subnet used to replicate to this partner. String of up to 64 alphanumeric characters, - and . and colon are allowed after first character.
.PARAMETER SubnetType
Type of the subnet used to replicate to this partner. Possible values are 'invalid', 'unconfigured', 'mgmt', 'data', 'mgmt_data'.
.PARAMETER Target
No description available.
.PARAMETER TargetSystemId
Target system ID
.PARAMETER Throttles
Throttles used while replicating from/to this partner. All the throttles for the partner.
.OUTPUTS

EditReplicationPartner<PSCustomObject>
#>

function Initialize-EditReplicationPartner {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${ControlPort},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${DataPort},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Description},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${RemotePartnerId},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ReplHostname},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Source},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SubnetLabel},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SubnetType},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Target},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${TargetSystemId},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Throttles}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => EditReplicationPartner' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "control_port" = ${ControlPort}
            "data_port" = ${DataPort}
            "description" = ${Description}
            "remotePartnerId" = ${RemotePartnerId}
            "repl_hostname" = ${ReplHostname}
            "source" = ${Source}
            "subnet_label" = ${SubnetLabel}
            "subnet_type" = ${SubnetType}
            "target" = ${Target}
            "targetSystemId" = ${TargetSystemId}
            "throttles" = ${Throttles}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to EditReplicationPartner<PSCustomObject>

.DESCRIPTION

Convert from JSON to EditReplicationPartner<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

EditReplicationPartner<PSCustomObject>
#>
function ConvertFrom-JsonToEditReplicationPartner {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => EditReplicationPartner' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in EditReplicationPartner
        $AllProperties = ("control_port", "data_port", "description", "remotePartnerId", "repl_hostname", "source", "subnet_label", "subnet_type", "target", "targetSystemId", "throttles")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "control_port"))) { #optional property not found
            $ControlPort = $null
        } else {
            $ControlPort = $JsonParameters.PSobject.Properties["control_port"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "data_port"))) { #optional property not found
            $DataPort = $null
        } else {
            $DataPort = $JsonParameters.PSobject.Properties["data_port"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "description"))) { #optional property not found
            $Description = $null
        } else {
            $Description = $JsonParameters.PSobject.Properties["description"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "remotePartnerId"))) { #optional property not found
            $RemotePartnerId = $null
        } else {
            $RemotePartnerId = $JsonParameters.PSobject.Properties["remotePartnerId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "repl_hostname"))) { #optional property not found
            $ReplHostname = $null
        } else {
            $ReplHostname = $JsonParameters.PSobject.Properties["repl_hostname"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "source"))) { #optional property not found
            $Source = $null
        } else {
            $Source = $JsonParameters.PSobject.Properties["source"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "subnet_label"))) { #optional property not found
            $SubnetLabel = $null
        } else {
            $SubnetLabel = $JsonParameters.PSobject.Properties["subnet_label"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "subnet_type"))) { #optional property not found
            $SubnetType = $null
        } else {
            $SubnetType = $JsonParameters.PSobject.Properties["subnet_type"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "target"))) { #optional property not found
            $Target = $null
        } else {
            $Target = $JsonParameters.PSobject.Properties["target"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "targetSystemId"))) { #optional property not found
            $TargetSystemId = $null
        } else {
            $TargetSystemId = $JsonParameters.PSobject.Properties["targetSystemId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "throttles"))) { #optional property not found
            $Throttles = $null
        } else {
            $Throttles = $JsonParameters.PSobject.Properties["throttles"].value
        }

        $PSO = [PSCustomObject]@{
            "control_port" = ${ControlPort}
            "data_port" = ${DataPort}
            "description" = ${Description}
            "remotePartnerId" = ${RemotePartnerId}
            "repl_hostname" = ${ReplHostname}
            "source" = ${Source}
            "subnet_label" = ${SubnetLabel}
            "subnet_type" = ${SubnetType}
            "target" = ${Target}
            "targetSystemId" = ${TargetSystemId}
            "throttles" = ${Throttles}
        }

        return $PSO
    }

}

