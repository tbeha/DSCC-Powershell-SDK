#
# Data Services Cloud Console API
# Data Services Cloud Console API
# Version: 1.5.0
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Request body for creating VMware Storage Container

.PARAMETER Domain
Domain that the resource belongs to
.PARAMETER HostIDs
Host IDs
.PARAMETER HostSetIDs
Host Set IDs
.PARAMETER Name
Storage Container Name.
.OUTPUTS

ArcusCreatevVolSCInput<PSCustomObject>
#>

function Initialize-ArcusCreatevVolSCInput {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Domain},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${HostIDs},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${HostSetIDs},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => ArcusCreatevVolSCInput' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $Name) {
            throw "invalid value for 'Name', 'Name' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "domain" = ${Domain}
            "hostIDs" = ${HostIDs}
            "hostSetIDs" = ${HostSetIDs}
            "name" = ${Name}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to ArcusCreatevVolSCInput<PSCustomObject>

.DESCRIPTION

Convert from JSON to ArcusCreatevVolSCInput<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

ArcusCreatevVolSCInput<PSCustomObject>
#>
function ConvertFrom-JsonToArcusCreatevVolSCInput {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => ArcusCreatevVolSCInput' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in ArcusCreatevVolSCInput
        $AllProperties = ("domain", "hostIDs", "hostSetIDs", "name")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'name' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) {
            throw "Error! JSON cannot be serialized due to the required property 'name' missing."
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "domain"))) { #optional property not found
            $Domain = $null
        } else {
            $Domain = $JsonParameters.PSobject.Properties["domain"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "hostIDs"))) { #optional property not found
            $HostIDs = $null
        } else {
            $HostIDs = $JsonParameters.PSobject.Properties["hostIDs"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "hostSetIDs"))) { #optional property not found
            $HostSetIDs = $null
        } else {
            $HostSetIDs = $JsonParameters.PSobject.Properties["hostSetIDs"].value
        }

        $PSO = [PSCustomObject]@{
            "domain" = ${Domain}
            "hostIDs" = ${HostIDs}
            "hostSetIDs" = ${HostSetIDs}
            "name" = ${Name}
        }

        return $PSO
    }

}

