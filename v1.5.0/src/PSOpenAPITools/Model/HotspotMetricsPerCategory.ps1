#
# Data Services Cloud Console API
# Data Services Cloud Console API
# Version: 1.5.0
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Contains the hotspots metrics per operation i.e., read and write

.PARAMETER Read
Contains the list of hotspots metrics for read latency
.PARAMETER Write
Contains the list of hotspots metrics for write latency
.OUTPUTS

HotspotMetricsPerCategory<PSCustomObject>
#>

function Initialize-HotspotMetricsPerCategory {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Read},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Write}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => HotspotMetricsPerCategory' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "read" = ${Read}
            "write" = ${Write}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to HotspotMetricsPerCategory<PSCustomObject>

.DESCRIPTION

Convert from JSON to HotspotMetricsPerCategory<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

HotspotMetricsPerCategory<PSCustomObject>
#>
function ConvertFrom-JsonToHotspotMetricsPerCategory {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => HotspotMetricsPerCategory' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in HotspotMetricsPerCategory
        $AllProperties = ("read", "write")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "read"))) { #optional property not found
            $Read = $null
        } else {
            $Read = $JsonParameters.PSobject.Properties["read"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "write"))) { #optional property not found
            $Write = $null
        } else {
            $Write = $JsonParameters.PSobject.Properties["write"].value
        }

        $PSO = [PSCustomObject]@{
            "read" = ${Read}
            "write" = ${Write}
        }

        return $PSO
    }

}

