#
# Data Services Cloud Console API
# Data Services Cloud Console API
# Version: 1.5.0
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Create external key manager input.

.PARAMETER Description
String of up to 255 printable ASCII characters. Example: '99.9999% availability'.
.PARAMETER Hostname
Hostname or IP Address for the External Key Manager. Plain string.
.PARAMETER Name
Name of external key manager. String of up to 64 alphanumeric characters, - and . and : are allowed after first character.
.PARAMETER Password
External Key Manager user password. String up to 255 printable characters. String of 8 to 255 printable characters excluding ampersand and ;[]
.PARAMETER Port
Positive integer value up to 65535 representing External key manager port.
.PARAMETER Protocol
Possible values: 'KMIP1_0', 'KMIP1_1', 'KMIP1_2', 'KMIP1_3'.
.PARAMETER Username
External key manager username. String of up to 255 printable ASCII characters.
.OUTPUTS

CreateExternalKeyManager<PSCustomObject>
#>

function Initialize-CreateExternalKeyManager {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Description},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Hostname},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Password},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [Int32]
        ${Port},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Protocol},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Username}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => CreateExternalKeyManager' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $Hostname) {
            throw "invalid value for 'Hostname', 'Hostname' cannot be null."
        }

        if ($null -eq $Name) {
            throw "invalid value for 'Name', 'Name' cannot be null."
        }

        if ($null -eq $Password) {
            throw "invalid value for 'Password', 'Password' cannot be null."
        }

        if ($null -eq $Port) {
            throw "invalid value for 'Port', 'Port' cannot be null."
        }

        if ($null -eq $Protocol) {
            throw "invalid value for 'Protocol', 'Protocol' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "description" = ${Description}
            "hostname" = ${Hostname}
            "name" = ${Name}
            "password" = ${Password}
            "port" = ${Port}
            "protocol" = ${Protocol}
            "username" = ${Username}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to CreateExternalKeyManager<PSCustomObject>

.DESCRIPTION

Convert from JSON to CreateExternalKeyManager<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

CreateExternalKeyManager<PSCustomObject>
#>
function ConvertFrom-JsonToCreateExternalKeyManager {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => CreateExternalKeyManager' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in CreateExternalKeyManager
        $AllProperties = ("description", "hostname", "name", "password", "port", "protocol", "username")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'hostname' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "hostname"))) {
            throw "Error! JSON cannot be serialized due to the required property 'hostname' missing."
        } else {
            $Hostname = $JsonParameters.PSobject.Properties["hostname"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) {
            throw "Error! JSON cannot be serialized due to the required property 'name' missing."
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "password"))) {
            throw "Error! JSON cannot be serialized due to the required property 'password' missing."
        } else {
            $Password = $JsonParameters.PSobject.Properties["password"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "port"))) {
            throw "Error! JSON cannot be serialized due to the required property 'port' missing."
        } else {
            $Port = $JsonParameters.PSobject.Properties["port"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "protocol"))) {
            throw "Error! JSON cannot be serialized due to the required property 'protocol' missing."
        } else {
            $Protocol = $JsonParameters.PSobject.Properties["protocol"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "description"))) { #optional property not found
            $Description = $null
        } else {
            $Description = $JsonParameters.PSobject.Properties["description"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "username"))) { #optional property not found
            $Username = $null
        } else {
            $Username = $JsonParameters.PSobject.Properties["username"].value
        }

        $PSO = [PSCustomObject]@{
            "description" = ${Description}
            "hostname" = ${Hostname}
            "name" = ${Name}
            "password" = ${Password}
            "port" = ${Port}
            "protocol" = ${Protocol}
            "username" = ${Username}
        }

        return $PSO
    }

}

