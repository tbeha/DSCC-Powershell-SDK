#
# Data Services Cloud Console API
# Data Services Cloud Console API
# Version: 1.5.0
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER PortErrors
Comma separated list of integers to indicate error conditions.
.PARAMETER PortIdx
Index of the port, starting from 0.
.PARAMETER PortName
Name of the port.
.PARAMETER PortStatus
Status of the port. Possible values:'connected', 'disconnected', 'unknown','disabled'.
.PARAMETER PortType
Type of the sas port (e.g. upstream/downstream). Possible values:'upstream', 'downstream', 'unknown'.
.PARAMETER RemoteLocId
The location ID of the controller that connects to this port.
.PARAMETER RemotePortId
The pord_id of the remote SAS port that connects to this port.
.PARAMETER RemoteSasAddr
SAS address for the connected.
.PARAMETER RemoteSasDomain
The sas domain (A or B side) it connects to. Possible values:'A', 'B', 'unknown'.
.PARAMETER RemoteSasPhyId
Comma separated list of phy ids that this port connects to.
.OUTPUTS

NimbleNsShelfPortInfo<PSCustomObject>
#>

function Initialize-NimbleNsShelfPortInfo {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${PortErrors},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${PortIdx},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${PortName},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${PortStatus},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${PortType},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${RemoteLocId},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${RemotePortId},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${RemoteSasAddr},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${RemoteSasDomain},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${RemoteSasPhyId}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => NimbleNsShelfPortInfo' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "port_errors" = ${PortErrors}
            "port_idx" = ${PortIdx}
            "port_name" = ${PortName}
            "port_status" = ${PortStatus}
            "port_type" = ${PortType}
            "remote_loc_id" = ${RemoteLocId}
            "remote_port_id" = ${RemotePortId}
            "remote_sas_addr" = ${RemoteSasAddr}
            "remote_sas_domain" = ${RemoteSasDomain}
            "remote_sas_phy_id" = ${RemoteSasPhyId}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to NimbleNsShelfPortInfo<PSCustomObject>

.DESCRIPTION

Convert from JSON to NimbleNsShelfPortInfo<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

NimbleNsShelfPortInfo<PSCustomObject>
#>
function ConvertFrom-JsonToNimbleNsShelfPortInfo {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => NimbleNsShelfPortInfo' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in NimbleNsShelfPortInfo
        $AllProperties = ("port_errors", "port_idx", "port_name", "port_status", "port_type", "remote_loc_id", "remote_port_id", "remote_sas_addr", "remote_sas_domain", "remote_sas_phy_id")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "port_errors"))) { #optional property not found
            $PortErrors = $null
        } else {
            $PortErrors = $JsonParameters.PSobject.Properties["port_errors"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "port_idx"))) { #optional property not found
            $PortIdx = $null
        } else {
            $PortIdx = $JsonParameters.PSobject.Properties["port_idx"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "port_name"))) { #optional property not found
            $PortName = $null
        } else {
            $PortName = $JsonParameters.PSobject.Properties["port_name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "port_status"))) { #optional property not found
            $PortStatus = $null
        } else {
            $PortStatus = $JsonParameters.PSobject.Properties["port_status"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "port_type"))) { #optional property not found
            $PortType = $null
        } else {
            $PortType = $JsonParameters.PSobject.Properties["port_type"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "remote_loc_id"))) { #optional property not found
            $RemoteLocId = $null
        } else {
            $RemoteLocId = $JsonParameters.PSobject.Properties["remote_loc_id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "remote_port_id"))) { #optional property not found
            $RemotePortId = $null
        } else {
            $RemotePortId = $JsonParameters.PSobject.Properties["remote_port_id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "remote_sas_addr"))) { #optional property not found
            $RemoteSasAddr = $null
        } else {
            $RemoteSasAddr = $JsonParameters.PSobject.Properties["remote_sas_addr"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "remote_sas_domain"))) { #optional property not found
            $RemoteSasDomain = $null
        } else {
            $RemoteSasDomain = $JsonParameters.PSobject.Properties["remote_sas_domain"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "remote_sas_phy_id"))) { #optional property not found
            $RemoteSasPhyId = $null
        } else {
            $RemoteSasPhyId = $JsonParameters.PSobject.Properties["remote_sas_phy_id"].value
        }

        $PSO = [PSCustomObject]@{
            "port_errors" = ${PortErrors}
            "port_idx" = ${PortIdx}
            "port_name" = ${PortName}
            "port_status" = ${PortStatus}
            "port_type" = ${PortType}
            "remote_loc_id" = ${RemoteLocId}
            "remote_port_id" = ${RemotePortId}
            "remote_sas_addr" = ${RemoteSasAddr}
            "remote_sas_domain" = ${RemoteSasDomain}
            "remote_sas_phy_id" = ${RemoteSasPhyId}
        }

        return $PSO
    }

}

