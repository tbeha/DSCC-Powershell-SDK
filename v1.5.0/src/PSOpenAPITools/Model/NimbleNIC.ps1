#
# Data Services Cloud Console API
# Data Services Cloud Console API
# Version: 1.5.0
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER DataIp
Data IP address.
.PARAMETER Name
Name of NIC.
.PARAMETER SubnetLabel
Subnet label for this NIC.
.PARAMETER Tagged
Identify whether the NIC is tagged.
.OUTPUTS

NimbleNIC<PSCustomObject>
#>

function Initialize-NimbleNIC {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${DataIp},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SubnetLabel},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${Tagged}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => NimbleNIC' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "data_ip" = ${DataIp}
            "name" = ${Name}
            "subnet_label" = ${SubnetLabel}
            "tagged" = ${Tagged}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to NimbleNIC<PSCustomObject>

.DESCRIPTION

Convert from JSON to NimbleNIC<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

NimbleNIC<PSCustomObject>
#>
function ConvertFrom-JsonToNimbleNIC {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => NimbleNIC' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in NimbleNIC
        $AllProperties = ("data_ip", "name", "subnet_label", "tagged")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "data_ip"))) { #optional property not found
            $DataIp = $null
        } else {
            $DataIp = $JsonParameters.PSobject.Properties["data_ip"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) { #optional property not found
            $Name = $null
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "subnet_label"))) { #optional property not found
            $SubnetLabel = $null
        } else {
            $SubnetLabel = $JsonParameters.PSobject.Properties["subnet_label"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "tagged"))) { #optional property not found
            $Tagged = $null
        } else {
            $Tagged = $JsonParameters.PSobject.Properties["tagged"].value
        }

        $PSO = [PSCustomObject]@{
            "data_ip" = ${DataIp}
            "name" = ${Name}
            "subnet_label" = ${SubnetLabel}
            "tagged" = ${Tagged}
        }

        return $PSO
    }

}

