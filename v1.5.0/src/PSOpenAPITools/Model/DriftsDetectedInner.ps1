#
# Data Services Cloud Console API
# Data Services Cloud Console API
# Version: 1.5.0
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Avg90thPercentile
90th quantile of latency
.PARAMETER DriftBuckets
IO size buckets in which drifts are observed
.PARAMETER EndTime
End time of the Drift
.PARAMETER IoType
Drift detected in operation type
.PARAMETER LatencyRangeUnit
Metric of the latency range
.PARAMETER MaxLatencyLowerRange
Floor of the latency bucket
.PARAMETER MaxLatencyUpperRange
Ceiling of the latency bucket
.PARAMETER StartTime
Start time of the Drift
.OUTPUTS

DriftsDetectedInner<PSCustomObject>
#>

function Initialize-DriftsDetectedInner {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Decimal]]
        ${Avg90thPercentile},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${DriftBuckets},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Decimal]]
        ${EndTime},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${IoType},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${LatencyRangeUnit},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Decimal]]
        ${MaxLatencyLowerRange},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Decimal]]
        ${MaxLatencyUpperRange},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Decimal]]
        ${StartTime}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => DriftsDetectedInner' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "avg90thPercentile" = ${Avg90thPercentile}
            "driftBuckets" = ${DriftBuckets}
            "endTime" = ${EndTime}
            "ioType" = ${IoType}
            "latencyRangeUnit" = ${LatencyRangeUnit}
            "maxLatencyLowerRange" = ${MaxLatencyLowerRange}
            "maxLatencyUpperRange" = ${MaxLatencyUpperRange}
            "startTime" = ${StartTime}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to DriftsDetectedInner<PSCustomObject>

.DESCRIPTION

Convert from JSON to DriftsDetectedInner<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

DriftsDetectedInner<PSCustomObject>
#>
function ConvertFrom-JsonToDriftsDetectedInner {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => DriftsDetectedInner' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in DriftsDetectedInner
        $AllProperties = ("avg90thPercentile", "driftBuckets", "endTime", "ioType", "latencyRangeUnit", "maxLatencyLowerRange", "maxLatencyUpperRange", "startTime")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "avg90thPercentile"))) { #optional property not found
            $Avg90thPercentile = $null
        } else {
            $Avg90thPercentile = $JsonParameters.PSobject.Properties["avg90thPercentile"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "driftBuckets"))) { #optional property not found
            $DriftBuckets = $null
        } else {
            $DriftBuckets = $JsonParameters.PSobject.Properties["driftBuckets"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "endTime"))) { #optional property not found
            $EndTime = $null
        } else {
            $EndTime = $JsonParameters.PSobject.Properties["endTime"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ioType"))) { #optional property not found
            $IoType = $null
        } else {
            $IoType = $JsonParameters.PSobject.Properties["ioType"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "latencyRangeUnit"))) { #optional property not found
            $LatencyRangeUnit = $null
        } else {
            $LatencyRangeUnit = $JsonParameters.PSobject.Properties["latencyRangeUnit"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "maxLatencyLowerRange"))) { #optional property not found
            $MaxLatencyLowerRange = $null
        } else {
            $MaxLatencyLowerRange = $JsonParameters.PSobject.Properties["maxLatencyLowerRange"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "maxLatencyUpperRange"))) { #optional property not found
            $MaxLatencyUpperRange = $null
        } else {
            $MaxLatencyUpperRange = $JsonParameters.PSobject.Properties["maxLatencyUpperRange"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "startTime"))) { #optional property not found
            $StartTime = $null
        } else {
            $StartTime = $JsonParameters.PSobject.Properties["startTime"].value
        }

        $PSO = [PSCustomObject]@{
            "avg90thPercentile" = ${Avg90thPercentile}
            "driftBuckets" = ${DriftBuckets}
            "endTime" = ${EndTime}
            "ioType" = ${IoType}
            "latencyRangeUnit" = ${LatencyRangeUnit}
            "maxLatencyLowerRange" = ${MaxLatencyLowerRange}
            "maxLatencyUpperRange" = ${MaxLatencyUpperRange}
            "startTime" = ${StartTime}
        }

        return $PSO
    }

}

