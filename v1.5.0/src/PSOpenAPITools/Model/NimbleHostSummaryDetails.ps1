#
# Data Services Cloud Console API
# Data Services Cloud Console API
# Version: 1.5.0
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER AccessProtocol
Access protocol of the volume. Possible values:'iscsi', 'fc'.
.PARAMETER AcrId
Identifier of the access control record.
.PARAMETER ApplyTo
Type of object this access control record applies to. Possible values: 'volume'. 'pe', 'vvol_volume', 'vvol_snapshot', 'snapshot', 'both'.
.PARAMETER ChapUserId
Identifier for the CHAP user.
.PARAMETER ChapUserName
Flag denoting if data in the associated volume should be compressed.
.PARAMETER FcInitiators
list of FC Initiators
.PARAMETER FcTargetPorts
list of FC Ports
.PARAMETER HostType
type of Host.
.PARAMETER Id
Identifier for the host id
.PARAMETER InitiatorGroupId
Identifier for the initiator group. `Filter, Sort`
.PARAMETER InitiatorGroupName
Name of the initiator group.
.PARAMETER IscsiInitiators
list of iscsi Initiators
.PARAMETER Lun
If this access control record applies to a regular volume, this attribute is the volume's LUN (Logical Unit Number). If the access protocol is iSCSI, the LUN will be 0. However, if the access protocol is Fibre Channel, the LUN will be in the range from 0 to 2047. If this record applies to a Virtual Volume, this attribute is the volume's secondary LUN in the range from 0 to 399999, for both iSCSI and Fibre Channel. If the record applies to a OpenstackV2 volume, the LUN will be in the range from 0 to 2047, for both iSCSI and Fibre Channel. If this record applies to a protocol endpoint or only a snapshot, this attribute is not meaningful and is set to null.
.PARAMETER Name
Name of the host group in the Data Services Cloud Console (DSCC)
.PARAMETER NumConnections
Number of Connections
.PARAMETER ScHostId
Identifier for the initiator group in the Data Services Cloud Console (DSCC)
.PARAMETER SnapId
Identifier for the snapshot this access control record applies to. `Filter, Sort`
.OUTPUTS

NimbleHostSummaryDetails<PSCustomObject>
#>

function Initialize-NimbleHostSummaryDetails {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${AccessProtocol},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${AcrId},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ApplyTo},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ChapUserId},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ChapUserName},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${FcInitiators},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${FcTargetPorts},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${HostType},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Id},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${InitiatorGroupId},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${InitiatorGroupName},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${IscsiInitiators},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${Lun},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 14, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${NumConnections},
        [Parameter(Position = 15, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ScHostId},
        [Parameter(Position = 16, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SnapId}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => NimbleHostSummaryDetails' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "access_protocol" = ${AccessProtocol}
            "acr_id" = ${AcrId}
            "apply_to" = ${ApplyTo}
            "chap_user_id" = ${ChapUserId}
            "chap_user_name" = ${ChapUserName}
            "fc_initiators" = ${FcInitiators}
            "fc_target_ports" = ${FcTargetPorts}
            "host_type" = ${HostType}
            "id" = ${Id}
            "initiator_group_id" = ${InitiatorGroupId}
            "initiator_group_name" = ${InitiatorGroupName}
            "iscsi_initiators" = ${IscsiInitiators}
            "lun" = ${Lun}
            "name" = ${Name}
            "num_connections" = ${NumConnections}
            "sc_host_id" = ${ScHostId}
            "snap_id" = ${SnapId}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to NimbleHostSummaryDetails<PSCustomObject>

.DESCRIPTION

Convert from JSON to NimbleHostSummaryDetails<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

NimbleHostSummaryDetails<PSCustomObject>
#>
function ConvertFrom-JsonToNimbleHostSummaryDetails {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => NimbleHostSummaryDetails' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in NimbleHostSummaryDetails
        $AllProperties = ("access_protocol", "acr_id", "apply_to", "chap_user_id", "chap_user_name", "fc_initiators", "fc_target_ports", "host_type", "id", "initiator_group_id", "initiator_group_name", "iscsi_initiators", "lun", "name", "num_connections", "sc_host_id", "snap_id")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "access_protocol"))) { #optional property not found
            $AccessProtocol = $null
        } else {
            $AccessProtocol = $JsonParameters.PSobject.Properties["access_protocol"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "acr_id"))) { #optional property not found
            $AcrId = $null
        } else {
            $AcrId = $JsonParameters.PSobject.Properties["acr_id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "apply_to"))) { #optional property not found
            $ApplyTo = $null
        } else {
            $ApplyTo = $JsonParameters.PSobject.Properties["apply_to"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "chap_user_id"))) { #optional property not found
            $ChapUserId = $null
        } else {
            $ChapUserId = $JsonParameters.PSobject.Properties["chap_user_id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "chap_user_name"))) { #optional property not found
            $ChapUserName = $null
        } else {
            $ChapUserName = $JsonParameters.PSobject.Properties["chap_user_name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "fc_initiators"))) { #optional property not found
            $FcInitiators = $null
        } else {
            $FcInitiators = $JsonParameters.PSobject.Properties["fc_initiators"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "fc_target_ports"))) { #optional property not found
            $FcTargetPorts = $null
        } else {
            $FcTargetPorts = $JsonParameters.PSobject.Properties["fc_target_ports"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "host_type"))) { #optional property not found
            $HostType = $null
        } else {
            $HostType = $JsonParameters.PSobject.Properties["host_type"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) { #optional property not found
            $Id = $null
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "initiator_group_id"))) { #optional property not found
            $InitiatorGroupId = $null
        } else {
            $InitiatorGroupId = $JsonParameters.PSobject.Properties["initiator_group_id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "initiator_group_name"))) { #optional property not found
            $InitiatorGroupName = $null
        } else {
            $InitiatorGroupName = $JsonParameters.PSobject.Properties["initiator_group_name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "iscsi_initiators"))) { #optional property not found
            $IscsiInitiators = $null
        } else {
            $IscsiInitiators = $JsonParameters.PSobject.Properties["iscsi_initiators"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "lun"))) { #optional property not found
            $Lun = $null
        } else {
            $Lun = $JsonParameters.PSobject.Properties["lun"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) { #optional property not found
            $Name = $null
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "num_connections"))) { #optional property not found
            $NumConnections = $null
        } else {
            $NumConnections = $JsonParameters.PSobject.Properties["num_connections"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "sc_host_id"))) { #optional property not found
            $ScHostId = $null
        } else {
            $ScHostId = $JsonParameters.PSobject.Properties["sc_host_id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "snap_id"))) { #optional property not found
            $SnapId = $null
        } else {
            $SnapId = $JsonParameters.PSobject.Properties["snap_id"].value
        }

        $PSO = [PSCustomObject]@{
            "access_protocol" = ${AccessProtocol}
            "acr_id" = ${AcrId}
            "apply_to" = ${ApplyTo}
            "chap_user_id" = ${ChapUserId}
            "chap_user_name" = ${ChapUserName}
            "fc_initiators" = ${FcInitiators}
            "fc_target_ports" = ${FcTargetPorts}
            "host_type" = ${HostType}
            "id" = ${Id}
            "initiator_group_id" = ${InitiatorGroupId}
            "initiator_group_name" = ${InitiatorGroupName}
            "iscsi_initiators" = ${IscsiInitiators}
            "lun" = ${Lun}
            "name" = ${Name}
            "num_connections" = ${NumConnections}
            "sc_host_id" = ${ScHostId}
            "snap_id" = ${SnapId}
        }

        return $PSO
    }

}

