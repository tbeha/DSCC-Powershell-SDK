#
# Data Services Cloud Console API
# Data Services Cloud Console API
# Version: 1.5.0
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

A single throttle for the partner.

.PARAMETER Days
List of days that the throttle operates.
.PARAMETER Description
Description of the throttle.
.PARAMETER Name
Name of the throttle.
.PARAMETER ThrAtTime
Start time set for the throttle.
.PARAMETER ThrBandwidth
Bandwidth set for the throttle in megabits per second or as the largest possible 64-bit signed integer (9223372036854775807) to indicate that there is no limit. This attribute is superseded by thr_bandwidth_limit_kbps.
.PARAMETER ThrUntilTime
End time set for the throttle.
.OUTPUTS

ReplicationThrottle<PSCustomObject>
#>

function Initialize-ReplicationThrottle {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Days},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Description},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${ThrAtTime},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${ThrBandwidth},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${ThrUntilTime}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => ReplicationThrottle' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "days" = ${Days}
            "description" = ${Description}
            "name" = ${Name}
            "thr_at_time" = ${ThrAtTime}
            "thr_bandwidth" = ${ThrBandwidth}
            "thr_until_time" = ${ThrUntilTime}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to ReplicationThrottle<PSCustomObject>

.DESCRIPTION

Convert from JSON to ReplicationThrottle<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

ReplicationThrottle<PSCustomObject>
#>
function ConvertFrom-JsonToReplicationThrottle {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => ReplicationThrottle' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in ReplicationThrottle
        $AllProperties = ("days", "description", "name", "thr_at_time", "thr_bandwidth", "thr_until_time")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "days"))) { #optional property not found
            $Days = $null
        } else {
            $Days = $JsonParameters.PSobject.Properties["days"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "description"))) { #optional property not found
            $Description = $null
        } else {
            $Description = $JsonParameters.PSobject.Properties["description"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) { #optional property not found
            $Name = $null
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "thr_at_time"))) { #optional property not found
            $ThrAtTime = $null
        } else {
            $ThrAtTime = $JsonParameters.PSobject.Properties["thr_at_time"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "thr_bandwidth"))) { #optional property not found
            $ThrBandwidth = $null
        } else {
            $ThrBandwidth = $JsonParameters.PSobject.Properties["thr_bandwidth"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "thr_until_time"))) { #optional property not found
            $ThrUntilTime = $null
        } else {
            $ThrUntilTime = $JsonParameters.PSobject.Properties["thr_until_time"].value
        }

        $PSO = [PSCustomObject]@{
            "days" = ${Days}
            "description" = ${Description}
            "name" = ${Name}
            "thr_at_time" = ${ThrAtTime}
            "thr_bandwidth" = ${ThrBandwidth}
            "thr_until_time" = ${ThrUntilTime}
        }

        return $PSO
    }

}

