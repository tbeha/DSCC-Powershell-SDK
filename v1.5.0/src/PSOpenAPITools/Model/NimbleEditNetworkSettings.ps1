#
# Data Services Cloud Console API
# Data Services Cloud Console API
# Version: 1.5.0
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Edit Nimble network-settings input.

.PARAMETER ArrayList
List of array network configs.
.PARAMETER IscsiAutomaticConnectionMethod
Enable automatic connection method. Enabling this means means redirecting connections from the specified iSCSI discovery IP to the best data IP based on connection counts.
.PARAMETER IscsiConnectionRebalancing
Enable connection rebalancing. Enabling this means rebalancing iSCSI connections by periodically breaking existing connections that are out-of-balance, allowing the host to reconnect to a more appropriate data IP.
.PARAMETER MgmtIp
Management IP for the Group. Four numbers in the range [0,255] separated by periods.
.PARAMETER Name
Name of the network configuration. Use the name 'draft' when creating a draft configuration. Possible values are 'active', 'backup' and 'draft'.
.PARAMETER RouteList
List of static routes.
.PARAMETER SecondaryMgmtIp
Secondary management IP address for the Group. Four numbers in the range [0,255] separated by periods.
.PARAMETER SubnetList
List of subnet configs.
.OUTPUTS

NimbleEditNetworkSettings<PSCustomObject>
#>

function Initialize-NimbleEditNetworkSettings {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${ArrayList},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${IscsiAutomaticConnectionMethod},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${IscsiConnectionRebalancing},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${MgmtIp},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${RouteList},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SecondaryMgmtIp},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${SubnetList}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => NimbleEditNetworkSettings' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "array_list" = ${ArrayList}
            "iscsi_automatic_connection_method" = ${IscsiAutomaticConnectionMethod}
            "iscsi_connection_rebalancing" = ${IscsiConnectionRebalancing}
            "mgmt_ip" = ${MgmtIp}
            "name" = ${Name}
            "route_list" = ${RouteList}
            "secondary_mgmt_ip" = ${SecondaryMgmtIp}
            "subnet_list" = ${SubnetList}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to NimbleEditNetworkSettings<PSCustomObject>

.DESCRIPTION

Convert from JSON to NimbleEditNetworkSettings<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

NimbleEditNetworkSettings<PSCustomObject>
#>
function ConvertFrom-JsonToNimbleEditNetworkSettings {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => NimbleEditNetworkSettings' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in NimbleEditNetworkSettings
        $AllProperties = ("array_list", "iscsi_automatic_connection_method", "iscsi_connection_rebalancing", "mgmt_ip", "name", "route_list", "secondary_mgmt_ip", "subnet_list")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "array_list"))) { #optional property not found
            $ArrayList = $null
        } else {
            $ArrayList = $JsonParameters.PSobject.Properties["array_list"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "iscsi_automatic_connection_method"))) { #optional property not found
            $IscsiAutomaticConnectionMethod = $null
        } else {
            $IscsiAutomaticConnectionMethod = $JsonParameters.PSobject.Properties["iscsi_automatic_connection_method"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "iscsi_connection_rebalancing"))) { #optional property not found
            $IscsiConnectionRebalancing = $null
        } else {
            $IscsiConnectionRebalancing = $JsonParameters.PSobject.Properties["iscsi_connection_rebalancing"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "mgmt_ip"))) { #optional property not found
            $MgmtIp = $null
        } else {
            $MgmtIp = $JsonParameters.PSobject.Properties["mgmt_ip"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) { #optional property not found
            $Name = $null
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "route_list"))) { #optional property not found
            $RouteList = $null
        } else {
            $RouteList = $JsonParameters.PSobject.Properties["route_list"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "secondary_mgmt_ip"))) { #optional property not found
            $SecondaryMgmtIp = $null
        } else {
            $SecondaryMgmtIp = $JsonParameters.PSobject.Properties["secondary_mgmt_ip"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "subnet_list"))) { #optional property not found
            $SubnetList = $null
        } else {
            $SubnetList = $JsonParameters.PSobject.Properties["subnet_list"].value
        }

        $PSO = [PSCustomObject]@{
            "array_list" = ${ArrayList}
            "iscsi_automatic_connection_method" = ${IscsiAutomaticConnectionMethod}
            "iscsi_connection_rebalancing" = ${IscsiConnectionRebalancing}
            "mgmt_ip" = ${MgmtIp}
            "name" = ${Name}
            "route_list" = ${RouteList}
            "secondary_mgmt_ip" = ${SecondaryMgmtIp}
            "subnet_list" = ${SubnetList}
        }

        return $PSO
    }

}

