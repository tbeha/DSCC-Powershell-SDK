#
# Data Services Cloud Console API
# Data Services Cloud Console API
# Version: 1.5.0
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Proxy Setting details for a device

.PARAMETER DnsAddresses
Dns address of the system
.PARAMETER Ipv4Address
ipv4 address of the system
.PARAMETER Ipv4Gateway
ipv4 gateway of the system
.PARAMETER Ipv4SubnetMask
NetMask for IPV4 address
.PARAMETER Ipv6Address
IPV6 address of the system
.PARAMETER Ipv6Gateway
IPV6 address of the system
.PARAMETER Ipv6PrefixLen
IPV6 Prefix length
.PARAMETER ProxyParams
No description available.
.OUTPUTS

ArcuseditNetworkSettingsInput<PSCustomObject>
#>

function Initialize-ArcuseditNetworkSettingsInput {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${DnsAddresses},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Ipv4Address},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Ipv4Gateway},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Ipv4SubnetMask},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Ipv6Address},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Ipv6Gateway},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Ipv6PrefixLen},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${ProxyParams}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => ArcuseditNetworkSettingsInput' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "dnsAddresses" = ${DnsAddresses}
            "ipv4Address" = ${Ipv4Address}
            "ipv4Gateway" = ${Ipv4Gateway}
            "ipv4SubnetMask" = ${Ipv4SubnetMask}
            "ipv6Address" = ${Ipv6Address}
            "ipv6Gateway" = ${Ipv6Gateway}
            "ipv6PrefixLen" = ${Ipv6PrefixLen}
            "proxyParams" = ${ProxyParams}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to ArcuseditNetworkSettingsInput<PSCustomObject>

.DESCRIPTION

Convert from JSON to ArcuseditNetworkSettingsInput<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

ArcuseditNetworkSettingsInput<PSCustomObject>
#>
function ConvertFrom-JsonToArcuseditNetworkSettingsInput {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => ArcuseditNetworkSettingsInput' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in ArcuseditNetworkSettingsInput
        $AllProperties = ("dnsAddresses", "ipv4Address", "ipv4Gateway", "ipv4SubnetMask", "ipv6Address", "ipv6Gateway", "ipv6PrefixLen", "proxyParams")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "dnsAddresses"))) { #optional property not found
            $DnsAddresses = $null
        } else {
            $DnsAddresses = $JsonParameters.PSobject.Properties["dnsAddresses"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ipv4Address"))) { #optional property not found
            $Ipv4Address = $null
        } else {
            $Ipv4Address = $JsonParameters.PSobject.Properties["ipv4Address"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ipv4Gateway"))) { #optional property not found
            $Ipv4Gateway = $null
        } else {
            $Ipv4Gateway = $JsonParameters.PSobject.Properties["ipv4Gateway"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ipv4SubnetMask"))) { #optional property not found
            $Ipv4SubnetMask = $null
        } else {
            $Ipv4SubnetMask = $JsonParameters.PSobject.Properties["ipv4SubnetMask"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ipv6Address"))) { #optional property not found
            $Ipv6Address = $null
        } else {
            $Ipv6Address = $JsonParameters.PSobject.Properties["ipv6Address"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ipv6Gateway"))) { #optional property not found
            $Ipv6Gateway = $null
        } else {
            $Ipv6Gateway = $JsonParameters.PSobject.Properties["ipv6Gateway"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ipv6PrefixLen"))) { #optional property not found
            $Ipv6PrefixLen = $null
        } else {
            $Ipv6PrefixLen = $JsonParameters.PSobject.Properties["ipv6PrefixLen"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "proxyParams"))) { #optional property not found
            $ProxyParams = $null
        } else {
            $ProxyParams = $JsonParameters.PSobject.Properties["proxyParams"].value
        }

        $PSO = [PSCustomObject]@{
            "dnsAddresses" = ${DnsAddresses}
            "ipv4Address" = ${Ipv4Address}
            "ipv4Gateway" = ${Ipv4Gateway}
            "ipv4SubnetMask" = ${Ipv4SubnetMask}
            "ipv6Address" = ${Ipv6Address}
            "ipv6Gateway" = ${Ipv6Gateway}
            "ipv6PrefixLen" = ${Ipv6PrefixLen}
            "proxyParams" = ${ProxyParams}
        }

        return $PSO
    }

}

