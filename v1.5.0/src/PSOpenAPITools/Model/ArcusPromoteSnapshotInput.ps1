#
# Data Services Cloud Console API
# Data Services Cloud Console API
# Version: 1.5.0
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Promote snapshot input. Promote a snapshot to the target with given priority.

.PARAMETER Priority
No description available.
.PARAMETER Target
Target volume name to which the snapshot need to be promoted. If not specified it will be promoted to its base volume.
.OUTPUTS

ArcusPromoteSnapshotInput<PSCustomObject>
#>

function Initialize-ArcusPromoteSnapshotInput {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("PRIORITYTYPE_HIGH", "PRIORITYTYPE_MED", "PRIORITYTYPE_LOW")]
        [PSCustomObject]
        ${Priority},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Target}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => ArcusPromoteSnapshotInput' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "priority" = ${Priority}
            "target" = ${Target}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to ArcusPromoteSnapshotInput<PSCustomObject>

.DESCRIPTION

Convert from JSON to ArcusPromoteSnapshotInput<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

ArcusPromoteSnapshotInput<PSCustomObject>
#>
function ConvertFrom-JsonToArcusPromoteSnapshotInput {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => ArcusPromoteSnapshotInput' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in ArcusPromoteSnapshotInput
        $AllProperties = ("priority", "target")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "priority"))) { #optional property not found
            $Priority = $null
        } else {
            $Priority = $JsonParameters.PSobject.Properties["priority"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "target"))) { #optional property not found
            $Target = $null
        } else {
            $Target = $JsonParameters.PSobject.Properties["target"].value
        }

        $PSO = [PSCustomObject]@{
            "priority" = ${Priority}
            "target" = ${Target}
        }

        return $PSO
    }

}

