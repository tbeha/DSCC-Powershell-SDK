#
# Data Services Cloud Console API
# Data Services Cloud Console API
# Version: 1.5.0
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Edit Nimble external key manager input.

.PARAMETER Description
String of up to 255 printable ASCII characters. Example: '99.9999% availability'.
.PARAMETER Hostname
Hostname or IP Address for the External Key Manager. Plain string.
.PARAMETER Id
Identifier for the External key manager. A 42 digit hexadecimal number.
.PARAMETER Name
Name of external key manager. String of up to 64 alphanumeric characters, - and . and : are allowed after first character.
.PARAMETER Password
""External Key Manager user password. String up to 255 printable characters. String of 8 to 255 printable characters excluding ampersand and ;[]""
.PARAMETER Port
Positive integer value up to 65535 representing External key manager port.
.PARAMETER Protocol
Possible values: 'KMIP1_0', 'KMIP1_1', 'KMIP1_2', 'KMIP1_3'.
.PARAMETER Username
External key manager username. String of up to 255 printable ASCII characters.
.OUTPUTS

EditExternalKeyManager<PSCustomObject>
#>

function Initialize-EditExternalKeyManager {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Description},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Hostname},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Id},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Password},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Port},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Protocol},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Username}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => EditExternalKeyManager' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "description" = ${Description}
            "hostname" = ${Hostname}
            "id" = ${Id}
            "name" = ${Name}
            "password" = ${Password}
            "port" = ${Port}
            "protocol" = ${Protocol}
            "username" = ${Username}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to EditExternalKeyManager<PSCustomObject>

.DESCRIPTION

Convert from JSON to EditExternalKeyManager<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

EditExternalKeyManager<PSCustomObject>
#>
function ConvertFrom-JsonToEditExternalKeyManager {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => EditExternalKeyManager' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in EditExternalKeyManager
        $AllProperties = ("description", "hostname", "id", "name", "password", "port", "protocol", "username")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "description"))) { #optional property not found
            $Description = $null
        } else {
            $Description = $JsonParameters.PSobject.Properties["description"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "hostname"))) { #optional property not found
            $Hostname = $null
        } else {
            $Hostname = $JsonParameters.PSobject.Properties["hostname"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) { #optional property not found
            $Id = $null
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) { #optional property not found
            $Name = $null
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "password"))) { #optional property not found
            $Password = $null
        } else {
            $Password = $JsonParameters.PSobject.Properties["password"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "port"))) { #optional property not found
            $Port = $null
        } else {
            $Port = $JsonParameters.PSobject.Properties["port"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "protocol"))) { #optional property not found
            $Protocol = $null
        } else {
            $Protocol = $JsonParameters.PSobject.Properties["protocol"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "username"))) { #optional property not found
            $Username = $null
        } else {
            $Username = $JsonParameters.PSobject.Properties["username"].value
        }

        $PSO = [PSCustomObject]@{
            "description" = ${Description}
            "hostname" = ${Hostname}
            "id" = ${Id}
            "name" = ${Name}
            "password" = ${Password}
            "port" = ${Port}
            "protocol" = ${Protocol}
            "username" = ${Username}
        }

        return $PSO
    }

}

