#
# Data Services Cloud Console API
# Data Services Cloud Console API
# Version: 1.5.0
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Subject Alternative Name for the certificate.

.PARAMETER DNS
DNS for Subject Alternative Name for the certificate
.PARAMETER IP
IP Address for Subject Alternative Name for the certificate
.PARAMETER Email
Email for Subject Alternative Name for the certificate
.OUTPUTS

CertSubjectAltName<PSCustomObject>
#>

function Initialize-CertSubjectAltName {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${DNS},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${IP},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Email}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => CertSubjectAltName' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "DNS" = ${DNS}
            "IP" = ${IP}
            "email" = ${Email}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to CertSubjectAltName<PSCustomObject>

.DESCRIPTION

Convert from JSON to CertSubjectAltName<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

CertSubjectAltName<PSCustomObject>
#>
function ConvertFrom-JsonToCertSubjectAltName {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => CertSubjectAltName' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in CertSubjectAltName
        $AllProperties = ("DNS", "IP", "email")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "DNS"))) { #optional property not found
            $DNS = $null
        } else {
            $DNS = $JsonParameters.PSobject.Properties["DNS"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "IP"))) { #optional property not found
            $IP = $null
        } else {
            $IP = $JsonParameters.PSobject.Properties["IP"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "email"))) { #optional property not found
            $Email = $null
        } else {
            $Email = $JsonParameters.PSobject.Properties["email"].value
        }

        $PSO = [PSCustomObject]@{
            "DNS" = ${DNS}
            "IP" = ${IP}
            "email" = ${Email}
        }

        return $PSO
    }

}

