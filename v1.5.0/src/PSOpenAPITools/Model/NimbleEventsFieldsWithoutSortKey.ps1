#
# Data Services Cloud Console API
# Data Services Cloud Console API
# Version: 1.5.0
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER AlarmId
The alarm ID if the event is related to an alarm. A 42 digit hexadecimal number.
.PARAMETER Category
Category of the event record. Possible values: 'unknown', 'hardware', 'service', 'replication', 'volume', 'update', 'configuration', 'test', 'security', 'array_upgrade'.
.PARAMETER EventType
Type of the event record. Non-negative integer in range [0,2147483647].
.PARAMETER Id
Identifier for the event record. A 42 digit hexadecimal number.
.PARAMETER Scope
The array name for array level event. Possible values: array serial number, or '-'.
.PARAMETER Severity
Severity level of the event. Possible values: 'info', 'notice', 'warning', 'critical'.
.PARAMETER Target
Name of object upon which the event occurred. String of up to 400 alphanumeric characters, - and . and : and "" "" are allowed after first character.
.PARAMETER TargetType
Target type of the event record. Possible values: 'anon', 'array', 'controller', 'disk', 'nic', 'temperature', 'service', 'volume', 'protection_set', 'nvram', 'fan', 'power_supply', 'partner', 'raid', 'test', 'iscsi', 'pool', 'group', 'shelf', 'ntb', 'fc', 'initiator_group'.
.PARAMETER Timestamp
Time when this event happened. Seconds since last epoch i.e. 00:00 January 1, 1970.
.OUTPUTS

NimbleEventsFieldsWithoutSortKey<PSCustomObject>
#>

function Initialize-NimbleEventsFieldsWithoutSortKey {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${AlarmId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Category},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${EventType},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Id},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Scope},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Severity},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Target},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${TargetType},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${Timestamp}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => NimbleEventsFieldsWithoutSortKey' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "alarm_id" = ${AlarmId}
            "category" = ${Category}
            "event_type" = ${EventType}
            "id" = ${Id}
            "scope" = ${Scope}
            "severity" = ${Severity}
            "target" = ${Target}
            "target_type" = ${TargetType}
            "timestamp" = ${Timestamp}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to NimbleEventsFieldsWithoutSortKey<PSCustomObject>

.DESCRIPTION

Convert from JSON to NimbleEventsFieldsWithoutSortKey<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

NimbleEventsFieldsWithoutSortKey<PSCustomObject>
#>
function ConvertFrom-JsonToNimbleEventsFieldsWithoutSortKey {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => NimbleEventsFieldsWithoutSortKey' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in NimbleEventsFieldsWithoutSortKey
        $AllProperties = ("alarm_id", "category", "event_type", "id", "scope", "severity", "target", "target_type", "timestamp")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "alarm_id"))) { #optional property not found
            $AlarmId = $null
        } else {
            $AlarmId = $JsonParameters.PSobject.Properties["alarm_id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "category"))) { #optional property not found
            $Category = $null
        } else {
            $Category = $JsonParameters.PSobject.Properties["category"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "event_type"))) { #optional property not found
            $EventType = $null
        } else {
            $EventType = $JsonParameters.PSobject.Properties["event_type"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) { #optional property not found
            $Id = $null
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "scope"))) { #optional property not found
            $Scope = $null
        } else {
            $Scope = $JsonParameters.PSobject.Properties["scope"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "severity"))) { #optional property not found
            $Severity = $null
        } else {
            $Severity = $JsonParameters.PSobject.Properties["severity"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "target"))) { #optional property not found
            $Target = $null
        } else {
            $Target = $JsonParameters.PSobject.Properties["target"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "target_type"))) { #optional property not found
            $TargetType = $null
        } else {
            $TargetType = $JsonParameters.PSobject.Properties["target_type"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "timestamp"))) { #optional property not found
            $Timestamp = $null
        } else {
            $Timestamp = $JsonParameters.PSobject.Properties["timestamp"].value
        }

        $PSO = [PSCustomObject]@{
            "alarm_id" = ${AlarmId}
            "category" = ${Category}
            "event_type" = ${EventType}
            "id" = ${Id}
            "scope" = ${Scope}
            "severity" = ${Severity}
            "target" = ${Target}
            "target_type" = ${TargetType}
            "timestamp" = ${Timestamp}
        }

        return $PSO
    }

}

