#
# Data Services Cloud Console API
# Data Services Cloud Console API
# Version: 1.5.0
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER SnmpCommunity
Community string to be used with SNMP. String of up to 64 alphanumeric characters, - and . and : are allowed after first character.
.PARAMETER SnmpGetEnabled
Accept SNMP commands.
.PARAMETER SnmpGetPort
Port number to which SNMP get requests should be sent. Positive integer value up to 65535 representing TCP/IP port.
.PARAMETER SnmpSysContact
Name of the SNMP administrator. Plain string.
.PARAMETER SnmpSysLocation
Location of the group. Plain string.
.PARAMETER SnmpTrapEnabled
Enable or disable SNMP traps
.PARAMETER SnmpTrapHost
Hostname or IP Address to send SNMP traps. String of alphanumeric characters, valid range is from 2 to 255; Each label must be between 1 and 63 characters long; - and . are allowed after the first and before the last character.
.PARAMETER SnmpTrapPort
Port number of SNMP trap host. Positive integer value up to 65535 representing TCP/IP port.
.OUTPUTS

EditSnmpSettings<PSCustomObject>
#>

function Initialize-EditSnmpSettings {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SnmpCommunity},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${SnmpGetEnabled},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${SnmpGetPort},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SnmpSysContact},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SnmpSysLocation},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${SnmpTrapEnabled},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SnmpTrapHost},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${SnmpTrapPort}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => EditSnmpSettings' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "snmp_community" = ${SnmpCommunity}
            "snmp_get_enabled" = ${SnmpGetEnabled}
            "snmp_get_port" = ${SnmpGetPort}
            "snmp_sys_contact" = ${SnmpSysContact}
            "snmp_sys_location" = ${SnmpSysLocation}
            "snmp_trap_enabled" = ${SnmpTrapEnabled}
            "snmp_trap_host" = ${SnmpTrapHost}
            "snmp_trap_port" = ${SnmpTrapPort}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to EditSnmpSettings<PSCustomObject>

.DESCRIPTION

Convert from JSON to EditSnmpSettings<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

EditSnmpSettings<PSCustomObject>
#>
function ConvertFrom-JsonToEditSnmpSettings {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => EditSnmpSettings' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in EditSnmpSettings
        $AllProperties = ("snmp_community", "snmp_get_enabled", "snmp_get_port", "snmp_sys_contact", "snmp_sys_location", "snmp_trap_enabled", "snmp_trap_host", "snmp_trap_port")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "snmp_community"))) { #optional property not found
            $SnmpCommunity = $null
        } else {
            $SnmpCommunity = $JsonParameters.PSobject.Properties["snmp_community"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "snmp_get_enabled"))) { #optional property not found
            $SnmpGetEnabled = $null
        } else {
            $SnmpGetEnabled = $JsonParameters.PSobject.Properties["snmp_get_enabled"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "snmp_get_port"))) { #optional property not found
            $SnmpGetPort = $null
        } else {
            $SnmpGetPort = $JsonParameters.PSobject.Properties["snmp_get_port"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "snmp_sys_contact"))) { #optional property not found
            $SnmpSysContact = $null
        } else {
            $SnmpSysContact = $JsonParameters.PSobject.Properties["snmp_sys_contact"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "snmp_sys_location"))) { #optional property not found
            $SnmpSysLocation = $null
        } else {
            $SnmpSysLocation = $JsonParameters.PSobject.Properties["snmp_sys_location"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "snmp_trap_enabled"))) { #optional property not found
            $SnmpTrapEnabled = $null
        } else {
            $SnmpTrapEnabled = $JsonParameters.PSobject.Properties["snmp_trap_enabled"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "snmp_trap_host"))) { #optional property not found
            $SnmpTrapHost = $null
        } else {
            $SnmpTrapHost = $JsonParameters.PSobject.Properties["snmp_trap_host"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "snmp_trap_port"))) { #optional property not found
            $SnmpTrapPort = $null
        } else {
            $SnmpTrapPort = $JsonParameters.PSobject.Properties["snmp_trap_port"].value
        }

        $PSO = [PSCustomObject]@{
            "snmp_community" = ${SnmpCommunity}
            "snmp_get_enabled" = ${SnmpGetEnabled}
            "snmp_get_port" = ${SnmpGetPort}
            "snmp_sys_contact" = ${SnmpSysContact}
            "snmp_sys_location" = ${SnmpSysLocation}
            "snmp_trap_enabled" = ${SnmpTrapEnabled}
            "snmp_trap_host" = ${SnmpTrapHost}
            "snmp_trap_port" = ${SnmpTrapPort}
        }

        return $PSO
    }

}

