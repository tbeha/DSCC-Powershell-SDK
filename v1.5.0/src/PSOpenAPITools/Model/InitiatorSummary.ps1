#
# Data Services Cloud Console API
# Data Services Cloud Console API
# Version: 1.5.0
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Address
Address of the initiator. 
.PARAMETER Id
Identifier for an initiator.
.PARAMETER IpAddress
IP address of the initiator.
.PARAMETER Name
Name of the initiator.
.PARAMETER Protocol
protocol supported are : FC ,iSCSI or NVMe
.PARAMETER Systems
system IDs to which the initiator belongs to.
.OUTPUTS

InitiatorSummary<PSCustomObject>
#>

function Initialize-InitiatorSummary {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Address},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Id},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${IpAddress},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Protocol},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${Systems}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => InitiatorSummary' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "address" = ${Address}
            "id" = ${Id}
            "ipAddress" = ${IpAddress}
            "name" = ${Name}
            "protocol" = ${Protocol}
            "systems" = ${Systems}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to InitiatorSummary<PSCustomObject>

.DESCRIPTION

Convert from JSON to InitiatorSummary<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

InitiatorSummary<PSCustomObject>
#>
function ConvertFrom-JsonToInitiatorSummary {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => InitiatorSummary' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in InitiatorSummary
        $AllProperties = ("address", "id", "ipAddress", "name", "protocol", "systems")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "address"))) { #optional property not found
            $Address = $null
        } else {
            $Address = $JsonParameters.PSobject.Properties["address"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) { #optional property not found
            $Id = $null
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ipAddress"))) { #optional property not found
            $IpAddress = $null
        } else {
            $IpAddress = $JsonParameters.PSobject.Properties["ipAddress"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) { #optional property not found
            $Name = $null
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "protocol"))) { #optional property not found
            $Protocol = $null
        } else {
            $Protocol = $JsonParameters.PSobject.Properties["protocol"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "systems"))) { #optional property not found
            $Systems = $null
        } else {
            $Systems = $JsonParameters.PSobject.Properties["systems"].value
        }

        $PSO = [PSCustomObject]@{
            "address" = ${Address}
            "id" = ${Id}
            "ipAddress" = ${IpAddress}
            "name" = ${Name}
            "protocol" = ${Protocol}
            "systems" = ${Systems}
        }

        return $PSO
    }

}

