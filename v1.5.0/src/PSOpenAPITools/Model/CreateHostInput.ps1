#
# Data Services Cloud Console API
# Data Services Cloud Console API
# Version: 1.5.0
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Comment
Comment
.PARAMETER Contact
Contact information
.PARAMETER Fqdn
Fully qualified domain name of the host.
.PARAMETER HostGroupIds
List of hostgroup IDs
.PARAMETER InitiatorIds
List of ids of existing initiators
.PARAMETER InitiatorsToCreate
List of initiators to be created and added to this host
.PARAMETER IpAddress
IP address of the host.
.PARAMETER Location
location.
.PARAMETER Model
Model
.PARAMETER Name
Name of the host.
.PARAMETER OperatingSystem
Host operating system. Possible Values are: - AIX - Apple - Citrix Hypervisor(XenServer) - HP-UX - IBM VIO Server - InForm - NetApp/ONTAP - OE Linux UEK - OpenVMS - Oracle VM x86 - RHE Linux - RHE Virtualization - Solaris - SuSE Linux - SuSE Virtualization - Ubuntu - VMware (ESXi) - Windows Server
.PARAMETER Persona
Host persona details.
.PARAMETER Protocol
protocol
.PARAMETER Subnet
subnet.
.PARAMETER UserCreated
Indicates whether user created host or discovered host. value should always be set as ""true"". API will internally override the passed value to set it as ""true"".
.OUTPUTS

CreateHostInput<PSCustomObject>
#>

function Initialize-CreateHostInput {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Comment},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Contact},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Fqdn},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${HostGroupIds},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${InitiatorIds},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${InitiatorsToCreate},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${IpAddress},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Location},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Model},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("AIX", "Apple", "Citrix Hypervisor(XenServer)", "HP-UX", "IBM VIO Server", "InForm", "NetApp/ONTAP", "OE Linux UEK", "OpenVMS", "Oracle VM x86", "RHE Linux", "RHE Virtualization", "Solaris", "SuSE Linux", "SuSE Virtualization", "Ubuntu", "VMware (ESXi)", "Windows Server")]
        [String]
        ${OperatingSystem},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Persona},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Protocol},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Subnet},
        [Parameter(Position = 14, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${UserCreated}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => CreateHostInput' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "comment" = ${Comment}
            "contact" = ${Contact}
            "fqdn" = ${Fqdn}
            "hostGroupIds" = ${HostGroupIds}
            "initiatorIds" = ${InitiatorIds}
            "initiatorsToCreate" = ${InitiatorsToCreate}
            "ipAddress" = ${IpAddress}
            "location" = ${Location}
            "model" = ${Model}
            "name" = ${Name}
            "operatingSystem" = ${OperatingSystem}
            "persona" = ${Persona}
            "protocol" = ${Protocol}
            "subnet" = ${Subnet}
            "userCreated" = ${UserCreated}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to CreateHostInput<PSCustomObject>

.DESCRIPTION

Convert from JSON to CreateHostInput<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

CreateHostInput<PSCustomObject>
#>
function ConvertFrom-JsonToCreateHostInput {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => CreateHostInput' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in CreateHostInput
        $AllProperties = ("comment", "contact", "fqdn", "hostGroupIds", "initiatorIds", "initiatorsToCreate", "ipAddress", "location", "model", "name", "operatingSystem", "persona", "protocol", "subnet", "userCreated")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'name' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) {
            throw "Error! JSON cannot be serialized due to the required property 'name' missing."
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "operatingSystem"))) {
            throw "Error! JSON cannot be serialized due to the required property 'operatingSystem' missing."
        } else {
            $OperatingSystem = $JsonParameters.PSobject.Properties["operatingSystem"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "comment"))) { #optional property not found
            $Comment = $null
        } else {
            $Comment = $JsonParameters.PSobject.Properties["comment"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "contact"))) { #optional property not found
            $Contact = $null
        } else {
            $Contact = $JsonParameters.PSobject.Properties["contact"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "fqdn"))) { #optional property not found
            $Fqdn = $null
        } else {
            $Fqdn = $JsonParameters.PSobject.Properties["fqdn"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "hostGroupIds"))) { #optional property not found
            $HostGroupIds = $null
        } else {
            $HostGroupIds = $JsonParameters.PSobject.Properties["hostGroupIds"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "initiatorIds"))) { #optional property not found
            $InitiatorIds = $null
        } else {
            $InitiatorIds = $JsonParameters.PSobject.Properties["initiatorIds"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "initiatorsToCreate"))) { #optional property not found
            $InitiatorsToCreate = $null
        } else {
            $InitiatorsToCreate = $JsonParameters.PSobject.Properties["initiatorsToCreate"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ipAddress"))) { #optional property not found
            $IpAddress = $null
        } else {
            $IpAddress = $JsonParameters.PSobject.Properties["ipAddress"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "location"))) { #optional property not found
            $Location = $null
        } else {
            $Location = $JsonParameters.PSobject.Properties["location"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "model"))) { #optional property not found
            $Model = $null
        } else {
            $Model = $JsonParameters.PSobject.Properties["model"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "persona"))) { #optional property not found
            $Persona = $null
        } else {
            $Persona = $JsonParameters.PSobject.Properties["persona"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "protocol"))) { #optional property not found
            $Protocol = $null
        } else {
            $Protocol = $JsonParameters.PSobject.Properties["protocol"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "subnet"))) { #optional property not found
            $Subnet = $null
        } else {
            $Subnet = $JsonParameters.PSobject.Properties["subnet"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "userCreated"))) { #optional property not found
            $UserCreated = $null
        } else {
            $UserCreated = $JsonParameters.PSobject.Properties["userCreated"].value
        }

        $PSO = [PSCustomObject]@{
            "comment" = ${Comment}
            "contact" = ${Contact}
            "fqdn" = ${Fqdn}
            "hostGroupIds" = ${HostGroupIds}
            "initiatorIds" = ${InitiatorIds}
            "initiatorsToCreate" = ${InitiatorsToCreate}
            "ipAddress" = ${IpAddress}
            "location" = ${Location}
            "model" = ${Model}
            "name" = ${Name}
            "operatingSystem" = ${OperatingSystem}
            "persona" = ${Persona}
            "protocol" = ${Protocol}
            "subnet" = ${Subnet}
            "userCreated" = ${UserCreated}
        }

        return $PSO
    }

}

