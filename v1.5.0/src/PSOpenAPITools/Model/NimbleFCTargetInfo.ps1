#
# Data Services Cloud Console API
# Data Services Cloud Console API
# Version: 1.5.0
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Information about the Fibre Channel target.

.PARAMETER TargetFcid
FCID assigned to the Fibre Channel target port.
.PARAMETER TargetPortArrayName
Name of the array hosting the Fibre Channel target port.
.PARAMETER TargetPortCtrlrName
Name (A or B) of the controller to which the port belongs.
.PARAMETER TargetPortInterfaceName
Name of the interface hosted on the Fibre Channel target port.
.PARAMETER TargetWwnn
WWNN (World Wide Node Name) of the Fibre Channel target port.
.PARAMETER TargetWwpn
WWPN (World Wide Port Name) of the Fibre Channel target port.
.OUTPUTS

NimbleFCTargetInfo<PSCustomObject>
#>

function Initialize-NimbleFCTargetInfo {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${TargetFcid},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${TargetPortArrayName},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${TargetPortCtrlrName},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${TargetPortInterfaceName},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${TargetWwnn},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${TargetWwpn}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => NimbleFCTargetInfo' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "target_fcid" = ${TargetFcid}
            "target_port_array_name" = ${TargetPortArrayName}
            "target_port_ctrlr_name" = ${TargetPortCtrlrName}
            "target_port_interface_name" = ${TargetPortInterfaceName}
            "target_wwnn" = ${TargetWwnn}
            "target_wwpn" = ${TargetWwpn}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to NimbleFCTargetInfo<PSCustomObject>

.DESCRIPTION

Convert from JSON to NimbleFCTargetInfo<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

NimbleFCTargetInfo<PSCustomObject>
#>
function ConvertFrom-JsonToNimbleFCTargetInfo {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => NimbleFCTargetInfo' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in NimbleFCTargetInfo
        $AllProperties = ("target_fcid", "target_port_array_name", "target_port_ctrlr_name", "target_port_interface_name", "target_wwnn", "target_wwpn")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "target_fcid"))) { #optional property not found
            $TargetFcid = $null
        } else {
            $TargetFcid = $JsonParameters.PSobject.Properties["target_fcid"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "target_port_array_name"))) { #optional property not found
            $TargetPortArrayName = $null
        } else {
            $TargetPortArrayName = $JsonParameters.PSobject.Properties["target_port_array_name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "target_port_ctrlr_name"))) { #optional property not found
            $TargetPortCtrlrName = $null
        } else {
            $TargetPortCtrlrName = $JsonParameters.PSobject.Properties["target_port_ctrlr_name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "target_port_interface_name"))) { #optional property not found
            $TargetPortInterfaceName = $null
        } else {
            $TargetPortInterfaceName = $JsonParameters.PSobject.Properties["target_port_interface_name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "target_wwnn"))) { #optional property not found
            $TargetWwnn = $null
        } else {
            $TargetWwnn = $JsonParameters.PSobject.Properties["target_wwnn"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "target_wwpn"))) { #optional property not found
            $TargetWwpn = $null
        } else {
            $TargetWwpn = $JsonParameters.PSobject.Properties["target_wwpn"].value
        }

        $PSO = [PSCustomObject]@{
            "target_fcid" = ${TargetFcid}
            "target_port_array_name" = ${TargetPortArrayName}
            "target_port_ctrlr_name" = ${TargetPortCtrlrName}
            "target_port_interface_name" = ${TargetPortInterfaceName}
            "target_wwnn" = ${TargetWwnn}
            "target_wwpn" = ${TargetWwpn}
        }

        return $PSO
    }

}

