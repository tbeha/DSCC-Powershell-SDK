#
# Data Services Cloud Console API
# Data Services Cloud Console API
# Version: 1.5.0
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Edit Nimble volume input.

.PARAMETER AppUuid
Application identifier of volume. String of up to 255 alphanumeric characters, hyphen, colon, dot and underscore are allowed.
.PARAMETER CachingEnabled
Indicate caching the volume is enabled.
.PARAMETER DedupeEnabled
Indicate whether dedupe is enabled.
.PARAMETER Description
Text description of volume. String of up to 255 printable ASCII characters.
.PARAMETER FolderId
ID of the folder holding this volume. An optional NsObjectID. A 42 digit hexadecimal number or the empty string.
.PARAMETER Force
Forcibly offline, reduce size or change read-only status a volume.
.PARAMETER Limit
Limit for the volume as a percentage of volume size. Percentage as integer from 0 to 100.
.PARAMETER LimitIops
IOPS limit for this volume. If limit_iops is not specified when a volume is created, or if limit_iops is set to -1, then the volume has no IOPS limit. If limit_iops is not specified while creating a clone, IOPS limit of parent volume will be used as limit. IOPS limit should be in range [256, 4294967294] or -1 for unlimited. If both limit_iops and limit_mbps are specified, limit_mbps must not be hit before limit_iops. In other words, IOPS and MBPS limits should honor limit_iops _ampersand_amp;lt;= ((limit_mbps MB/s * 2^20 B/MB) / block_size B).
.PARAMETER LimitMbps
Throughput limit for this volume in MB/s. If limit_mbps is not specified when a volume is created, or if limit_mbps is set to -1, then the volume has no MBPS limit. MBPS limit should be in range [1, 4294967294] or -1 for unlimited. If both limit_iops and limit_mbps are specified, limit_mbps must not be hit before limit_iops. In other words, IOPS and MBPS limits should honor limit_iops _ampersand_amp;lt;= ((limit_mbps MB/s * 2^20 B/MB) / block_size B).
.PARAMETER Name
Name of the volume. String of up to 215 alphanumeric, hyphenated, colon, or period-separated characters; but cannot begin with hyphen, colon or period.
.PARAMETER Online
Online state of volume, available for host initiators to establish connections.
.PARAMETER OwnedByGroupId
ID of group that currently owns the volume. A 42 digit hexadecimal number.
.PARAMETER PerfpolicyId
Identifier of the performance policy. After creating a volume, performance policy for the volume can only be changed to another performance policy with same block size. A 42 digit hexadecimal number. `Filter, Sort`
.PARAMETER Size
Volume size in megabytes. Size is required for creating a volume but not for cloning an existing volume.
.OUTPUTS

NimbleEditVolumeInput<PSCustomObject>
#>

function Initialize-NimbleEditVolumeInput {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${AppUuid},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${CachingEnabled},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${DedupeEnabled},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Description},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${FolderId},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${Force},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${Limit},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${LimitIops},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${LimitMbps},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${Online},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${OwnedByGroupId},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${PerfpolicyId},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${Size}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => NimbleEditVolumeInput' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "app_uuid" = ${AppUuid}
            "caching_enabled" = ${CachingEnabled}
            "dedupe_enabled" = ${DedupeEnabled}
            "description" = ${Description}
            "folder_id" = ${FolderId}
            "force" = ${Force}
            "limit" = ${Limit}
            "limit_iops" = ${LimitIops}
            "limit_mbps" = ${LimitMbps}
            "name" = ${Name}
            "online" = ${Online}
            "owned_by_group_id" = ${OwnedByGroupId}
            "perfpolicy_id" = ${PerfpolicyId}
            "size" = ${Size}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to NimbleEditVolumeInput<PSCustomObject>

.DESCRIPTION

Convert from JSON to NimbleEditVolumeInput<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

NimbleEditVolumeInput<PSCustomObject>
#>
function ConvertFrom-JsonToNimbleEditVolumeInput {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => NimbleEditVolumeInput' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in NimbleEditVolumeInput
        $AllProperties = ("app_uuid", "caching_enabled", "dedupe_enabled", "description", "folder_id", "force", "limit", "limit_iops", "limit_mbps", "name", "online", "owned_by_group_id", "perfpolicy_id", "size")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "app_uuid"))) { #optional property not found
            $AppUuid = $null
        } else {
            $AppUuid = $JsonParameters.PSobject.Properties["app_uuid"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "caching_enabled"))) { #optional property not found
            $CachingEnabled = $null
        } else {
            $CachingEnabled = $JsonParameters.PSobject.Properties["caching_enabled"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "dedupe_enabled"))) { #optional property not found
            $DedupeEnabled = $null
        } else {
            $DedupeEnabled = $JsonParameters.PSobject.Properties["dedupe_enabled"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "description"))) { #optional property not found
            $Description = $null
        } else {
            $Description = $JsonParameters.PSobject.Properties["description"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "folder_id"))) { #optional property not found
            $FolderId = $null
        } else {
            $FolderId = $JsonParameters.PSobject.Properties["folder_id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "force"))) { #optional property not found
            $Force = $null
        } else {
            $Force = $JsonParameters.PSobject.Properties["force"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "limit"))) { #optional property not found
            $Limit = $null
        } else {
            $Limit = $JsonParameters.PSobject.Properties["limit"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "limit_iops"))) { #optional property not found
            $LimitIops = $null
        } else {
            $LimitIops = $JsonParameters.PSobject.Properties["limit_iops"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "limit_mbps"))) { #optional property not found
            $LimitMbps = $null
        } else {
            $LimitMbps = $JsonParameters.PSobject.Properties["limit_mbps"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) { #optional property not found
            $Name = $null
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "online"))) { #optional property not found
            $Online = $null
        } else {
            $Online = $JsonParameters.PSobject.Properties["online"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "owned_by_group_id"))) { #optional property not found
            $OwnedByGroupId = $null
        } else {
            $OwnedByGroupId = $JsonParameters.PSobject.Properties["owned_by_group_id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "perfpolicy_id"))) { #optional property not found
            $PerfpolicyId = $null
        } else {
            $PerfpolicyId = $JsonParameters.PSobject.Properties["perfpolicy_id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "size"))) { #optional property not found
            $Size = $null
        } else {
            $Size = $JsonParameters.PSobject.Properties["size"].value
        }

        $PSO = [PSCustomObject]@{
            "app_uuid" = ${AppUuid}
            "caching_enabled" = ${CachingEnabled}
            "dedupe_enabled" = ${DedupeEnabled}
            "description" = ${Description}
            "folder_id" = ${FolderId}
            "force" = ${Force}
            "limit" = ${Limit}
            "limit_iops" = ${LimitIops}
            "limit_mbps" = ${LimitMbps}
            "name" = ${Name}
            "online" = ${Online}
            "owned_by_group_id" = ${OwnedByGroupId}
            "perfpolicy_id" = ${PerfpolicyId}
            "size" = ${Size}
        }

        return $PSO
    }

}

