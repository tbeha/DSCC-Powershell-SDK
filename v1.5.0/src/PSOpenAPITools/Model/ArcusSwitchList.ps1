#
# Data Services Cloud Console API
# Data Services Cloud Console API
# Version: 1.5.0
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER ActiveIPAddress
Switch active IP Address
.PARAMETER AssociatedLinks
Associated Links Details
.PARAMETER CustomerId
customerId
.PARAMETER DhcpServers
No description available.
.PARAMETER Displayname
Name to be used for display purposes
.PARAMETER Domain
Domain that the resource belongs to
.PARAMETER FanState
No description available.
.PARAMETER FwVersion
Switch firmware version
.PARAMETER Generation
generation `Filter, Sort`
.PARAMETER Id
Unique Identifier of the resource. `Filter`
.PARAMETER LocateEnabled
Indicates if the locate beacon is enabled or not
.PARAMETER MacAddress
MAC address of the switch
.PARAMETER Manufacturing
No description available.
.PARAMETER Mode
Switch mode
.PARAMETER Name
Name of the resource. `Filter`
.PARAMETER PrimaryPath
Switch primary path state
.PARAMETER Ps1State
No description available.
.PARAMETER Ps2State
No description available.
.PARAMETER ResourceUri
resourceUri for detailed switch object
.PARAMETER SecondaryPath
Switch secondary path state
.PARAMETER State
No description available.
.PARAMETER SwitchId
ID of the resource
.PARAMETER SystemId
SystemUid/Serial Number  of the array.
.PARAMETER TemperatureDetail
Switch mode
.PARAMETER TemperatureState
No description available.
.PARAMETER Type
type
.PARAMETER Vlans
No description available.
.OUTPUTS

ArcusSwitchList<PSCustomObject>
#>

function Initialize-ArcusSwitchList {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ActiveIPAddress},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${AssociatedLinks},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${CustomerId},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${DhcpServers},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Displayname},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Domain},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${FanState},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${FwVersion},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Generation},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Id},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${LocateEnabled},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${MacAddress},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Manufacturing},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Mode},
        [Parameter(Position = 14, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 15, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${PrimaryPath},
        [Parameter(Position = 16, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Ps1State},
        [Parameter(Position = 17, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Ps2State},
        [Parameter(Position = 18, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ResourceUri},
        [Parameter(Position = 19, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SecondaryPath},
        [Parameter(Position = 20, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${State},
        [Parameter(Position = 21, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${SwitchId},
        [Parameter(Position = 22, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SystemId},
        [Parameter(Position = 23, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${TemperatureDetail},
        [Parameter(Position = 24, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${TemperatureState},
        [Parameter(Position = 25, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Type},
        [Parameter(Position = 26, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Vlans}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => ArcusSwitchList' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "activeIPAddress" = ${ActiveIPAddress}
            "associatedLinks" = ${AssociatedLinks}
            "customerId" = ${CustomerId}
            "dhcpServers" = ${DhcpServers}
            "displayname" = ${Displayname}
            "domain" = ${Domain}
            "fanState" = ${FanState}
            "fwVersion" = ${FwVersion}
            "generation" = ${Generation}
            "id" = ${Id}
            "locateEnabled" = ${LocateEnabled}
            "macAddress" = ${MacAddress}
            "manufacturing" = ${Manufacturing}
            "mode" = ${Mode}
            "name" = ${Name}
            "primaryPath" = ${PrimaryPath}
            "ps1State" = ${Ps1State}
            "ps2State" = ${Ps2State}
            "resourceUri" = ${ResourceUri}
            "secondaryPath" = ${SecondaryPath}
            "state" = ${State}
            "switchId" = ${SwitchId}
            "systemId" = ${SystemId}
            "temperatureDetail" = ${TemperatureDetail}
            "temperatureState" = ${TemperatureState}
            "type" = ${Type}
            "vlans" = ${Vlans}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to ArcusSwitchList<PSCustomObject>

.DESCRIPTION

Convert from JSON to ArcusSwitchList<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

ArcusSwitchList<PSCustomObject>
#>
function ConvertFrom-JsonToArcusSwitchList {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => ArcusSwitchList' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in ArcusSwitchList
        $AllProperties = ("activeIPAddress", "associatedLinks", "customerId", "dhcpServers", "displayname", "domain", "fanState", "fwVersion", "generation", "id", "locateEnabled", "macAddress", "manufacturing", "mode", "name", "primaryPath", "ps1State", "ps2State", "resourceUri", "secondaryPath", "state", "switchId", "systemId", "temperatureDetail", "temperatureState", "type", "vlans")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "activeIPAddress"))) { #optional property not found
            $ActiveIPAddress = $null
        } else {
            $ActiveIPAddress = $JsonParameters.PSobject.Properties["activeIPAddress"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "associatedLinks"))) { #optional property not found
            $AssociatedLinks = $null
        } else {
            $AssociatedLinks = $JsonParameters.PSobject.Properties["associatedLinks"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "customerId"))) { #optional property not found
            $CustomerId = $null
        } else {
            $CustomerId = $JsonParameters.PSobject.Properties["customerId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "dhcpServers"))) { #optional property not found
            $DhcpServers = $null
        } else {
            $DhcpServers = $JsonParameters.PSobject.Properties["dhcpServers"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "displayname"))) { #optional property not found
            $Displayname = $null
        } else {
            $Displayname = $JsonParameters.PSobject.Properties["displayname"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "domain"))) { #optional property not found
            $Domain = $null
        } else {
            $Domain = $JsonParameters.PSobject.Properties["domain"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "fanState"))) { #optional property not found
            $FanState = $null
        } else {
            $FanState = $JsonParameters.PSobject.Properties["fanState"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "fwVersion"))) { #optional property not found
            $FwVersion = $null
        } else {
            $FwVersion = $JsonParameters.PSobject.Properties["fwVersion"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "generation"))) { #optional property not found
            $Generation = $null
        } else {
            $Generation = $JsonParameters.PSobject.Properties["generation"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) { #optional property not found
            $Id = $null
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "locateEnabled"))) { #optional property not found
            $LocateEnabled = $null
        } else {
            $LocateEnabled = $JsonParameters.PSobject.Properties["locateEnabled"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "macAddress"))) { #optional property not found
            $MacAddress = $null
        } else {
            $MacAddress = $JsonParameters.PSobject.Properties["macAddress"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "manufacturing"))) { #optional property not found
            $Manufacturing = $null
        } else {
            $Manufacturing = $JsonParameters.PSobject.Properties["manufacturing"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "mode"))) { #optional property not found
            $Mode = $null
        } else {
            $Mode = $JsonParameters.PSobject.Properties["mode"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) { #optional property not found
            $Name = $null
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "primaryPath"))) { #optional property not found
            $PrimaryPath = $null
        } else {
            $PrimaryPath = $JsonParameters.PSobject.Properties["primaryPath"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ps1State"))) { #optional property not found
            $Ps1State = $null
        } else {
            $Ps1State = $JsonParameters.PSobject.Properties["ps1State"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ps2State"))) { #optional property not found
            $Ps2State = $null
        } else {
            $Ps2State = $JsonParameters.PSobject.Properties["ps2State"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "resourceUri"))) { #optional property not found
            $ResourceUri = $null
        } else {
            $ResourceUri = $JsonParameters.PSobject.Properties["resourceUri"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "secondaryPath"))) { #optional property not found
            $SecondaryPath = $null
        } else {
            $SecondaryPath = $JsonParameters.PSobject.Properties["secondaryPath"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "state"))) { #optional property not found
            $State = $null
        } else {
            $State = $JsonParameters.PSobject.Properties["state"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "switchId"))) { #optional property not found
            $SwitchId = $null
        } else {
            $SwitchId = $JsonParameters.PSobject.Properties["switchId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "systemId"))) { #optional property not found
            $SystemId = $null
        } else {
            $SystemId = $JsonParameters.PSobject.Properties["systemId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "temperatureDetail"))) { #optional property not found
            $TemperatureDetail = $null
        } else {
            $TemperatureDetail = $JsonParameters.PSobject.Properties["temperatureDetail"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "temperatureState"))) { #optional property not found
            $TemperatureState = $null
        } else {
            $TemperatureState = $JsonParameters.PSobject.Properties["temperatureState"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "type"))) { #optional property not found
            $Type = $null
        } else {
            $Type = $JsonParameters.PSobject.Properties["type"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "vlans"))) { #optional property not found
            $Vlans = $null
        } else {
            $Vlans = $JsonParameters.PSobject.Properties["vlans"].value
        }

        $PSO = [PSCustomObject]@{
            "activeIPAddress" = ${ActiveIPAddress}
            "associatedLinks" = ${AssociatedLinks}
            "customerId" = ${CustomerId}
            "dhcpServers" = ${DhcpServers}
            "displayname" = ${Displayname}
            "domain" = ${Domain}
            "fanState" = ${FanState}
            "fwVersion" = ${FwVersion}
            "generation" = ${Generation}
            "id" = ${Id}
            "locateEnabled" = ${LocateEnabled}
            "macAddress" = ${MacAddress}
            "manufacturing" = ${Manufacturing}
            "mode" = ${Mode}
            "name" = ${Name}
            "primaryPath" = ${PrimaryPath}
            "ps1State" = ${Ps1State}
            "ps2State" = ${Ps2State}
            "resourceUri" = ${ResourceUri}
            "secondaryPath" = ${SecondaryPath}
            "state" = ${State}
            "switchId" = ${SwitchId}
            "systemId" = ${SystemId}
            "temperatureDetail" = ${TemperatureDetail}
            "temperatureState" = ${TemperatureState}
            "type" = ${Type}
            "vlans" = ${Vlans}
        }

        return $PSO
    }

}

