#
# Data Services Cloud Console API
# Data Services Cloud Console API
# Version: 1.5.0
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Request body for editing VMware Storage Container

.PARAMETER Comment
Comments for the object set to be modified
.PARAMETER HostProximity
List of member object to set proximity for host and rcopy groups
.PARAMETER Members
List of members of the object set to be modified
.PARAMETER Name
Storage Container Name.
.OUTPUTS

EditvVolSCInput<PSCustomObject>
#>

function Initialize-EditvVolSCInput {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Comment},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${HostProximity},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${Members},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => EditvVolSCInput' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "comment" = ${Comment}
            "hostProximity" = ${HostProximity}
            "members" = ${Members}
            "name" = ${Name}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to EditvVolSCInput<PSCustomObject>

.DESCRIPTION

Convert from JSON to EditvVolSCInput<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

EditvVolSCInput<PSCustomObject>
#>
function ConvertFrom-JsonToEditvVolSCInput {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => EditvVolSCInput' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in EditvVolSCInput
        $AllProperties = ("comment", "hostProximity", "members", "name")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "comment"))) { #optional property not found
            $Comment = $null
        } else {
            $Comment = $JsonParameters.PSobject.Properties["comment"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "hostProximity"))) { #optional property not found
            $HostProximity = $null
        } else {
            $HostProximity = $JsonParameters.PSobject.Properties["hostProximity"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "members"))) { #optional property not found
            $Members = $null
        } else {
            $Members = $JsonParameters.PSobject.Properties["members"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) { #optional property not found
            $Name = $null
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        $PSO = [PSCustomObject]@{
            "comment" = ${Comment}
            "hostProximity" = ${HostProximity}
            "members" = ${Members}
            "name" = ${Name}
        }

        return $PSO
    }

}

