#
# Data Services Cloud Console API
# Data Services Cloud Console API
# Version: 1.5.0
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
Identifier for network settings. `Filter`
.PARAMETER Name
Name of the network configuration. Possible values: 'active', 'backup', 'draft'. `Filter, Sort`
.PARAMETER Role
Role of network configuration. Possible values: 'active', 'backup', 'draft'.  `Filter, Sort`
.PARAMETER ActiveSince
Start time of activity.
.PARAMETER ArrayList
List of array network configs.
.PARAMETER AssociatedLinks
Associated Links Details
.PARAMETER ConsoleUri
consoleUri for detailed storage object
.PARAMETER CreationTime
Time when this net configuration was created.
.PARAMETER CustomerId
customerId
.PARAMETER Generation
generation
.PARAMETER GroupLeaderArray
Name of the group leader array.
.PARAMETER IscsiAutomaticConnectionMethod
Indicates whether automatic connection method is enabled.
.PARAMETER IscsiConnectionRebalancing
Indicates whether rebalancing is enabled.
.PARAMETER LastActive
Time of last activity.
.PARAMETER LastModified
Time when this network configuration was last modified.
.PARAMETER MgmtIp
Management IP address for the Group.
.PARAMETER ResourceUri
Link to the object URI
.PARAMETER RouteList
List of static routes.
.PARAMETER SecondaryMgmtIp
Secondary management IP address for the Group.
.PARAMETER SubnetList
List of subnet configs.
.PARAMETER Type
type
.OUTPUTS

NimbleNetworkSettingsListItemsInner<PSCustomObject>
#>

function Initialize-NimbleNetworkSettingsListItemsInner {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Role},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${ActiveSince},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${ArrayList},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${AssociatedLinks},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ConsoleUri},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${CreationTime},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${CustomerId},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Generation},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${GroupLeaderArray},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${IscsiAutomaticConnectionMethod},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${IscsiConnectionRebalancing},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${LastActive},
        [Parameter(Position = 14, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${LastModified},
        [Parameter(Position = 15, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${MgmtIp},
        [Parameter(Position = 16, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ResourceUri},
        [Parameter(Position = 17, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${RouteList},
        [Parameter(Position = 18, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SecondaryMgmtIp},
        [Parameter(Position = 19, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${SubnetList},
        [Parameter(Position = 20, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Type}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => NimbleNetworkSettingsListItemsInner' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "name" = ${Name}
            "role" = ${Role}
            "active_since" = ${ActiveSince}
            "array_list" = ${ArrayList}
            "associatedLinks" = ${AssociatedLinks}
            "consoleUri" = ${ConsoleUri}
            "creation_time" = ${CreationTime}
            "customerId" = ${CustomerId}
            "generation" = ${Generation}
            "group_leader_array" = ${GroupLeaderArray}
            "iscsi_automatic_connection_method" = ${IscsiAutomaticConnectionMethod}
            "iscsi_connection_rebalancing" = ${IscsiConnectionRebalancing}
            "last_active" = ${LastActive}
            "last_modified" = ${LastModified}
            "mgmt_ip" = ${MgmtIp}
            "resourceUri" = ${ResourceUri}
            "route_list" = ${RouteList}
            "secondary_mgmt_ip" = ${SecondaryMgmtIp}
            "subnet_list" = ${SubnetList}
            "type" = ${Type}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to NimbleNetworkSettingsListItemsInner<PSCustomObject>

.DESCRIPTION

Convert from JSON to NimbleNetworkSettingsListItemsInner<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

NimbleNetworkSettingsListItemsInner<PSCustomObject>
#>
function ConvertFrom-JsonToNimbleNetworkSettingsListItemsInner {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => NimbleNetworkSettingsListItemsInner' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in NimbleNetworkSettingsListItemsInner
        $AllProperties = ("id", "name", "role", "active_since", "array_list", "associatedLinks", "consoleUri", "creation_time", "customerId", "generation", "group_leader_array", "iscsi_automatic_connection_method", "iscsi_connection_rebalancing", "last_active", "last_modified", "mgmt_ip", "resourceUri", "route_list", "secondary_mgmt_ip", "subnet_list", "type")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) { #optional property not found
            $Id = $null
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) { #optional property not found
            $Name = $null
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "role"))) { #optional property not found
            $Role = $null
        } else {
            $Role = $JsonParameters.PSobject.Properties["role"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "active_since"))) { #optional property not found
            $ActiveSince = $null
        } else {
            $ActiveSince = $JsonParameters.PSobject.Properties["active_since"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "array_list"))) { #optional property not found
            $ArrayList = $null
        } else {
            $ArrayList = $JsonParameters.PSobject.Properties["array_list"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "associatedLinks"))) { #optional property not found
            $AssociatedLinks = $null
        } else {
            $AssociatedLinks = $JsonParameters.PSobject.Properties["associatedLinks"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "consoleUri"))) { #optional property not found
            $ConsoleUri = $null
        } else {
            $ConsoleUri = $JsonParameters.PSobject.Properties["consoleUri"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "creation_time"))) { #optional property not found
            $CreationTime = $null
        } else {
            $CreationTime = $JsonParameters.PSobject.Properties["creation_time"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "customerId"))) { #optional property not found
            $CustomerId = $null
        } else {
            $CustomerId = $JsonParameters.PSobject.Properties["customerId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "generation"))) { #optional property not found
            $Generation = $null
        } else {
            $Generation = $JsonParameters.PSobject.Properties["generation"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "group_leader_array"))) { #optional property not found
            $GroupLeaderArray = $null
        } else {
            $GroupLeaderArray = $JsonParameters.PSobject.Properties["group_leader_array"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "iscsi_automatic_connection_method"))) { #optional property not found
            $IscsiAutomaticConnectionMethod = $null
        } else {
            $IscsiAutomaticConnectionMethod = $JsonParameters.PSobject.Properties["iscsi_automatic_connection_method"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "iscsi_connection_rebalancing"))) { #optional property not found
            $IscsiConnectionRebalancing = $null
        } else {
            $IscsiConnectionRebalancing = $JsonParameters.PSobject.Properties["iscsi_connection_rebalancing"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "last_active"))) { #optional property not found
            $LastActive = $null
        } else {
            $LastActive = $JsonParameters.PSobject.Properties["last_active"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "last_modified"))) { #optional property not found
            $LastModified = $null
        } else {
            $LastModified = $JsonParameters.PSobject.Properties["last_modified"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "mgmt_ip"))) { #optional property not found
            $MgmtIp = $null
        } else {
            $MgmtIp = $JsonParameters.PSobject.Properties["mgmt_ip"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "resourceUri"))) { #optional property not found
            $ResourceUri = $null
        } else {
            $ResourceUri = $JsonParameters.PSobject.Properties["resourceUri"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "route_list"))) { #optional property not found
            $RouteList = $null
        } else {
            $RouteList = $JsonParameters.PSobject.Properties["route_list"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "secondary_mgmt_ip"))) { #optional property not found
            $SecondaryMgmtIp = $null
        } else {
            $SecondaryMgmtIp = $JsonParameters.PSobject.Properties["secondary_mgmt_ip"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "subnet_list"))) { #optional property not found
            $SubnetList = $null
        } else {
            $SubnetList = $JsonParameters.PSobject.Properties["subnet_list"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "type"))) { #optional property not found
            $Type = $null
        } else {
            $Type = $JsonParameters.PSobject.Properties["type"].value
        }

        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "name" = ${Name}
            "role" = ${Role}
            "active_since" = ${ActiveSince}
            "array_list" = ${ArrayList}
            "associatedLinks" = ${AssociatedLinks}
            "consoleUri" = ${ConsoleUri}
            "creation_time" = ${CreationTime}
            "customerId" = ${CustomerId}
            "generation" = ${Generation}
            "group_leader_array" = ${GroupLeaderArray}
            "iscsi_automatic_connection_method" = ${IscsiAutomaticConnectionMethod}
            "iscsi_connection_rebalancing" = ${IscsiConnectionRebalancing}
            "last_active" = ${LastActive}
            "last_modified" = ${LastModified}
            "mgmt_ip" = ${MgmtIp}
            "resourceUri" = ${ResourceUri}
            "route_list" = ${RouteList}
            "secondary_mgmt_ip" = ${SecondaryMgmtIp}
            "subnet_list" = ${SubnetList}
            "type" = ${Type}
        }

        return $PSO
    }

}

