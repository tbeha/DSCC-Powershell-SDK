#
# Data Services Cloud Console API
# Data Services Cloud Console API
# Version: 1.5.0
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER ArrayName
Name of the  array . String of up to 64 alphanumeric characters, - and . and : are allowed after first character.
.PARAMETER ArrayId
Identifier for the array. A 42 digit hexadecimal number.
.PARAMETER CtrlrAFcConfig
No description available.
.PARAMETER CtrlrBFcConfig
No description available.
.PARAMETER Id
Identifier for the array. A 42 digit hexadecimal number.
.PARAMETER Name
Name of the  array list. String of up to 64 alphanumeric characters, - and . and : are allowed after first character.
.OUTPUTS

NimbleArraysList<PSCustomObject>
#>

function Initialize-NimbleArraysList {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ArrayName},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ArrayId},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${CtrlrAFcConfig},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${CtrlrBFcConfig},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Id},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => NimbleArraysList' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "array-name" = ${ArrayName}
            "array_id" = ${ArrayId}
            "ctrlr_a_fc_config" = ${CtrlrAFcConfig}
            "ctrlr_b_fc_config" = ${CtrlrBFcConfig}
            "id" = ${Id}
            "name" = ${Name}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to NimbleArraysList<PSCustomObject>

.DESCRIPTION

Convert from JSON to NimbleArraysList<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

NimbleArraysList<PSCustomObject>
#>
function ConvertFrom-JsonToNimbleArraysList {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => NimbleArraysList' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in NimbleArraysList
        $AllProperties = ("array-name", "array_id", "ctrlr_a_fc_config", "ctrlr_b_fc_config", "id", "name")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "array-name"))) { #optional property not found
            $ArrayName = $null
        } else {
            $ArrayName = $JsonParameters.PSobject.Properties["array-name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "array_id"))) { #optional property not found
            $ArrayId = $null
        } else {
            $ArrayId = $JsonParameters.PSobject.Properties["array_id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ctrlr_a_fc_config"))) { #optional property not found
            $CtrlrAFcConfig = $null
        } else {
            $CtrlrAFcConfig = $JsonParameters.PSobject.Properties["ctrlr_a_fc_config"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ctrlr_b_fc_config"))) { #optional property not found
            $CtrlrBFcConfig = $null
        } else {
            $CtrlrBFcConfig = $JsonParameters.PSobject.Properties["ctrlr_b_fc_config"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) { #optional property not found
            $Id = $null
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) { #optional property not found
            $Name = $null
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        $PSO = [PSCustomObject]@{
            "array-name" = ${ArrayName}
            "array_id" = ${ArrayId}
            "ctrlr_a_fc_config" = ${CtrlrAFcConfig}
            "ctrlr_b_fc_config" = ${CtrlrBFcConfig}
            "id" = ${Id}
            "name" = ${Name}
        }

        return $PSO
    }

}

