#
# Data Services Cloud Console API
# Data Services Cloud Console API
# Version: 1.5.0
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER OperationalState
Status of vlan
.PARAMETER VlanId
Vlan ID
.PARAMETER VlanName
Vlan Name
.OUTPUTS

SwitchDeviceVlanInner<PSCustomObject>
#>

function Initialize-SwitchDeviceVlanInner {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${OperationalState},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${VlanId},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${VlanName}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => SwitchDeviceVlanInner' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "operationalState" = ${OperationalState}
            "vlanId" = ${VlanId}
            "vlanName" = ${VlanName}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to SwitchDeviceVlanInner<PSCustomObject>

.DESCRIPTION

Convert from JSON to SwitchDeviceVlanInner<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

SwitchDeviceVlanInner<PSCustomObject>
#>
function ConvertFrom-JsonToSwitchDeviceVlanInner {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => SwitchDeviceVlanInner' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in SwitchDeviceVlanInner
        $AllProperties = ("operationalState", "vlanId", "vlanName")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "operationalState"))) { #optional property not found
            $OperationalState = $null
        } else {
            $OperationalState = $JsonParameters.PSobject.Properties["operationalState"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "vlanId"))) { #optional property not found
            $VlanId = $null
        } else {
            $VlanId = $JsonParameters.PSobject.Properties["vlanId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "vlanName"))) { #optional property not found
            $VlanName = $null
        } else {
            $VlanName = $JsonParameters.PSobject.Properties["vlanName"].value
        }

        $PSO = [PSCustomObject]@{
            "operationalState" = ${OperationalState}
            "vlanId" = ${VlanId}
            "vlanName" = ${VlanName}
        }

        return $PSO
    }

}

