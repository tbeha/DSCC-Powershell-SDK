#
# Data Services Cloud Console API
# Data Services Cloud Console API
# Version: 1.5.0
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER RequestUri
requestUri for detailed application-summary object
.PARAMETER AppCategoryId
Identifier of the application category associated with the space domain.
.PARAMETER AppCategoryName
Name of the application category associated with the space domain.
.PARAMETER BlockSize
Block size in bytes of volumes belonging to the space domain.
.PARAMETER CloneRatio
Clone savings for the space domain expressed as ratio.
.PARAMETER CompressedUsageBytes
Compressed usage of volumes and snapshots in the space domain.
.PARAMETER CompressionRatio
Compression savings for the space domain expressed as ratio.
.PARAMETER DedupeRatio
Deduplication savings for the space domain expressed as ratio.
.PARAMETER Deduped
Volumes in space domain are deduplicated by default.
.PARAMETER Encrypted
Volumes in space domain are encrypted.
.PARAMETER Id
Identifier of the application summery.
.PARAMETER LogicalDedupeUsage
Logical space usage of volumes when deduped.
.PARAMETER PhysicalDedupeUsage
Physical space usage of volumes including snapshots when deduped.
.PARAMETER PoolId
Identifier associated with the pool in the storage pool table.
.PARAMETER PoolName
Name of the pool containing the space domain.
.PARAMETER SavingsClone
Space usage savings in the space domain due to cloning of volumes.
.PARAMETER SavingsCompression
Space usage savings in the space domain due to compression.
.PARAMETER SavingsDedupe
Space usage savings in the space domain due to deduplication.
.PARAMETER SnapLogicalUsage
Logical usage of snapshots in the space domain.
.PARAMETER UncompressedUsageBytes
Uncompressed usage of volumes and snapshots in the space domain.
.PARAMETER Usage
Physical space usage of volumes in the space domain.
.PARAMETER VolLogicalUsage
Logical usage of volumes in the space domain.
.PARAMETER VolMappedUsage
Mapped usage of volumes in the space domain, useful for computing clone savings.
.PARAMETER AssociatedLinks
Associated Links Details
.PARAMETER ConsoleUri
consoleUri for detailed storage object
.PARAMETER CustomerId
customerId
.PARAMETER DedupedVolumeCount
Number of deduplicated volumes belonging to the space domain.
.PARAMETER Generation
generation
.PARAMETER PerfPolicyNames
Name of the performance policies associated with the space domain.
.PARAMETER ResourceUri
Link to the object URI
.PARAMETER SampleRate
Sample rate value.
.PARAMETER Type
type
.PARAMETER VolumeCount
Number of volumes belonging to the space domain.
.PARAMETER Volumes
Volumes belonging to the space domain.
.OUTPUTS

NimbleSpaceDomainDetailsWithRequestUri<PSCustomObject>
#>

function Initialize-NimbleSpaceDomainDetailsWithRequestUri {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${RequestUri},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${AppCategoryId},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${AppCategoryName},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${BlockSize},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Decimal]]
        ${CloneRatio},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${CompressedUsageBytes},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Decimal]]
        ${CompressionRatio},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Decimal]]
        ${DedupeRatio},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${Deduped},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${Encrypted},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Id},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${LogicalDedupeUsage},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${PhysicalDedupeUsage},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${PoolId},
        [Parameter(Position = 14, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${PoolName},
        [Parameter(Position = 15, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${SavingsClone},
        [Parameter(Position = 16, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${SavingsCompression},
        [Parameter(Position = 17, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${SavingsDedupe},
        [Parameter(Position = 18, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${SnapLogicalUsage},
        [Parameter(Position = 19, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${UncompressedUsageBytes},
        [Parameter(Position = 20, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${Usage},
        [Parameter(Position = 21, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${VolLogicalUsage},
        [Parameter(Position = 22, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${VolMappedUsage},
        [Parameter(Position = 23, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${AssociatedLinks},
        [Parameter(Position = 24, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ConsoleUri},
        [Parameter(Position = 25, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${CustomerId},
        [Parameter(Position = 26, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${DedupedVolumeCount},
        [Parameter(Position = 27, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Generation},
        [Parameter(Position = 28, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${PerfPolicyNames},
        [Parameter(Position = 29, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ResourceUri},
        [Parameter(Position = 30, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${SampleRate},
        [Parameter(Position = 31, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Type},
        [Parameter(Position = 32, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${VolumeCount},
        [Parameter(Position = 33, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Volumes}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => NimbleSpaceDomainDetailsWithRequestUri' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "requestUri" = ${RequestUri}
            "app_category_id" = ${AppCategoryId}
            "app_category_name" = ${AppCategoryName}
            "block_size" = ${BlockSize}
            "clone_ratio" = ${CloneRatio}
            "compressed_usage_bytes" = ${CompressedUsageBytes}
            "compression_ratio" = ${CompressionRatio}
            "dedupe_ratio" = ${DedupeRatio}
            "deduped" = ${Deduped}
            "encrypted" = ${Encrypted}
            "id" = ${Id}
            "logical_dedupe_usage" = ${LogicalDedupeUsage}
            "physical_dedupe_usage" = ${PhysicalDedupeUsage}
            "pool_id" = ${PoolId}
            "pool_name" = ${PoolName}
            "savings_clone" = ${SavingsClone}
            "savings_compression" = ${SavingsCompression}
            "savings_dedupe" = ${SavingsDedupe}
            "snap_logical_usage" = ${SnapLogicalUsage}
            "uncompressed_usage_bytes" = ${UncompressedUsageBytes}
            "usage" = ${Usage}
            "vol_logical_usage" = ${VolLogicalUsage}
            "vol_mapped_usage" = ${VolMappedUsage}
            "associated_links" = ${AssociatedLinks}
            "consoleUri" = ${ConsoleUri}
            "customerId" = ${CustomerId}
            "deduped_volume_count" = ${DedupedVolumeCount}
            "generation" = ${Generation}
            "perf_policy_names" = ${PerfPolicyNames}
            "resourceUri" = ${ResourceUri}
            "sample_rate" = ${SampleRate}
            "type" = ${Type}
            "volume_count" = ${VolumeCount}
            "volumes" = ${Volumes}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to NimbleSpaceDomainDetailsWithRequestUri<PSCustomObject>

.DESCRIPTION

Convert from JSON to NimbleSpaceDomainDetailsWithRequestUri<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

NimbleSpaceDomainDetailsWithRequestUri<PSCustomObject>
#>
function ConvertFrom-JsonToNimbleSpaceDomainDetailsWithRequestUri {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => NimbleSpaceDomainDetailsWithRequestUri' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in NimbleSpaceDomainDetailsWithRequestUri
        $AllProperties = ("requestUri", "app_category_id", "app_category_name", "block_size", "clone_ratio", "compressed_usage_bytes", "compression_ratio", "dedupe_ratio", "deduped", "encrypted", "id", "logical_dedupe_usage", "physical_dedupe_usage", "pool_id", "pool_name", "savings_clone", "savings_compression", "savings_dedupe", "snap_logical_usage", "uncompressed_usage_bytes", "usage", "vol_logical_usage", "vol_mapped_usage", "associated_links", "consoleUri", "customerId", "deduped_volume_count", "generation", "perf_policy_names", "resourceUri", "sample_rate", "type", "volume_count", "volumes")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "requestUri"))) { #optional property not found
            $RequestUri = $null
        } else {
            $RequestUri = $JsonParameters.PSobject.Properties["requestUri"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "app_category_id"))) { #optional property not found
            $AppCategoryId = $null
        } else {
            $AppCategoryId = $JsonParameters.PSobject.Properties["app_category_id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "app_category_name"))) { #optional property not found
            $AppCategoryName = $null
        } else {
            $AppCategoryName = $JsonParameters.PSobject.Properties["app_category_name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "block_size"))) { #optional property not found
            $BlockSize = $null
        } else {
            $BlockSize = $JsonParameters.PSobject.Properties["block_size"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "clone_ratio"))) { #optional property not found
            $CloneRatio = $null
        } else {
            $CloneRatio = $JsonParameters.PSobject.Properties["clone_ratio"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "compressed_usage_bytes"))) { #optional property not found
            $CompressedUsageBytes = $null
        } else {
            $CompressedUsageBytes = $JsonParameters.PSobject.Properties["compressed_usage_bytes"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "compression_ratio"))) { #optional property not found
            $CompressionRatio = $null
        } else {
            $CompressionRatio = $JsonParameters.PSobject.Properties["compression_ratio"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "dedupe_ratio"))) { #optional property not found
            $DedupeRatio = $null
        } else {
            $DedupeRatio = $JsonParameters.PSobject.Properties["dedupe_ratio"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "deduped"))) { #optional property not found
            $Deduped = $null
        } else {
            $Deduped = $JsonParameters.PSobject.Properties["deduped"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "encrypted"))) { #optional property not found
            $Encrypted = $null
        } else {
            $Encrypted = $JsonParameters.PSobject.Properties["encrypted"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) { #optional property not found
            $Id = $null
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "logical_dedupe_usage"))) { #optional property not found
            $LogicalDedupeUsage = $null
        } else {
            $LogicalDedupeUsage = $JsonParameters.PSobject.Properties["logical_dedupe_usage"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "physical_dedupe_usage"))) { #optional property not found
            $PhysicalDedupeUsage = $null
        } else {
            $PhysicalDedupeUsage = $JsonParameters.PSobject.Properties["physical_dedupe_usage"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "pool_id"))) { #optional property not found
            $PoolId = $null
        } else {
            $PoolId = $JsonParameters.PSobject.Properties["pool_id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "pool_name"))) { #optional property not found
            $PoolName = $null
        } else {
            $PoolName = $JsonParameters.PSobject.Properties["pool_name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "savings_clone"))) { #optional property not found
            $SavingsClone = $null
        } else {
            $SavingsClone = $JsonParameters.PSobject.Properties["savings_clone"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "savings_compression"))) { #optional property not found
            $SavingsCompression = $null
        } else {
            $SavingsCompression = $JsonParameters.PSobject.Properties["savings_compression"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "savings_dedupe"))) { #optional property not found
            $SavingsDedupe = $null
        } else {
            $SavingsDedupe = $JsonParameters.PSobject.Properties["savings_dedupe"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "snap_logical_usage"))) { #optional property not found
            $SnapLogicalUsage = $null
        } else {
            $SnapLogicalUsage = $JsonParameters.PSobject.Properties["snap_logical_usage"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "uncompressed_usage_bytes"))) { #optional property not found
            $UncompressedUsageBytes = $null
        } else {
            $UncompressedUsageBytes = $JsonParameters.PSobject.Properties["uncompressed_usage_bytes"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "usage"))) { #optional property not found
            $Usage = $null
        } else {
            $Usage = $JsonParameters.PSobject.Properties["usage"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "vol_logical_usage"))) { #optional property not found
            $VolLogicalUsage = $null
        } else {
            $VolLogicalUsage = $JsonParameters.PSobject.Properties["vol_logical_usage"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "vol_mapped_usage"))) { #optional property not found
            $VolMappedUsage = $null
        } else {
            $VolMappedUsage = $JsonParameters.PSobject.Properties["vol_mapped_usage"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "associated_links"))) { #optional property not found
            $AssociatedLinks = $null
        } else {
            $AssociatedLinks = $JsonParameters.PSobject.Properties["associated_links"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "consoleUri"))) { #optional property not found
            $ConsoleUri = $null
        } else {
            $ConsoleUri = $JsonParameters.PSobject.Properties["consoleUri"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "customerId"))) { #optional property not found
            $CustomerId = $null
        } else {
            $CustomerId = $JsonParameters.PSobject.Properties["customerId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "deduped_volume_count"))) { #optional property not found
            $DedupedVolumeCount = $null
        } else {
            $DedupedVolumeCount = $JsonParameters.PSobject.Properties["deduped_volume_count"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "generation"))) { #optional property not found
            $Generation = $null
        } else {
            $Generation = $JsonParameters.PSobject.Properties["generation"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "perf_policy_names"))) { #optional property not found
            $PerfPolicyNames = $null
        } else {
            $PerfPolicyNames = $JsonParameters.PSobject.Properties["perf_policy_names"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "resourceUri"))) { #optional property not found
            $ResourceUri = $null
        } else {
            $ResourceUri = $JsonParameters.PSobject.Properties["resourceUri"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "sample_rate"))) { #optional property not found
            $SampleRate = $null
        } else {
            $SampleRate = $JsonParameters.PSobject.Properties["sample_rate"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "type"))) { #optional property not found
            $Type = $null
        } else {
            $Type = $JsonParameters.PSobject.Properties["type"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "volume_count"))) { #optional property not found
            $VolumeCount = $null
        } else {
            $VolumeCount = $JsonParameters.PSobject.Properties["volume_count"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "volumes"))) { #optional property not found
            $Volumes = $null
        } else {
            $Volumes = $JsonParameters.PSobject.Properties["volumes"].value
        }

        $PSO = [PSCustomObject]@{
            "requestUri" = ${RequestUri}
            "app_category_id" = ${AppCategoryId}
            "app_category_name" = ${AppCategoryName}
            "block_size" = ${BlockSize}
            "clone_ratio" = ${CloneRatio}
            "compressed_usage_bytes" = ${CompressedUsageBytes}
            "compression_ratio" = ${CompressionRatio}
            "dedupe_ratio" = ${DedupeRatio}
            "deduped" = ${Deduped}
            "encrypted" = ${Encrypted}
            "id" = ${Id}
            "logical_dedupe_usage" = ${LogicalDedupeUsage}
            "physical_dedupe_usage" = ${PhysicalDedupeUsage}
            "pool_id" = ${PoolId}
            "pool_name" = ${PoolName}
            "savings_clone" = ${SavingsClone}
            "savings_compression" = ${SavingsCompression}
            "savings_dedupe" = ${SavingsDedupe}
            "snap_logical_usage" = ${SnapLogicalUsage}
            "uncompressed_usage_bytes" = ${UncompressedUsageBytes}
            "usage" = ${Usage}
            "vol_logical_usage" = ${VolLogicalUsage}
            "vol_mapped_usage" = ${VolMappedUsage}
            "associated_links" = ${AssociatedLinks}
            "consoleUri" = ${ConsoleUri}
            "customerId" = ${CustomerId}
            "deduped_volume_count" = ${DedupedVolumeCount}
            "generation" = ${Generation}
            "perf_policy_names" = ${PerfPolicyNames}
            "resourceUri" = ${ResourceUri}
            "sample_rate" = ${SampleRate}
            "type" = ${Type}
            "volume_count" = ${VolumeCount}
            "volumes" = ${Volumes}
        }

        return $PSO
    }

}

