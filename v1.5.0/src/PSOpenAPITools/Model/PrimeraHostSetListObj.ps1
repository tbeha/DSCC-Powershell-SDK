#
# Data Services Cloud Console API
# Data Services Cloud Console API
# Version: 1.5.0
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Host Sets details

.PARAMETER AssociatedLinks
Associated Links Details
.PARAMETER Comment
Comment on the Host Set
.PARAMETER Displayname
Name to be used for display purposes
.PARAMETER Domain
Domain name of the Host Set
.PARAMETER Generation
Generation Time of the Resource `Filter, Sort`
.PARAMETER HostSetId
Numeric ID of the resource
.PARAMETER Id
HostSet Resource UID `Filter`
.PARAMETER Members
system ntp addresses `Filter, Sort`
.PARAMETER Name
Host Set Name `Filter, Sort`
.PARAMETER ResourceUri
resourceUri for detailed hostset object
.PARAMETER ScHostGroupId
Host Service HostGroup Id
.PARAMETER SystemUid
Serail Number of the system `Filter`
.PARAMETER SystemWWN
System wwn `Filter, Sort`
.PARAMETER Uri
Uri
.PARAMETER Uuid
HostSet Resource UUID
.OUTPUTS

PrimeraHostSetListObj<PSCustomObject>
#>

function Initialize-PrimeraHostSetListObj {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${AssociatedLinks},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Comment},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Displayname},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Domain},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Generation},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${HostSetId},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Id},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${Members},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ResourceUri},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ScHostGroupId},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SystemUid},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SystemWWN},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Uri},
        [Parameter(Position = 14, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Uuid}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => PrimeraHostSetListObj' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "associatedLinks" = ${AssociatedLinks}
            "comment" = ${Comment}
            "displayname" = ${Displayname}
            "domain" = ${Domain}
            "generation" = ${Generation}
            "hostSetId" = ${HostSetId}
            "id" = ${Id}
            "members" = ${Members}
            "name" = ${Name}
            "resourceUri" = ${ResourceUri}
            "sc_HostGroupId" = ${ScHostGroupId}
            "systemUid" = ${SystemUid}
            "systemWWN" = ${SystemWWN}
            "uri" = ${Uri}
            "uuid" = ${Uuid}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to PrimeraHostSetListObj<PSCustomObject>

.DESCRIPTION

Convert from JSON to PrimeraHostSetListObj<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

PrimeraHostSetListObj<PSCustomObject>
#>
function ConvertFrom-JsonToPrimeraHostSetListObj {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => PrimeraHostSetListObj' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in PrimeraHostSetListObj
        $AllProperties = ("associatedLinks", "comment", "displayname", "domain", "generation", "hostSetId", "id", "members", "name", "resourceUri", "sc_HostGroupId", "systemUid", "systemWWN", "uri", "uuid")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "associatedLinks"))) { #optional property not found
            $AssociatedLinks = $null
        } else {
            $AssociatedLinks = $JsonParameters.PSobject.Properties["associatedLinks"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "comment"))) { #optional property not found
            $Comment = $null
        } else {
            $Comment = $JsonParameters.PSobject.Properties["comment"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "displayname"))) { #optional property not found
            $Displayname = $null
        } else {
            $Displayname = $JsonParameters.PSobject.Properties["displayname"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "domain"))) { #optional property not found
            $Domain = $null
        } else {
            $Domain = $JsonParameters.PSobject.Properties["domain"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "generation"))) { #optional property not found
            $Generation = $null
        } else {
            $Generation = $JsonParameters.PSobject.Properties["generation"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "hostSetId"))) { #optional property not found
            $HostSetId = $null
        } else {
            $HostSetId = $JsonParameters.PSobject.Properties["hostSetId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) { #optional property not found
            $Id = $null
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "members"))) { #optional property not found
            $Members = $null
        } else {
            $Members = $JsonParameters.PSobject.Properties["members"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) { #optional property not found
            $Name = $null
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "resourceUri"))) { #optional property not found
            $ResourceUri = $null
        } else {
            $ResourceUri = $JsonParameters.PSobject.Properties["resourceUri"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "sc_HostGroupId"))) { #optional property not found
            $ScHostGroupId = $null
        } else {
            $ScHostGroupId = $JsonParameters.PSobject.Properties["sc_HostGroupId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "systemUid"))) { #optional property not found
            $SystemUid = $null
        } else {
            $SystemUid = $JsonParameters.PSobject.Properties["systemUid"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "systemWWN"))) { #optional property not found
            $SystemWWN = $null
        } else {
            $SystemWWN = $JsonParameters.PSobject.Properties["systemWWN"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "uri"))) { #optional property not found
            $Uri = $null
        } else {
            $Uri = $JsonParameters.PSobject.Properties["uri"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "uuid"))) { #optional property not found
            $Uuid = $null
        } else {
            $Uuid = $JsonParameters.PSobject.Properties["uuid"].value
        }

        $PSO = [PSCustomObject]@{
            "associatedLinks" = ${AssociatedLinks}
            "comment" = ${Comment}
            "displayname" = ${Displayname}
            "domain" = ${Domain}
            "generation" = ${Generation}
            "hostSetId" = ${HostSetId}
            "id" = ${Id}
            "members" = ${Members}
            "name" = ${Name}
            "resourceUri" = ${ResourceUri}
            "sc_HostGroupId" = ${ScHostGroupId}
            "systemUid" = ${SystemUid}
            "systemWWN" = ${SystemWWN}
            "uri" = ${Uri}
            "uuid" = ${Uuid}
        }

        return $PSO
    }

}

