#
# Data Services Cloud Console API
# Data Services Cloud Console API
# Version: 1.5.0
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER SkipStart
Specifies that protection is not started after recover action is completed.
.PARAMETER SkipSync
Specifies that protection is not synced after recover action is completed.
.PARAMETER TargetName
Replication partner name (target name) on which the recover action to be performed.
.OUTPUTS

RecoverParams<PSCustomObject>
#>

function Initialize-RecoverParams {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${SkipStart},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${SkipSync},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${TargetName}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => RecoverParams' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "skipStart" = ${SkipStart}
            "skipSync" = ${SkipSync}
            "targetName" = ${TargetName}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to RecoverParams<PSCustomObject>

.DESCRIPTION

Convert from JSON to RecoverParams<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

RecoverParams<PSCustomObject>
#>
function ConvertFrom-JsonToRecoverParams {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => RecoverParams' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in RecoverParams
        $AllProperties = ("skipStart", "skipSync", "targetName")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "skipStart"))) { #optional property not found
            $SkipStart = $null
        } else {
            $SkipStart = $JsonParameters.PSobject.Properties["skipStart"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "skipSync"))) { #optional property not found
            $SkipSync = $null
        } else {
            $SkipSync = $JsonParameters.PSobject.Properties["skipSync"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "targetName"))) { #optional property not found
            $TargetName = $null
        } else {
            $TargetName = $JsonParameters.PSobject.Properties["targetName"].value
        }

        $PSO = [PSCustomObject]@{
            "skipStart" = ${SkipStart}
            "skipSync" = ${SkipSync}
            "targetName" = ${TargetName}
        }

        return $PSO
    }

}

