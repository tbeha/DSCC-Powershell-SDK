#
# Data Services Cloud Console API
# Data Services Cloud Console API
# Version: 1.5.0
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Storage container details for a device

.PARAMETER AssociatedLinks
Associated Links Details
.PARAMETER AutoDissmissed
name of the resource
.PARAMETER ConsoleUri
consoleUri for detailed storage object
.PARAMETER CreationTime
No description available.
.PARAMETER Domain
domain of the storage container
.PARAMETER Generation
A monotonically increasing value. This value updates when the resource is updated and can be used as a short way to determine if a resource has changed or which of two different copies of a resource is more up to date.
.PARAMETER HostGroups
Hosts
.PARAMETER Hosts
Hosts
.PARAMETER Id
UID of the storage container
.PARAMETER InUseMiB
space used by the storage container
.PARAMETER Name
name of the resource
.PARAMETER NumOfVMs
no. of VMs in storage container
.PARAMETER NumOfVvols
no. of vVols in storage container
.PARAMETER ProvisionedMiB
provisioned size of storage container
.PARAMETER ResourceUri
resourceUri for detailed snmpUsers object
.PARAMETER ScUuid
sc_uuid of storage container
.PARAMETER SystemUid
systemId of the resource
.PARAMETER SystemWWN
systemWWN of the resource
.PARAMETER TotalMiB
name of the resource
.PARAMETER Type
type of the resource
.PARAMETER Uri
uri for the storage container
.OUTPUTS

ArcusvVolscDetails<PSCustomObject>
#>

function Initialize-ArcusvVolscDetails {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${AssociatedLinks},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${AutoDissmissed},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ConsoleUri},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${CreationTime},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Domain},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${Generation},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${HostGroups},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Hosts},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Id},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${InUseMiB},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${NumOfVMs},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${NumOfVvols},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${ProvisionedMiB},
        [Parameter(Position = 14, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ResourceUri},
        [Parameter(Position = 15, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ScUuid},
        [Parameter(Position = 16, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SystemUid},
        [Parameter(Position = 17, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SystemWWN},
        [Parameter(Position = 18, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${TotalMiB},
        [Parameter(Position = 19, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Type},
        [Parameter(Position = 20, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Uri}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => ArcusvVolscDetails' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "associatedLinks" = ${AssociatedLinks}
            "autoDissmissed" = ${AutoDissmissed}
            "consoleUri" = ${ConsoleUri}
            "creationTime" = ${CreationTime}
            "domain" = ${Domain}
            "generation" = ${Generation}
            "hostGroups" = ${HostGroups}
            "hosts" = ${Hosts}
            "id" = ${Id}
            "inUseMiB" = ${InUseMiB}
            "name" = ${Name}
            "numOfVMs" = ${NumOfVMs}
            "numOfVvols" = ${NumOfVvols}
            "provisionedMiB" = ${ProvisionedMiB}
            "resourceUri" = ${ResourceUri}
            "sc_uuid" = ${ScUuid}
            "systemUid" = ${SystemUid}
            "systemWWN" = ${SystemWWN}
            "totalMiB" = ${TotalMiB}
            "type" = ${Type}
            "uri" = ${Uri}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to ArcusvVolscDetails<PSCustomObject>

.DESCRIPTION

Convert from JSON to ArcusvVolscDetails<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

ArcusvVolscDetails<PSCustomObject>
#>
function ConvertFrom-JsonToArcusvVolscDetails {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => ArcusvVolscDetails' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in ArcusvVolscDetails
        $AllProperties = ("associatedLinks", "autoDissmissed", "consoleUri", "creationTime", "domain", "generation", "hostGroups", "hosts", "id", "inUseMiB", "name", "numOfVMs", "numOfVvols", "provisionedMiB", "resourceUri", "sc_uuid", "systemUid", "systemWWN", "totalMiB", "type", "uri")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "associatedLinks"))) { #optional property not found
            $AssociatedLinks = $null
        } else {
            $AssociatedLinks = $JsonParameters.PSobject.Properties["associatedLinks"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "autoDissmissed"))) { #optional property not found
            $AutoDissmissed = $null
        } else {
            $AutoDissmissed = $JsonParameters.PSobject.Properties["autoDissmissed"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "consoleUri"))) { #optional property not found
            $ConsoleUri = $null
        } else {
            $ConsoleUri = $JsonParameters.PSobject.Properties["consoleUri"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "creationTime"))) { #optional property not found
            $CreationTime = $null
        } else {
            $CreationTime = $JsonParameters.PSobject.Properties["creationTime"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "domain"))) { #optional property not found
            $Domain = $null
        } else {
            $Domain = $JsonParameters.PSobject.Properties["domain"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "generation"))) { #optional property not found
            $Generation = $null
        } else {
            $Generation = $JsonParameters.PSobject.Properties["generation"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "hostGroups"))) { #optional property not found
            $HostGroups = $null
        } else {
            $HostGroups = $JsonParameters.PSobject.Properties["hostGroups"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "hosts"))) { #optional property not found
            $Hosts = $null
        } else {
            $Hosts = $JsonParameters.PSobject.Properties["hosts"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) { #optional property not found
            $Id = $null
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "inUseMiB"))) { #optional property not found
            $InUseMiB = $null
        } else {
            $InUseMiB = $JsonParameters.PSobject.Properties["inUseMiB"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) { #optional property not found
            $Name = $null
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "numOfVMs"))) { #optional property not found
            $NumOfVMs = $null
        } else {
            $NumOfVMs = $JsonParameters.PSobject.Properties["numOfVMs"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "numOfVvols"))) { #optional property not found
            $NumOfVvols = $null
        } else {
            $NumOfVvols = $JsonParameters.PSobject.Properties["numOfVvols"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "provisionedMiB"))) { #optional property not found
            $ProvisionedMiB = $null
        } else {
            $ProvisionedMiB = $JsonParameters.PSobject.Properties["provisionedMiB"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "resourceUri"))) { #optional property not found
            $ResourceUri = $null
        } else {
            $ResourceUri = $JsonParameters.PSobject.Properties["resourceUri"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "sc_uuid"))) { #optional property not found
            $ScUuid = $null
        } else {
            $ScUuid = $JsonParameters.PSobject.Properties["sc_uuid"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "systemUid"))) { #optional property not found
            $SystemUid = $null
        } else {
            $SystemUid = $JsonParameters.PSobject.Properties["systemUid"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "systemWWN"))) { #optional property not found
            $SystemWWN = $null
        } else {
            $SystemWWN = $JsonParameters.PSobject.Properties["systemWWN"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "totalMiB"))) { #optional property not found
            $TotalMiB = $null
        } else {
            $TotalMiB = $JsonParameters.PSobject.Properties["totalMiB"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "type"))) { #optional property not found
            $Type = $null
        } else {
            $Type = $JsonParameters.PSobject.Properties["type"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "uri"))) { #optional property not found
            $Uri = $null
        } else {
            $Uri = $JsonParameters.PSobject.Properties["uri"].value
        }

        $PSO = [PSCustomObject]@{
            "associatedLinks" = ${AssociatedLinks}
            "autoDissmissed" = ${AutoDissmissed}
            "consoleUri" = ${ConsoleUri}
            "creationTime" = ${CreationTime}
            "domain" = ${Domain}
            "generation" = ${Generation}
            "hostGroups" = ${HostGroups}
            "hosts" = ${Hosts}
            "id" = ${Id}
            "inUseMiB" = ${InUseMiB}
            "name" = ${Name}
            "numOfVMs" = ${NumOfVMs}
            "numOfVvols" = ${NumOfVvols}
            "provisionedMiB" = ${ProvisionedMiB}
            "resourceUri" = ${ResourceUri}
            "sc_uuid" = ${ScUuid}
            "systemUid" = ${SystemUid}
            "systemWWN" = ${SystemWWN}
            "totalMiB" = ${TotalMiB}
            "type" = ${Type}
            "uri" = ${Uri}
        }

        return $PSO
    }

}

