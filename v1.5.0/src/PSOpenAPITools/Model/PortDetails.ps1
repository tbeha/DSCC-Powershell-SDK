#
# Data Services Cloud Console API
# Data Services Cloud Console API
# Version: 1.5.0
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER AssociatedLinks
Associated Links Details
.PARAMETER CardType
No description available.
.PARAMETER Class
Fibre Channel class (can be either 2 or 3)
.PARAMETER Class2
Class2 state and configuration
.PARAMETER Config
Configuration state of port
.PARAMETER ConfigMode
Connection mode of the port
.PARAMETER ConnectionType
port connection type
.PARAMETER ConsoleUri
consoleUri for detailed storage object
.PARAMETER CustomerId
customerId
.PARAMETER Devices
No description available.
.PARAMETER Displayname
Name to be used for display purposes
.PARAMETER Domain
Domain that the resource belongs to
.PARAMETER FailoverStatus
Failover status of this port and the partner
.PARAMETER FcData
No description available.
.PARAMETER FwVersion
Firmware version
.PARAMETER Generation
generation
.PARAMETER Id
Unique Identifier of the resource
.PARAMETER InitiatorPorts
No description available.
.PARAMETER InterruptCoalesce
Interrupt Coalesce
.PARAMETER IpData
No description available.
.PARAMETER IscsiData
No description available.
.PARAMETER Label
Label
.PARAMETER Manufacturing
No description available.
.PARAMETER Mode
Current mode the port is in
.PARAMETER ModeChange
Indicates if the mode change is allowed or prohibited
.PARAMETER Name
Name of the resource
.PARAMETER NodeCardId
Unique Identifier of the node adapter card
.PARAMETER NodeId
Unique Identifier of the node
.PARAMETER Partner
No description available.
.PARAMETER PortSfp
No description available.
.PARAMETER PortType
Type of the port based on the device it is connected to
.PARAMETER Position
No description available.
.PARAMETER Protocol
Current protocol the port is in
.PARAMETER RequestUri
requestUri for detailed ports object
.PARAMETER ResourceUri
resourceUri for detailed ports object
.PARAMETER Revision
Revision of the Host Bus Adapter
.PARAMETER SmartSAN
Smart SAN status
.PARAMETER SpeedActual
Actual speed that port is running at
.PARAMETER SpeedConfigured
Speed that is configured to run as
.PARAMETER SpeedMax
Maximum speed that port can run at
.PARAMETER SpeedMin
Minimum speed that port can run at
.PARAMETER State
No description available.
.PARAMETER StateDescription
Detailed descriptions of the port state
.PARAMETER SystemId
SystemUid / SerialNumber of the array
.PARAMETER TgtModeWriteOpt
Target mode write optimization setting
.PARAMETER Type
type
.PARAMETER UniqueWWN
Unique WWN setting
.PARAMETER Vlans
No description available.
.OUTPUTS

PortDetails<PSCustomObject>
#>

function Initialize-PortDetails {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${AssociatedLinks},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${CardType},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Class},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Class2},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Config},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ConfigMode},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ConnectionType},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ConsoleUri},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${CustomerId},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Devices},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Displayname},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Domain},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${FailoverStatus},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${FcData},
        [Parameter(Position = 14, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${FwVersion},
        [Parameter(Position = 15, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Generation},
        [Parameter(Position = 16, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Id},
        [Parameter(Position = 17, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${InitiatorPorts},
        [Parameter(Position = 18, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${InterruptCoalesce},
        [Parameter(Position = 19, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${IpData},
        [Parameter(Position = 20, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${IscsiData},
        [Parameter(Position = 21, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Label},
        [Parameter(Position = 22, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Manufacturing},
        [Parameter(Position = 23, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Mode},
        [Parameter(Position = 24, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ModeChange},
        [Parameter(Position = 25, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 26, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${NodeCardId},
        [Parameter(Position = 27, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${NodeId},
        [Parameter(Position = 28, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Partner},
        [Parameter(Position = 29, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${PortSfp},
        [Parameter(Position = 30, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${PortType},
        [Parameter(Position = 31, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Position},
        [Parameter(Position = 32, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Protocol},
        [Parameter(Position = 33, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${RequestUri},
        [Parameter(Position = 34, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ResourceUri},
        [Parameter(Position = 35, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Revision},
        [Parameter(Position = 36, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SmartSAN},
        [Parameter(Position = 37, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SpeedActual},
        [Parameter(Position = 38, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SpeedConfigured},
        [Parameter(Position = 39, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SpeedMax},
        [Parameter(Position = 40, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SpeedMin},
        [Parameter(Position = 41, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${State},
        [Parameter(Position = 42, ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${StateDescription},
        [Parameter(Position = 43, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SystemId},
        [Parameter(Position = 44, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${TgtModeWriteOpt},
        [Parameter(Position = 45, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Type},
        [Parameter(Position = 46, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${UniqueWWN},
        [Parameter(Position = 47, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Vlans}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => PortDetails' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "associatedLinks" = ${AssociatedLinks}
            "cardType" = ${CardType}
            "class" = ${Class}
            "class2" = ${Class2}
            "config" = ${Config}
            "configMode" = ${ConfigMode}
            "connectionType" = ${ConnectionType}
            "consoleUri" = ${ConsoleUri}
            "customerId" = ${CustomerId}
            "devices" = ${Devices}
            "displayname" = ${Displayname}
            "domain" = ${Domain}
            "failoverStatus" = ${FailoverStatus}
            "fcData" = ${FcData}
            "fwVersion" = ${FwVersion}
            "generation" = ${Generation}
            "id" = ${Id}
            "initiatorPorts" = ${InitiatorPorts}
            "interruptCoalesce" = ${InterruptCoalesce}
            "ipData" = ${IpData}
            "iscsiData" = ${IscsiData}
            "label" = ${Label}
            "manufacturing" = ${Manufacturing}
            "mode" = ${Mode}
            "modeChange" = ${ModeChange}
            "name" = ${Name}
            "nodeCardId" = ${NodeCardId}
            "nodeId" = ${NodeId}
            "partner" = ${Partner}
            "portSfp" = ${PortSfp}
            "portType" = ${PortType}
            "position" = ${Position}
            "protocol" = ${Protocol}
            "requestUri" = ${RequestUri}
            "resourceUri" = ${ResourceUri}
            "revision" = ${Revision}
            "smartSAN" = ${SmartSAN}
            "speedActual" = ${SpeedActual}
            "speedConfigured" = ${SpeedConfigured}
            "speedMax" = ${SpeedMax}
            "speedMin" = ${SpeedMin}
            "state" = ${State}
            "stateDescription" = ${StateDescription}
            "systemId" = ${SystemId}
            "tgtModeWriteOpt" = ${TgtModeWriteOpt}
            "type" = ${Type}
            "uniqueWWN" = ${UniqueWWN}
            "vlans" = ${Vlans}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to PortDetails<PSCustomObject>

.DESCRIPTION

Convert from JSON to PortDetails<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

PortDetails<PSCustomObject>
#>
function ConvertFrom-JsonToPortDetails {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => PortDetails' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in PortDetails
        $AllProperties = ("associatedLinks", "cardType", "class", "class2", "config", "configMode", "connectionType", "consoleUri", "customerId", "devices", "displayname", "domain", "failoverStatus", "fcData", "fwVersion", "generation", "id", "initiatorPorts", "interruptCoalesce", "ipData", "iscsiData", "label", "manufacturing", "mode", "modeChange", "name", "nodeCardId", "nodeId", "partner", "portSfp", "portType", "position", "protocol", "requestUri", "resourceUri", "revision", "smartSAN", "speedActual", "speedConfigured", "speedMax", "speedMin", "state", "stateDescription", "systemId", "tgtModeWriteOpt", "type", "uniqueWWN", "vlans")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "associatedLinks"))) { #optional property not found
            $AssociatedLinks = $null
        } else {
            $AssociatedLinks = $JsonParameters.PSobject.Properties["associatedLinks"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "cardType"))) { #optional property not found
            $CardType = $null
        } else {
            $CardType = $JsonParameters.PSobject.Properties["cardType"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "class"))) { #optional property not found
            $Class = $null
        } else {
            $Class = $JsonParameters.PSobject.Properties["class"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "class2"))) { #optional property not found
            $Class2 = $null
        } else {
            $Class2 = $JsonParameters.PSobject.Properties["class2"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "config"))) { #optional property not found
            $Config = $null
        } else {
            $Config = $JsonParameters.PSobject.Properties["config"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "configMode"))) { #optional property not found
            $ConfigMode = $null
        } else {
            $ConfigMode = $JsonParameters.PSobject.Properties["configMode"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "connectionType"))) { #optional property not found
            $ConnectionType = $null
        } else {
            $ConnectionType = $JsonParameters.PSobject.Properties["connectionType"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "consoleUri"))) { #optional property not found
            $ConsoleUri = $null
        } else {
            $ConsoleUri = $JsonParameters.PSobject.Properties["consoleUri"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "customerId"))) { #optional property not found
            $CustomerId = $null
        } else {
            $CustomerId = $JsonParameters.PSobject.Properties["customerId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "devices"))) { #optional property not found
            $Devices = $null
        } else {
            $Devices = $JsonParameters.PSobject.Properties["devices"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "displayname"))) { #optional property not found
            $Displayname = $null
        } else {
            $Displayname = $JsonParameters.PSobject.Properties["displayname"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "domain"))) { #optional property not found
            $Domain = $null
        } else {
            $Domain = $JsonParameters.PSobject.Properties["domain"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "failoverStatus"))) { #optional property not found
            $FailoverStatus = $null
        } else {
            $FailoverStatus = $JsonParameters.PSobject.Properties["failoverStatus"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "fcData"))) { #optional property not found
            $FcData = $null
        } else {
            $FcData = $JsonParameters.PSobject.Properties["fcData"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "fwVersion"))) { #optional property not found
            $FwVersion = $null
        } else {
            $FwVersion = $JsonParameters.PSobject.Properties["fwVersion"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "generation"))) { #optional property not found
            $Generation = $null
        } else {
            $Generation = $JsonParameters.PSobject.Properties["generation"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) { #optional property not found
            $Id = $null
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "initiatorPorts"))) { #optional property not found
            $InitiatorPorts = $null
        } else {
            $InitiatorPorts = $JsonParameters.PSobject.Properties["initiatorPorts"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "interruptCoalesce"))) { #optional property not found
            $InterruptCoalesce = $null
        } else {
            $InterruptCoalesce = $JsonParameters.PSobject.Properties["interruptCoalesce"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ipData"))) { #optional property not found
            $IpData = $null
        } else {
            $IpData = $JsonParameters.PSobject.Properties["ipData"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "iscsiData"))) { #optional property not found
            $IscsiData = $null
        } else {
            $IscsiData = $JsonParameters.PSobject.Properties["iscsiData"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "label"))) { #optional property not found
            $Label = $null
        } else {
            $Label = $JsonParameters.PSobject.Properties["label"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "manufacturing"))) { #optional property not found
            $Manufacturing = $null
        } else {
            $Manufacturing = $JsonParameters.PSobject.Properties["manufacturing"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "mode"))) { #optional property not found
            $Mode = $null
        } else {
            $Mode = $JsonParameters.PSobject.Properties["mode"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "modeChange"))) { #optional property not found
            $ModeChange = $null
        } else {
            $ModeChange = $JsonParameters.PSobject.Properties["modeChange"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) { #optional property not found
            $Name = $null
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "nodeCardId"))) { #optional property not found
            $NodeCardId = $null
        } else {
            $NodeCardId = $JsonParameters.PSobject.Properties["nodeCardId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "nodeId"))) { #optional property not found
            $NodeId = $null
        } else {
            $NodeId = $JsonParameters.PSobject.Properties["nodeId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "partner"))) { #optional property not found
            $Partner = $null
        } else {
            $Partner = $JsonParameters.PSobject.Properties["partner"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "portSfp"))) { #optional property not found
            $PortSfp = $null
        } else {
            $PortSfp = $JsonParameters.PSobject.Properties["portSfp"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "portType"))) { #optional property not found
            $PortType = $null
        } else {
            $PortType = $JsonParameters.PSobject.Properties["portType"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "position"))) { #optional property not found
            $Position = $null
        } else {
            $Position = $JsonParameters.PSobject.Properties["position"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "protocol"))) { #optional property not found
            $Protocol = $null
        } else {
            $Protocol = $JsonParameters.PSobject.Properties["protocol"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "requestUri"))) { #optional property not found
            $RequestUri = $null
        } else {
            $RequestUri = $JsonParameters.PSobject.Properties["requestUri"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "resourceUri"))) { #optional property not found
            $ResourceUri = $null
        } else {
            $ResourceUri = $JsonParameters.PSobject.Properties["resourceUri"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "revision"))) { #optional property not found
            $Revision = $null
        } else {
            $Revision = $JsonParameters.PSobject.Properties["revision"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "smartSAN"))) { #optional property not found
            $SmartSAN = $null
        } else {
            $SmartSAN = $JsonParameters.PSobject.Properties["smartSAN"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "speedActual"))) { #optional property not found
            $SpeedActual = $null
        } else {
            $SpeedActual = $JsonParameters.PSobject.Properties["speedActual"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "speedConfigured"))) { #optional property not found
            $SpeedConfigured = $null
        } else {
            $SpeedConfigured = $JsonParameters.PSobject.Properties["speedConfigured"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "speedMax"))) { #optional property not found
            $SpeedMax = $null
        } else {
            $SpeedMax = $JsonParameters.PSobject.Properties["speedMax"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "speedMin"))) { #optional property not found
            $SpeedMin = $null
        } else {
            $SpeedMin = $JsonParameters.PSobject.Properties["speedMin"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "state"))) { #optional property not found
            $State = $null
        } else {
            $State = $JsonParameters.PSobject.Properties["state"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "stateDescription"))) { #optional property not found
            $StateDescription = $null
        } else {
            $StateDescription = $JsonParameters.PSobject.Properties["stateDescription"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "systemId"))) { #optional property not found
            $SystemId = $null
        } else {
            $SystemId = $JsonParameters.PSobject.Properties["systemId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "tgtModeWriteOpt"))) { #optional property not found
            $TgtModeWriteOpt = $null
        } else {
            $TgtModeWriteOpt = $JsonParameters.PSobject.Properties["tgtModeWriteOpt"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "type"))) { #optional property not found
            $Type = $null
        } else {
            $Type = $JsonParameters.PSobject.Properties["type"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "uniqueWWN"))) { #optional property not found
            $UniqueWWN = $null
        } else {
            $UniqueWWN = $JsonParameters.PSobject.Properties["uniqueWWN"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "vlans"))) { #optional property not found
            $Vlans = $null
        } else {
            $Vlans = $JsonParameters.PSobject.Properties["vlans"].value
        }

        $PSO = [PSCustomObject]@{
            "associatedLinks" = ${AssociatedLinks}
            "cardType" = ${CardType}
            "class" = ${Class}
            "class2" = ${Class2}
            "config" = ${Config}
            "configMode" = ${ConfigMode}
            "connectionType" = ${ConnectionType}
            "consoleUri" = ${ConsoleUri}
            "customerId" = ${CustomerId}
            "devices" = ${Devices}
            "displayname" = ${Displayname}
            "domain" = ${Domain}
            "failoverStatus" = ${FailoverStatus}
            "fcData" = ${FcData}
            "fwVersion" = ${FwVersion}
            "generation" = ${Generation}
            "id" = ${Id}
            "initiatorPorts" = ${InitiatorPorts}
            "interruptCoalesce" = ${InterruptCoalesce}
            "ipData" = ${IpData}
            "iscsiData" = ${IscsiData}
            "label" = ${Label}
            "manufacturing" = ${Manufacturing}
            "mode" = ${Mode}
            "modeChange" = ${ModeChange}
            "name" = ${Name}
            "nodeCardId" = ${NodeCardId}
            "nodeId" = ${NodeId}
            "partner" = ${Partner}
            "portSfp" = ${PortSfp}
            "portType" = ${PortType}
            "position" = ${Position}
            "protocol" = ${Protocol}
            "requestUri" = ${RequestUri}
            "resourceUri" = ${ResourceUri}
            "revision" = ${Revision}
            "smartSAN" = ${SmartSAN}
            "speedActual" = ${SpeedActual}
            "speedConfigured" = ${SpeedConfigured}
            "speedMax" = ${SpeedMax}
            "speedMin" = ${SpeedMin}
            "state" = ${State}
            "stateDescription" = ${StateDescription}
            "systemId" = ${SystemId}
            "tgtModeWriteOpt" = ${TgtModeWriteOpt}
            "type" = ${Type}
            "uniqueWWN" = ${UniqueWWN}
            "vlans" = ${Vlans}
        }

        return $PSO
    }

}

