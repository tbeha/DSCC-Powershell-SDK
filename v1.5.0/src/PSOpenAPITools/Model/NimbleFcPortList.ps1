#
# Data Services Cloud Console API
# Data Services Cloud Console API
# Version: 1.5.0
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER BusLocation
Bus location for the fibre channel config.String of up to 64 alphanumeric characters
.PARAMETER Name
Name of the fibre channel config. String of up to 64 alphanumeric characters, - and . and : are allowed after first character.
.PARAMETER Port
Port number for this fibre channel config.Unsigned 64-bit integer.
.PARAMETER Slot
Slot number for this fibre channel config. Unsigned 64-bit integer.
.OUTPUTS

NimbleFcPortList<PSCustomObject>
#>

function Initialize-NimbleFcPortList {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${BusLocation},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Port},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Slot}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => NimbleFcPortList' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "bus_location" = ${BusLocation}
            "name" = ${Name}
            "port" = ${Port}
            "slot" = ${Slot}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to NimbleFcPortList<PSCustomObject>

.DESCRIPTION

Convert from JSON to NimbleFcPortList<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

NimbleFcPortList<PSCustomObject>
#>
function ConvertFrom-JsonToNimbleFcPortList {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => NimbleFcPortList' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in NimbleFcPortList
        $AllProperties = ("bus_location", "name", "port", "slot")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "bus_location"))) { #optional property not found
            $BusLocation = $null
        } else {
            $BusLocation = $JsonParameters.PSobject.Properties["bus_location"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) { #optional property not found
            $Name = $null
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "port"))) { #optional property not found
            $Port = $null
        } else {
            $Port = $JsonParameters.PSobject.Properties["port"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "slot"))) { #optional property not found
            $Slot = $null
        } else {
            $Slot = $JsonParameters.PSobject.Properties["slot"].value
        }

        $PSO = [PSCustomObject]@{
            "bus_location" = ${BusLocation}
            "name" = ${Name}
            "port" = ${Port}
            "slot" = ${Slot}
        }

        return $PSO
    }

}

