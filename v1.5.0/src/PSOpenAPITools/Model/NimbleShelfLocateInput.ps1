#
# Data Services Cloud Console API
# Data Services Cloud Console API
# Version: 1.5.0
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Input to locate a Nimble shelf.

.PARAMETER Cid
Which controller this sensor applies to. Possible values:'A', 'B'.
.PARAMETER Status
Status value of identifier to set. Possible values: 'true', 'false'.
.OUTPUTS

NimbleShelfLocateInput<PSCustomObject>
#>

function Initialize-NimbleShelfLocateInput {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Cid},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [Boolean]
        ${Status}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => NimbleShelfLocateInput' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $Cid) {
            throw "invalid value for 'Cid', 'Cid' cannot be null."
        }

        if ($null -eq $Status) {
            throw "invalid value for 'Status', 'Status' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "cid" = ${Cid}
            "status" = ${Status}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to NimbleShelfLocateInput<PSCustomObject>

.DESCRIPTION

Convert from JSON to NimbleShelfLocateInput<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

NimbleShelfLocateInput<PSCustomObject>
#>
function ConvertFrom-JsonToNimbleShelfLocateInput {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => NimbleShelfLocateInput' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in NimbleShelfLocateInput
        $AllProperties = ("cid", "status")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'cid' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "cid"))) {
            throw "Error! JSON cannot be serialized due to the required property 'cid' missing."
        } else {
            $Cid = $JsonParameters.PSobject.Properties["cid"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "status"))) {
            throw "Error! JSON cannot be serialized due to the required property 'status' missing."
        } else {
            $Status = $JsonParameters.PSobject.Properties["status"].value
        }

        $PSO = [PSCustomObject]@{
            "cid" = ${Cid}
            "status" = ${Status}
        }

        return $PSO
    }

}

