#
# Data Services Cloud Console API
# Data Services Cloud Console API
# Version: 1.5.0
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER SyslogPort
Port number for syslogd server. Positive integer value up to 65535 representing TCP/IP port.
.PARAMETER SyslogServer
Hostname of the syslogd server. String of alphanumeric characters, valid range is from 2 to 255; Each label must be between 1 and 63 characters long; - and . are allowed after the first and before the last character.
.OUTPUTS

NimbleSyslogdServerInfo<PSCustomObject>
#>

function Initialize-NimbleSyslogdServerInfo {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${SyslogPort},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SyslogServer}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => NimbleSyslogdServerInfo' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "syslog_port" = ${SyslogPort}
            "syslog_server" = ${SyslogServer}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to NimbleSyslogdServerInfo<PSCustomObject>

.DESCRIPTION

Convert from JSON to NimbleSyslogdServerInfo<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

NimbleSyslogdServerInfo<PSCustomObject>
#>
function ConvertFrom-JsonToNimbleSyslogdServerInfo {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => NimbleSyslogdServerInfo' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in NimbleSyslogdServerInfo
        $AllProperties = ("syslog_port", "syslog_server")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "syslog_port"))) { #optional property not found
            $SyslogPort = $null
        } else {
            $SyslogPort = $JsonParameters.PSobject.Properties["syslog_port"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "syslog_server"))) { #optional property not found
            $SyslogServer = $null
        } else {
            $SyslogServer = $JsonParameters.PSobject.Properties["syslog_server"].value
        }

        $PSO = [PSCustomObject]@{
            "syslog_port" = ${SyslogPort}
            "syslog_server" = ${SyslogServer}
        }

        return $PSO
    }

}

