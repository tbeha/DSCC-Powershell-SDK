#
# Data Services Cloud Console API
# Data Services Cloud Console API
# Version: 1.5.0
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Request body for creating physical copy of a volume.

.PARAMETER DestinationVolume
Name of the destination volume.
.PARAMETER OfflineClone
No description available.
.PARAMETER Online
Create an online or offline clone of a volume.
.PARAMETER OnlineClone
No description available.
.PARAMETER Priority
Priority of the task for clone volume. Defualts to MEDIUM.
.OUTPUTS

ArcuscreateCloneVolumeInput<PSCustomObject>
#>

function Initialize-ArcuscreateCloneVolumeInput {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${DestinationVolume},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${OfflineClone},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${Online},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${OnlineClone},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("PRIORITYTYPE_HIGH", "PRIORITYTYPE_MED", "PRIORITYTYPE_LOW")]
        [String]
        ${Priority}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => ArcuscreateCloneVolumeInput' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $DestinationVolume) {
            throw "invalid value for 'DestinationVolume', 'DestinationVolume' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "destinationVolume" = ${DestinationVolume}
            "offlineClone" = ${OfflineClone}
            "online" = ${Online}
            "onlineClone" = ${OnlineClone}
            "priority" = ${Priority}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to ArcuscreateCloneVolumeInput<PSCustomObject>

.DESCRIPTION

Convert from JSON to ArcuscreateCloneVolumeInput<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

ArcuscreateCloneVolumeInput<PSCustomObject>
#>
function ConvertFrom-JsonToArcuscreateCloneVolumeInput {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => ArcuscreateCloneVolumeInput' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in ArcuscreateCloneVolumeInput
        $AllProperties = ("destinationVolume", "offlineClone", "online", "onlineClone", "priority")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'destinationVolume' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "destinationVolume"))) {
            throw "Error! JSON cannot be serialized due to the required property 'destinationVolume' missing."
        } else {
            $DestinationVolume = $JsonParameters.PSobject.Properties["destinationVolume"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "offlineClone"))) { #optional property not found
            $OfflineClone = $null
        } else {
            $OfflineClone = $JsonParameters.PSobject.Properties["offlineClone"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "online"))) { #optional property not found
            $Online = $null
        } else {
            $Online = $JsonParameters.PSobject.Properties["online"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "onlineClone"))) { #optional property not found
            $OnlineClone = $null
        } else {
            $OnlineClone = $JsonParameters.PSobject.Properties["onlineClone"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "priority"))) { #optional property not found
            $Priority = $null
        } else {
            $Priority = $JsonParameters.PSobject.Properties["priority"].value
        }

        $PSO = [PSCustomObject]@{
            "destinationVolume" = ${DestinationVolume}
            "offlineClone" = ${OfflineClone}
            "online" = ${Online}
            "onlineClone" = ${OnlineClone}
            "priority" = ${Priority}
        }

        return $PSO
    }

}

