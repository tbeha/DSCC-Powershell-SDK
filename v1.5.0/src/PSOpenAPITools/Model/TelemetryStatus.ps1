#
# Data Services Cloud Console API
# Data Services Cloud Console API
# Version: 1.5.0
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

telemetry status of the system

.PARAMETER AssociatedLinks
Associated Links Details
.PARAMETER CollectionServer
Callhome Collection server URL
.PARAMETER ConnectivityStatus
Callhome connectivity status.
.PARAMETER ConnectivityTestTime
No description available.
.PARAMETER Details
No description available.
.PARAMETER Id
Unique identifier of the callhome status.
.PARAMETER LastFileSent
Last sent file name via callhome.
.PARAMETER LastFileTransferTime
No description available.
.PARAMETER LastSuccessfulConnectivityTestTime
No description available.
.PARAMETER ProxyConnectivity
Proxy connectivity status.
.PARAMETER RDAConfigured
Callhome transport agent configuration details.
.PARAMETER RDAStatus
Status of Callhome Transport Agent.
.PARAMETER RSvSStatus
Status of callhome agent.
.PARAMETER RTSStatus
Status of Real time scrubber.
.PARAMETER RequestUri
resourceUri for detailed storage object
.PARAMETER ResourceUri
resourceUri for detailed storage object
.PARAMETER RolledUpStatus
Callhome Rolled up status.
.PARAMETER SharedVolumeStatus
Shared Volume status
.PARAMETER TransferStatus
Callhome File Transfer transfer.
.OUTPUTS

TelemetryStatus<PSCustomObject>
#>

function Initialize-TelemetryStatus {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${AssociatedLinks},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${CollectionServer},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("NORMAL", "FAILED", "NOT_APPLICABLE", "DISABLED", "")]
        [String]
        ${ConnectivityStatus},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${ConnectivityTestTime},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Details},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Id},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${LastFileSent},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${LastFileTransferTime},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${LastSuccessfulConnectivityTestTime},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("NORMAL", "FAILED", "NOT_APPLICABLE", "DISABLED", "")]
        [String]
        ${ProxyConnectivity},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("NORMAL", "FAILED", "NOT_APPLICABLE", "DISABLED", "")]
        [String]
        ${RDAConfigured},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("NORMAL", "FAILED", "NOT_APPLICABLE", "DISABLED", "")]
        [String]
        ${RDAStatus},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("NORMAL", "FAILED", "NOT_APPLICABLE", "DISABLED", "")]
        [String]
        ${RSvSStatus},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("NORMAL", "FAILED", "NOT_APPLICABLE", "DISABLED", "")]
        [String]
        ${RTSStatus},
        [Parameter(Position = 14, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${RequestUri},
        [Parameter(Position = 15, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ResourceUri},
        [Parameter(Position = 16, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("NORMAL", "FAILED", "NOT_APPLICABLE", "DISABLED", "")]
        [String]
        ${RolledUpStatus},
        [Parameter(Position = 17, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("NORMAL", "FAILED", "NOT_APPLICABLE", "DISABLED", "")]
        [String]
        ${SharedVolumeStatus},
        [Parameter(Position = 18, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("NORMAL", "FAILED", "NOT_APPLICABLE", "DISABLED", "")]
        [String]
        ${TransferStatus}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => TelemetryStatus' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "associatedLinks" = ${AssociatedLinks}
            "collectionServer" = ${CollectionServer}
            "connectivityStatus" = ${ConnectivityStatus}
            "connectivityTestTime" = ${ConnectivityTestTime}
            "details" = ${Details}
            "id" = ${Id}
            "lastFileSent" = ${LastFileSent}
            "lastFileTransferTime" = ${LastFileTransferTime}
            "lastSuccessfulConnectivityTestTime" = ${LastSuccessfulConnectivityTestTime}
            "proxyConnectivity" = ${ProxyConnectivity}
            "rDAConfigured" = ${RDAConfigured}
            "rDAStatus" = ${RDAStatus}
            "rSvSStatus" = ${RSvSStatus}
            "rTSStatus" = ${RTSStatus}
            "requestUri" = ${RequestUri}
            "resourceUri" = ${ResourceUri}
            "rolledUpStatus" = ${RolledUpStatus}
            "sharedVolumeStatus" = ${SharedVolumeStatus}
            "transferStatus" = ${TransferStatus}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to TelemetryStatus<PSCustomObject>

.DESCRIPTION

Convert from JSON to TelemetryStatus<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

TelemetryStatus<PSCustomObject>
#>
function ConvertFrom-JsonToTelemetryStatus {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => TelemetryStatus' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in TelemetryStatus
        $AllProperties = ("associatedLinks", "collectionServer", "connectivityStatus", "connectivityTestTime", "details", "id", "lastFileSent", "lastFileTransferTime", "lastSuccessfulConnectivityTestTime", "proxyConnectivity", "rDAConfigured", "rDAStatus", "rSvSStatus", "rTSStatus", "requestUri", "resourceUri", "rolledUpStatus", "sharedVolumeStatus", "transferStatus")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "associatedLinks"))) { #optional property not found
            $AssociatedLinks = $null
        } else {
            $AssociatedLinks = $JsonParameters.PSobject.Properties["associatedLinks"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "collectionServer"))) { #optional property not found
            $CollectionServer = $null
        } else {
            $CollectionServer = $JsonParameters.PSobject.Properties["collectionServer"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "connectivityStatus"))) { #optional property not found
            $ConnectivityStatus = $null
        } else {
            $ConnectivityStatus = $JsonParameters.PSobject.Properties["connectivityStatus"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "connectivityTestTime"))) { #optional property not found
            $ConnectivityTestTime = $null
        } else {
            $ConnectivityTestTime = $JsonParameters.PSobject.Properties["connectivityTestTime"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "details"))) { #optional property not found
            $Details = $null
        } else {
            $Details = $JsonParameters.PSobject.Properties["details"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) { #optional property not found
            $Id = $null
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "lastFileSent"))) { #optional property not found
            $LastFileSent = $null
        } else {
            $LastFileSent = $JsonParameters.PSobject.Properties["lastFileSent"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "lastFileTransferTime"))) { #optional property not found
            $LastFileTransferTime = $null
        } else {
            $LastFileTransferTime = $JsonParameters.PSobject.Properties["lastFileTransferTime"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "lastSuccessfulConnectivityTestTime"))) { #optional property not found
            $LastSuccessfulConnectivityTestTime = $null
        } else {
            $LastSuccessfulConnectivityTestTime = $JsonParameters.PSobject.Properties["lastSuccessfulConnectivityTestTime"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "proxyConnectivity"))) { #optional property not found
            $ProxyConnectivity = $null
        } else {
            $ProxyConnectivity = $JsonParameters.PSobject.Properties["proxyConnectivity"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "rDAConfigured"))) { #optional property not found
            $RDAConfigured = $null
        } else {
            $RDAConfigured = $JsonParameters.PSobject.Properties["rDAConfigured"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "rDAStatus"))) { #optional property not found
            $RDAStatus = $null
        } else {
            $RDAStatus = $JsonParameters.PSobject.Properties["rDAStatus"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "rSvSStatus"))) { #optional property not found
            $RSvSStatus = $null
        } else {
            $RSvSStatus = $JsonParameters.PSobject.Properties["rSvSStatus"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "rTSStatus"))) { #optional property not found
            $RTSStatus = $null
        } else {
            $RTSStatus = $JsonParameters.PSobject.Properties["rTSStatus"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "requestUri"))) { #optional property not found
            $RequestUri = $null
        } else {
            $RequestUri = $JsonParameters.PSobject.Properties["requestUri"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "resourceUri"))) { #optional property not found
            $ResourceUri = $null
        } else {
            $ResourceUri = $JsonParameters.PSobject.Properties["resourceUri"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "rolledUpStatus"))) { #optional property not found
            $RolledUpStatus = $null
        } else {
            $RolledUpStatus = $JsonParameters.PSobject.Properties["rolledUpStatus"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "sharedVolumeStatus"))) { #optional property not found
            $SharedVolumeStatus = $null
        } else {
            $SharedVolumeStatus = $JsonParameters.PSobject.Properties["sharedVolumeStatus"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "transferStatus"))) { #optional property not found
            $TransferStatus = $null
        } else {
            $TransferStatus = $JsonParameters.PSobject.Properties["transferStatus"].value
        }

        $PSO = [PSCustomObject]@{
            "associatedLinks" = ${AssociatedLinks}
            "collectionServer" = ${CollectionServer}
            "connectivityStatus" = ${ConnectivityStatus}
            "connectivityTestTime" = ${ConnectivityTestTime}
            "details" = ${Details}
            "id" = ${Id}
            "lastFileSent" = ${LastFileSent}
            "lastFileTransferTime" = ${LastFileTransferTime}
            "lastSuccessfulConnectivityTestTime" = ${LastSuccessfulConnectivityTestTime}
            "proxyConnectivity" = ${ProxyConnectivity}
            "rDAConfigured" = ${RDAConfigured}
            "rDAStatus" = ${RDAStatus}
            "rSvSStatus" = ${RSvSStatus}
            "rTSStatus" = ${RTSStatus}
            "requestUri" = ${RequestUri}
            "resourceUri" = ${ResourceUri}
            "rolledUpStatus" = ${RolledUpStatus}
            "sharedVolumeStatus" = ${SharedVolumeStatus}
            "transferStatus" = ${TransferStatus}
        }

        return $PSO
    }

}

