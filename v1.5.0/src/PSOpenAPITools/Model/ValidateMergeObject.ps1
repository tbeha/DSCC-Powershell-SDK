#
# Data Services Cloud Console API
# Data Services Cloud Console API
# Version: 1.5.0
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER HostIds
host IDs of hosts which are needed to be merged.
.PARAMETER Name
Name of the host being created.
.PARAMETER OperatingSystem
Host operating system. Possible Values are: - AIX - Apple - Citrix Hypervisor(XenServer) - HP-UX - IBM VIO Server - InForm - NetApp/ONTAP - OE Linux UEK - OpenVMS - Oracle VM x86 - RHE Linux - RHE Virtualization - Solaris - SuSE Linux - SuSE Virtualization - Ubuntu - VMware (ESXi) - Windows Server
.OUTPUTS

ValidateMergeObject<PSCustomObject>
#>

function Initialize-ValidateMergeObject {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${HostIds},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("AIX", "Apple", "Citrix Hypervisor(XenServer)", "HP-UX", "IBM VIO Server", "InForm", "NetApp/ONTAP", "OE Linux UEK", "OpenVMS", "Oracle VM x86", "RHE Linux", "RHE Virtualization", "Solaris", "SuSE Linux", "SuSE Virtualization", "Ubuntu", "VMware (ESXi)", "Windows Server")]
        [String]
        ${OperatingSystem}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => ValidateMergeObject' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "hostIds" = ${HostIds}
            "name" = ${Name}
            "operatingSystem" = ${OperatingSystem}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to ValidateMergeObject<PSCustomObject>

.DESCRIPTION

Convert from JSON to ValidateMergeObject<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

ValidateMergeObject<PSCustomObject>
#>
function ConvertFrom-JsonToValidateMergeObject {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => ValidateMergeObject' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in ValidateMergeObject
        $AllProperties = ("hostIds", "name", "operatingSystem")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'hostIds' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "hostIds"))) {
            throw "Error! JSON cannot be serialized due to the required property 'hostIds' missing."
        } else {
            $HostIds = $JsonParameters.PSobject.Properties["hostIds"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) {
            throw "Error! JSON cannot be serialized due to the required property 'name' missing."
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "operatingSystem"))) {
            throw "Error! JSON cannot be serialized due to the required property 'operatingSystem' missing."
        } else {
            $OperatingSystem = $JsonParameters.PSobject.Properties["operatingSystem"].value
        }

        $PSO = [PSCustomObject]@{
            "hostIds" = ${HostIds}
            "name" = ${Name}
            "operatingSystem" = ${OperatingSystem}
        }

        return $PSO
    }

}

