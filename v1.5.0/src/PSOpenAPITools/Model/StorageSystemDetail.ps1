#
# Data Services Cloud Console API
# Data Services Cloud Console API
# Version: 1.5.0
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER ArrayList
The list of Nimble arrays part of this system.
.PARAMETER AssociatedLinks
Associated Links Details
.PARAMETER CallhomeStatus
Device Call-home connectivity status
.PARAMETER CollectionStatus
No description available.
.PARAMETER ConnectionStatus
No description available.
.PARAMETER ConsoleUri
consoleUri for detailed storage object
.PARAMETER CustomerId
customerId
.PARAMETER Description
A brief description of the storage system.
.PARAMETER Fqdn
Fully qualified domain name of the system
.PARAMETER Generation
generation
.PARAMETER Id
UUID string uniquely identifying the storage system object.
.PARAMETER LastConnectedTime
Last time when the system was connected
.PARAMETER MgmtIp
No description available.
.PARAMETER Model
Model of the storage system
.PARAMETER Name
A name to identify the storage system.
.PARAMETER ProductFamily
Storage device type
.PARAMETER RequestUri
requestUri for detailed storage object
.PARAMETER ResourceUri
resourceUri for detailed storage object
.PARAMETER SoftwareVersion
Software version of the storage system
.PARAMETER State
For deviceType1 State derived from ports, enclosure, disk and node state for deviceType2 state is state reported by deviceType2 array
.PARAMETER SystemWWN
WWN of the array
.PARAMETER TierType
StorageTier.
.PARAMETER Type
type
.PARAMETER UpSince
The time that the system has been up since
.OUTPUTS

StorageSystemDetail<PSCustomObject>
#>

function Initialize-StorageSystemDetail {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${ArrayList},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${AssociatedLinks},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("ENABLED_NORMAL", "ENABLED_DEGRADED", "DISABLED", "UNKNOWN")]
        [String]
        ${CallhomeStatus},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${CollectionStatus},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("CONNECTED", "DISCONNECTED", "UNKNOWN")]
        [PSCustomObject]
        ${ConnectionStatus},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ConsoleUri},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${CustomerId},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Description},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Fqdn},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Generation},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Id},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${LastConnectedTime},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${MgmtIp},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Model},
        [Parameter(Position = 14, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 15, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ProductFamily},
        [Parameter(Position = 16, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${RequestUri},
        [Parameter(Position = 17, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ResourceUri},
        [Parameter(Position = 18, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SoftwareVersion},
        [Parameter(Position = 19, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("NORMAL", "DEGRADED")]
        [String]
        ${State},
        [Parameter(Position = 20, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SystemWWN},
        [Parameter(Position = 21, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("STORAGE_TIER_9000_NVME", "STORAGE_TIER_6000_NVME", "STORAGE_TIER_NIMBLE_HYBRID", "STORAGE_TIER_NIMBLE_AFA", "STORAGE_TIER_600_AFA", "STORAGE_TIER_600_HYBRID", "STORAGE_TIER_NIMBLE_VSA", "STORAGE_TIER_MISSION_CRITICAL", "STORAGE_TIER_BUSINESS_CRITICAL", "STORAGE_TIER_GENERAL_PURPOSE", "STORAGE_TIER_5000", "STORAGE_TIER_10000_NVME", "STORAGE_TIER_10020_MP", "STORAGE_TIER_UNKNOWN")]
        [String]
        ${TierType},
        [Parameter(Position = 22, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Type},
        [Parameter(Position = 23, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${UpSince}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => StorageSystemDetail' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if (!$Description -and $Description.length -gt 255) {
            throw "invalid value for 'Description', the character length must be smaller than or equal to 255."
        }

        if (!$Name -and $Name.length -gt 255) {
            throw "invalid value for 'Name', the character length must be smaller than or equal to 255."
        }


        $PSO = [PSCustomObject]@{
            "arrayList" = ${ArrayList}
            "associatedLinks" = ${AssociatedLinks}
            "callhomeStatus" = ${CallhomeStatus}
            "collectionStatus" = ${CollectionStatus}
            "connectionStatus" = ${ConnectionStatus}
            "consoleUri" = ${ConsoleUri}
            "customerId" = ${CustomerId}
            "description" = ${Description}
            "fqdn" = ${Fqdn}
            "generation" = ${Generation}
            "id" = ${Id}
            "lastConnectedTime" = ${LastConnectedTime}
            "mgmtIp" = ${MgmtIp}
            "model" = ${Model}
            "name" = ${Name}
            "productFamily" = ${ProductFamily}
            "requestUri" = ${RequestUri}
            "resourceUri" = ${ResourceUri}
            "softwareVersion" = ${SoftwareVersion}
            "state" = ${State}
            "systemWWN" = ${SystemWWN}
            "tierType" = ${TierType}
            "type" = ${Type}
            "upSince" = ${UpSince}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to StorageSystemDetail<PSCustomObject>

.DESCRIPTION

Convert from JSON to StorageSystemDetail<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

StorageSystemDetail<PSCustomObject>
#>
function ConvertFrom-JsonToStorageSystemDetail {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => StorageSystemDetail' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in StorageSystemDetail
        $AllProperties = ("arrayList", "associatedLinks", "callhomeStatus", "collectionStatus", "connectionStatus", "consoleUri", "customerId", "description", "fqdn", "generation", "id", "lastConnectedTime", "mgmtIp", "model", "name", "productFamily", "requestUri", "resourceUri", "softwareVersion", "state", "systemWWN", "tierType", "type", "upSince")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "arrayList"))) { #optional property not found
            $ArrayList = $null
        } else {
            $ArrayList = $JsonParameters.PSobject.Properties["arrayList"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "associatedLinks"))) { #optional property not found
            $AssociatedLinks = $null
        } else {
            $AssociatedLinks = $JsonParameters.PSobject.Properties["associatedLinks"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "callhomeStatus"))) { #optional property not found
            $CallhomeStatus = $null
        } else {
            $CallhomeStatus = $JsonParameters.PSobject.Properties["callhomeStatus"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "collectionStatus"))) { #optional property not found
            $CollectionStatus = $null
        } else {
            $CollectionStatus = $JsonParameters.PSobject.Properties["collectionStatus"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "connectionStatus"))) { #optional property not found
            $ConnectionStatus = $null
        } else {
            $ConnectionStatus = $JsonParameters.PSobject.Properties["connectionStatus"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "consoleUri"))) { #optional property not found
            $ConsoleUri = $null
        } else {
            $ConsoleUri = $JsonParameters.PSobject.Properties["consoleUri"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "customerId"))) { #optional property not found
            $CustomerId = $null
        } else {
            $CustomerId = $JsonParameters.PSobject.Properties["customerId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "description"))) { #optional property not found
            $Description = $null
        } else {
            $Description = $JsonParameters.PSobject.Properties["description"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "fqdn"))) { #optional property not found
            $Fqdn = $null
        } else {
            $Fqdn = $JsonParameters.PSobject.Properties["fqdn"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "generation"))) { #optional property not found
            $Generation = $null
        } else {
            $Generation = $JsonParameters.PSobject.Properties["generation"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) { #optional property not found
            $Id = $null
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "lastConnectedTime"))) { #optional property not found
            $LastConnectedTime = $null
        } else {
            $LastConnectedTime = $JsonParameters.PSobject.Properties["lastConnectedTime"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "mgmtIp"))) { #optional property not found
            $MgmtIp = $null
        } else {
            $MgmtIp = $JsonParameters.PSobject.Properties["mgmtIp"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "model"))) { #optional property not found
            $Model = $null
        } else {
            $Model = $JsonParameters.PSobject.Properties["model"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) { #optional property not found
            $Name = $null
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "productFamily"))) { #optional property not found
            $ProductFamily = $null
        } else {
            $ProductFamily = $JsonParameters.PSobject.Properties["productFamily"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "requestUri"))) { #optional property not found
            $RequestUri = $null
        } else {
            $RequestUri = $JsonParameters.PSobject.Properties["requestUri"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "resourceUri"))) { #optional property not found
            $ResourceUri = $null
        } else {
            $ResourceUri = $JsonParameters.PSobject.Properties["resourceUri"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "softwareVersion"))) { #optional property not found
            $SoftwareVersion = $null
        } else {
            $SoftwareVersion = $JsonParameters.PSobject.Properties["softwareVersion"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "state"))) { #optional property not found
            $State = $null
        } else {
            $State = $JsonParameters.PSobject.Properties["state"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "systemWWN"))) { #optional property not found
            $SystemWWN = $null
        } else {
            $SystemWWN = $JsonParameters.PSobject.Properties["systemWWN"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "tierType"))) { #optional property not found
            $TierType = $null
        } else {
            $TierType = $JsonParameters.PSobject.Properties["tierType"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "type"))) { #optional property not found
            $Type = $null
        } else {
            $Type = $JsonParameters.PSobject.Properties["type"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "upSince"))) { #optional property not found
            $UpSince = $null
        } else {
            $UpSince = $JsonParameters.PSobject.Properties["upSince"].value
        }

        $PSO = [PSCustomObject]@{
            "arrayList" = ${ArrayList}
            "associatedLinks" = ${AssociatedLinks}
            "callhomeStatus" = ${CallhomeStatus}
            "collectionStatus" = ${CollectionStatus}
            "connectionStatus" = ${ConnectionStatus}
            "consoleUri" = ${ConsoleUri}
            "customerId" = ${CustomerId}
            "description" = ${Description}
            "fqdn" = ${Fqdn}
            "generation" = ${Generation}
            "id" = ${Id}
            "lastConnectedTime" = ${LastConnectedTime}
            "mgmtIp" = ${MgmtIp}
            "model" = ${Model}
            "name" = ${Name}
            "productFamily" = ${ProductFamily}
            "requestUri" = ${RequestUri}
            "resourceUri" = ${ResourceUri}
            "softwareVersion" = ${SoftwareVersion}
            "state" = ${State}
            "systemWWN" = ${SystemWWN}
            "tierType" = ${TierType}
            "type" = ${Type}
            "upSince" = ${UpSince}
        }

        return $PSO
    }

}

