#
# Data Services Cloud Console API
# Data Services Cloud Console API
# Version: 1.5.0
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

How encryption is configured for this group. Group encryption settings.

.PARAMETER Cipher
Type of encryption cipher used. Possible values: 'aes_256_xts', 'none'.
.PARAMETER EncryptionActive
Is encryption active (output only).
.PARAMETER EncryptionKeyManager
Is the master key on local or external key manager (output only). Possible values: 'external', 'local'.
.PARAMETER MasterKeySet
Is the master key set (output only).
.PARAMETER Mode
Mode of encryption. Possible values: 'available', 'none', 'secure'.
.PARAMETER Scope
Encryption scope. Possible values: 'volume', 'pool', 'none', 'group'.
.OUTPUTS

EncryptionSettings<PSCustomObject>
#>

function Initialize-EncryptionSettings {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Cipher},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${EncryptionActive},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${EncryptionKeyManager},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${MasterKeySet},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Mode},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Scope}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => EncryptionSettings' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "cipher" = ${Cipher}
            "encryption_active" = ${EncryptionActive}
            "encryption_key_manager" = ${EncryptionKeyManager}
            "master_key_set" = ${MasterKeySet}
            "mode" = ${Mode}
            "scope" = ${Scope}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to EncryptionSettings<PSCustomObject>

.DESCRIPTION

Convert from JSON to EncryptionSettings<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

EncryptionSettings<PSCustomObject>
#>
function ConvertFrom-JsonToEncryptionSettings {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => EncryptionSettings' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in EncryptionSettings
        $AllProperties = ("cipher", "encryption_active", "encryption_key_manager", "master_key_set", "mode", "scope")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "cipher"))) { #optional property not found
            $Cipher = $null
        } else {
            $Cipher = $JsonParameters.PSobject.Properties["cipher"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "encryption_active"))) { #optional property not found
            $EncryptionActive = $null
        } else {
            $EncryptionActive = $JsonParameters.PSobject.Properties["encryption_active"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "encryption_key_manager"))) { #optional property not found
            $EncryptionKeyManager = $null
        } else {
            $EncryptionKeyManager = $JsonParameters.PSobject.Properties["encryption_key_manager"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "master_key_set"))) { #optional property not found
            $MasterKeySet = $null
        } else {
            $MasterKeySet = $JsonParameters.PSobject.Properties["master_key_set"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "mode"))) { #optional property not found
            $Mode = $null
        } else {
            $Mode = $JsonParameters.PSobject.Properties["mode"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "scope"))) { #optional property not found
            $Scope = $null
        } else {
            $Scope = $JsonParameters.PSobject.Properties["scope"].value
        }

        $PSO = [PSCustomObject]@{
            "cipher" = ${Cipher}
            "encryption_active" = ${EncryptionActive}
            "encryption_key_manager" = ${EncryptionKeyManager}
            "master_key_set" = ${MasterKeySet}
            "mode" = ${Mode}
            "scope" = ${Scope}
        }

        return $PSO
    }

}

