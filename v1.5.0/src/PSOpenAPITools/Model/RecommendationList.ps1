#
# Data Services Cloud Console API
# Data Services Cloud Console API
# Version: 1.5.0
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER CapacityInfo
No description available.
.PARAMETER Id
uid of the array
.PARAMETER MgmtIp
management Ip of the array
.PARAMETER Name
name of the array
.PARAMETER ProductFamily
Storage device type. Possible values: deviceType1 and deviceType2
.PARAMETER State
For deviceType1 State derived from ports, enclosure, disk and node state for deviceType2 state is state reported by deviceType2 array
.PARAMETER SystemWWN
WWN of the array
.OUTPUTS

RecommendationList<PSCustomObject>
#>

function Initialize-RecommendationList {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${CapacityInfo},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Id},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${MgmtIp},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ProductFamily},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("NORMAL", "DEGRADED", "")]
        [String]
        ${State},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SystemWWN}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => RecommendationList' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "capacityInfo" = ${CapacityInfo}
            "id" = ${Id}
            "mgmtIp" = ${MgmtIp}
            "name" = ${Name}
            "productFamily" = ${ProductFamily}
            "state" = ${State}
            "systemWWN" = ${SystemWWN}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to RecommendationList<PSCustomObject>

.DESCRIPTION

Convert from JSON to RecommendationList<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

RecommendationList<PSCustomObject>
#>
function ConvertFrom-JsonToRecommendationList {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => RecommendationList' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in RecommendationList
        $AllProperties = ("capacityInfo", "id", "mgmtIp", "name", "productFamily", "state", "systemWWN")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "capacityInfo"))) { #optional property not found
            $CapacityInfo = $null
        } else {
            $CapacityInfo = $JsonParameters.PSobject.Properties["capacityInfo"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) { #optional property not found
            $Id = $null
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "mgmtIp"))) { #optional property not found
            $MgmtIp = $null
        } else {
            $MgmtIp = $JsonParameters.PSobject.Properties["mgmtIp"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) { #optional property not found
            $Name = $null
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "productFamily"))) { #optional property not found
            $ProductFamily = $null
        } else {
            $ProductFamily = $JsonParameters.PSobject.Properties["productFamily"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "state"))) { #optional property not found
            $State = $null
        } else {
            $State = $JsonParameters.PSobject.Properties["state"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "systemWWN"))) { #optional property not found
            $SystemWWN = $null
        } else {
            $SystemWWN = $JsonParameters.PSobject.Properties["systemWWN"].value
        }

        $PSO = [PSCustomObject]@{
            "capacityInfo" = ${CapacityInfo}
            "id" = ${Id}
            "mgmtIp" = ${MgmtIp}
            "name" = ${Name}
            "productFamily" = ${ProductFamily}
            "state" = ${State}
            "systemWWN" = ${SystemWWN}
        }

        return $PSO
    }

}

