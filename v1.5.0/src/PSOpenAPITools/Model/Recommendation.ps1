#
# Data Services Cloud Console API
# Data Services Cloud Console API
# Version: 1.5.0
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Reccomendations for the device

.PARAMETER AssociatedLinks
Associated Links Details
.PARAMETER CheckTime
No description available.
.PARAMETER Displayname
Display name
.PARAMETER Domain
Domain that the resource belongs to
.PARAMETER Id
SystemWWN/UUID string uniquely identifying the object.
.PARAMETER Patches
No description available.
.PARAMETER Releases
No description available.
.PARAMETER RequestUri
requestUri for detailed storage object
.PARAMETER ResourceUri
resourceUri for detailed storage object
.PARAMETER SystemId
SystemUid/serialNumber of the array.
.PARAMETER UpdateTime
No description available.
.OUTPUTS

Recommendation<PSCustomObject>
#>

function Initialize-Recommendation {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${AssociatedLinks},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${CheckTime},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Displayname},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Domain},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Id},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Patches},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Releases},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${RequestUri},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ResourceUri},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SystemId},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${UpdateTime}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => Recommendation' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "associatedLinks" = ${AssociatedLinks}
            "checkTime" = ${CheckTime}
            "displayname" = ${Displayname}
            "domain" = ${Domain}
            "id" = ${Id}
            "patches" = ${Patches}
            "releases" = ${Releases}
            "requestUri" = ${RequestUri}
            "resourceUri" = ${ResourceUri}
            "systemId" = ${SystemId}
            "updateTime" = ${UpdateTime}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to Recommendation<PSCustomObject>

.DESCRIPTION

Convert from JSON to Recommendation<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

Recommendation<PSCustomObject>
#>
function ConvertFrom-JsonToRecommendation {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => Recommendation' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in Recommendation
        $AllProperties = ("associatedLinks", "checkTime", "displayname", "domain", "id", "patches", "releases", "requestUri", "resourceUri", "systemId", "updateTime")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "associatedLinks"))) { #optional property not found
            $AssociatedLinks = $null
        } else {
            $AssociatedLinks = $JsonParameters.PSobject.Properties["associatedLinks"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "checkTime"))) { #optional property not found
            $CheckTime = $null
        } else {
            $CheckTime = $JsonParameters.PSobject.Properties["checkTime"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "displayname"))) { #optional property not found
            $Displayname = $null
        } else {
            $Displayname = $JsonParameters.PSobject.Properties["displayname"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "domain"))) { #optional property not found
            $Domain = $null
        } else {
            $Domain = $JsonParameters.PSobject.Properties["domain"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) { #optional property not found
            $Id = $null
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "patches"))) { #optional property not found
            $Patches = $null
        } else {
            $Patches = $JsonParameters.PSobject.Properties["patches"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "releases"))) { #optional property not found
            $Releases = $null
        } else {
            $Releases = $JsonParameters.PSobject.Properties["releases"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "requestUri"))) { #optional property not found
            $RequestUri = $null
        } else {
            $RequestUri = $JsonParameters.PSobject.Properties["requestUri"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "resourceUri"))) { #optional property not found
            $ResourceUri = $null
        } else {
            $ResourceUri = $JsonParameters.PSobject.Properties["resourceUri"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "systemId"))) { #optional property not found
            $SystemId = $null
        } else {
            $SystemId = $JsonParameters.PSobject.Properties["systemId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "updateTime"))) { #optional property not found
            $UpdateTime = $null
        } else {
            $UpdateTime = $JsonParameters.PSobject.Properties["updateTime"].value
        }

        $PSO = [PSCustomObject]@{
            "associatedLinks" = ${AssociatedLinks}
            "checkTime" = ${CheckTime}
            "displayname" = ${Displayname}
            "domain" = ${Domain}
            "id" = ${Id}
            "patches" = ${Patches}
            "releases" = ${Releases}
            "requestUri" = ${RequestUri}
            "resourceUri" = ${ResourceUri}
            "systemId" = ${SystemId}
            "updateTime" = ${UpdateTime}
        }

        return $PSO
    }

}

