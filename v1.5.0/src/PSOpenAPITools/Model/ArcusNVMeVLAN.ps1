#
# Data Services Cloud Console API
# Data Services Cloud Console API
# Version: 1.5.0
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Port VLANs information

.PARAMETER Eth
Ethernet name used by the NVMe port
.PARAMETER GatewayAddress
VLAN Gateway address for the NVMe port
.PARAMETER IpAddress
VLAN IP address for the NVMe port
.PARAMETER Mtu
Maximum transmission unit (MTU) size
.PARAMETER Nqn
NVMe qualified name of the NVMe port
.PARAMETER PrefixLength
Prefix length of the NVMe port
.PARAMETER VlanId
VLAN id for the NVMe port
.OUTPUTS

ArcusNVMeVLAN<PSCustomObject>
#>

function Initialize-ArcusNVMeVLAN {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Eth},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${GatewayAddress},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${IpAddress},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Mtu},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Nqn},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${PrefixLength},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${VlanId}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => ArcusNVMeVLAN' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "eth" = ${Eth}
            "gatewayAddress" = ${GatewayAddress}
            "ipAddress" = ${IpAddress}
            "mtu" = ${Mtu}
            "nqn" = ${Nqn}
            "prefixLength" = ${PrefixLength}
            "vlanId" = ${VlanId}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to ArcusNVMeVLAN<PSCustomObject>

.DESCRIPTION

Convert from JSON to ArcusNVMeVLAN<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

ArcusNVMeVLAN<PSCustomObject>
#>
function ConvertFrom-JsonToArcusNVMeVLAN {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => ArcusNVMeVLAN' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in ArcusNVMeVLAN
        $AllProperties = ("eth", "gatewayAddress", "ipAddress", "mtu", "nqn", "prefixLength", "vlanId")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "eth"))) { #optional property not found
            $Eth = $null
        } else {
            $Eth = $JsonParameters.PSobject.Properties["eth"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "gatewayAddress"))) { #optional property not found
            $GatewayAddress = $null
        } else {
            $GatewayAddress = $JsonParameters.PSobject.Properties["gatewayAddress"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ipAddress"))) { #optional property not found
            $IpAddress = $null
        } else {
            $IpAddress = $JsonParameters.PSobject.Properties["ipAddress"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "mtu"))) { #optional property not found
            $Mtu = $null
        } else {
            $Mtu = $JsonParameters.PSobject.Properties["mtu"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "nqn"))) { #optional property not found
            $Nqn = $null
        } else {
            $Nqn = $JsonParameters.PSobject.Properties["nqn"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "prefixLength"))) { #optional property not found
            $PrefixLength = $null
        } else {
            $PrefixLength = $JsonParameters.PSobject.Properties["prefixLength"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "vlanId"))) { #optional property not found
            $VlanId = $null
        } else {
            $VlanId = $JsonParameters.PSobject.Properties["vlanId"].value
        }

        $PSO = [PSCustomObject]@{
            "eth" = ${Eth}
            "gatewayAddress" = ${GatewayAddress}
            "ipAddress" = ${IpAddress}
            "mtu" = ${Mtu}
            "nqn" = ${Nqn}
            "prefixLength" = ${PrefixLength}
            "vlanId" = ${VlanId}
        }

        return $PSO
    }

}

