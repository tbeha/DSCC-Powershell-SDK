#
# Data Services Cloud Console API
# Data Services Cloud Console API
# Version: 1.3.0
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Edit Nimble volume-collection input.

.PARAMETER AgentHostname
Generic backup agent hostname. Custom port number can be specified with agent hostname using \\"":\\"". String of up to 64 alphanumeric characters, - and . and : are allowed after first character.
.PARAMETER AgentUsername
Generic backup agent username. String of up to 64 alphanumeric characters, - and . and : are allowed after first character.
.PARAMETER AppClusterName
If the application is running within a Windows cluster environment, this is the cluster name. String of up to 64 alphanumeric characters, - and . and : are allowed after first character.
.PARAMETER AppId
Application ID running on the server. Application ID can only be specified if application synchronization is \\""vss\\"". Possible values: 'inval', 'exchange', 'exchange_dag', 'hyperv', 'sql2005', 'sql2008', 'sql2012', 'sql2014', 'sql2016', 'sql2017'.
.PARAMETER AppServer
Application server hostname. String of up to 64 alphanumeric characters, - and . and : are allowed after first character.
.PARAMETER AppServiceName
If the application is running within a Windows cluster environment then this is the instance name of the service running within the cluster environment. String of up to 64 alphanumeric characters, - and . and : are allowed after first character.
.PARAMETER AppSync
Application Synchronization. Possible values: 'none', 'vss', 'vmware', 'generic'.
.PARAMETER Description
Text description of volume collection. String of up to 255 printable ASCII characters.
.PARAMETER Name
Name of volume collection. String of up to 64 alphanumeric characters, - and . and : are allowed after first character.
.PARAMETER VcenterHostname
VMware vCenter hostname. Custom port number can be specified with vCenter hostname using \\"":\\"". String of up to 64 alphanumeric characters, - and . and : are allowed after first character.
.PARAMETER VcenterUsername
Application VMware vCenter username. String of up to 80 alphanumeric characters, beginning with a letter. It can include ampersand (@), backslash (\), dash (-), period (.), and underscore (_).
.OUTPUTS

NimbleEditVolumeCollectionInput<PSCustomObject>
#>

function Initialize-NimbleEditVolumeCollectionInput {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${AgentHostname},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${AgentUsername},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${AppClusterName},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${AppId},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${AppServer},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${AppServiceName},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${AppSync},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Description},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${VcenterHostname},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${VcenterUsername}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => NimbleEditVolumeCollectionInput' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "agent_hostname" = ${AgentHostname}
            "agent_username" = ${AgentUsername}
            "app_cluster_name" = ${AppClusterName}
            "app_id" = ${AppId}
            "app_server" = ${AppServer}
            "app_service_name" = ${AppServiceName}
            "app_sync" = ${AppSync}
            "description" = ${Description}
            "name" = ${Name}
            "vcenter_hostname" = ${VcenterHostname}
            "vcenter_username" = ${VcenterUsername}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to NimbleEditVolumeCollectionInput<PSCustomObject>

.DESCRIPTION

Convert from JSON to NimbleEditVolumeCollectionInput<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

NimbleEditVolumeCollectionInput<PSCustomObject>
#>
function ConvertFrom-JsonToNimbleEditVolumeCollectionInput {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => NimbleEditVolumeCollectionInput' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in NimbleEditVolumeCollectionInput
        $AllProperties = ("agent_hostname", "agent_username", "app_cluster_name", "app_id", "app_server", "app_service_name", "app_sync", "description", "name", "vcenter_hostname", "vcenter_username")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "agent_hostname"))) { #optional property not found
            $AgentHostname = $null
        } else {
            $AgentHostname = $JsonParameters.PSobject.Properties["agent_hostname"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "agent_username"))) { #optional property not found
            $AgentUsername = $null
        } else {
            $AgentUsername = $JsonParameters.PSobject.Properties["agent_username"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "app_cluster_name"))) { #optional property not found
            $AppClusterName = $null
        } else {
            $AppClusterName = $JsonParameters.PSobject.Properties["app_cluster_name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "app_id"))) { #optional property not found
            $AppId = $null
        } else {
            $AppId = $JsonParameters.PSobject.Properties["app_id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "app_server"))) { #optional property not found
            $AppServer = $null
        } else {
            $AppServer = $JsonParameters.PSobject.Properties["app_server"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "app_service_name"))) { #optional property not found
            $AppServiceName = $null
        } else {
            $AppServiceName = $JsonParameters.PSobject.Properties["app_service_name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "app_sync"))) { #optional property not found
            $AppSync = $null
        } else {
            $AppSync = $JsonParameters.PSobject.Properties["app_sync"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "description"))) { #optional property not found
            $Description = $null
        } else {
            $Description = $JsonParameters.PSobject.Properties["description"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) { #optional property not found
            $Name = $null
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "vcenter_hostname"))) { #optional property not found
            $VcenterHostname = $null
        } else {
            $VcenterHostname = $JsonParameters.PSobject.Properties["vcenter_hostname"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "vcenter_username"))) { #optional property not found
            $VcenterUsername = $null
        } else {
            $VcenterUsername = $JsonParameters.PSobject.Properties["vcenter_username"].value
        }

        $PSO = [PSCustomObject]@{
            "agent_hostname" = ${AgentHostname}
            "agent_username" = ${AgentUsername}
            "app_cluster_name" = ${AppClusterName}
            "app_id" = ${AppId}
            "app_server" = ${AppServer}
            "app_service_name" = ${AppServiceName}
            "app_sync" = ${AppSync}
            "description" = ${Description}
            "name" = ${Name}
            "vcenter_hostname" = ${VcenterHostname}
            "vcenter_username" = ${VcenterUsername}
        }

        return $PSO
    }

}

