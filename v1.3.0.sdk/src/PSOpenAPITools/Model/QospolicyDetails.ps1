#
# Data Services Cloud Console API
# Data Services Cloud Console API
# Version: 1.3.0
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

QoS policy details for given time range for a device

.PARAMETER QosCappedObjsData
No description available.
.PARAMETER QosUnCappedObjsData
No description available.
.PARAMETER RecvdTotal
Total number of received QoS policy details for a device based on the given query parameters
.PARAMETER Total
Total number of QoS policy details for a device based on the given query parameters
.OUTPUTS

QospolicyDetails<PSCustomObject>
#>

function Initialize-QospolicyDetails {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${QosCappedObjsData},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${QosUnCappedObjsData},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${RecvdTotal},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Total}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => QospolicyDetails' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "qosCappedObjsData" = ${QosCappedObjsData}
            "qosUnCappedObjsData" = ${QosUnCappedObjsData}
            "recvdTotal" = ${RecvdTotal}
            "total" = ${Total}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to QospolicyDetails<PSCustomObject>

.DESCRIPTION

Convert from JSON to QospolicyDetails<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

QospolicyDetails<PSCustomObject>
#>
function ConvertFrom-JsonToQospolicyDetails {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => QospolicyDetails' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in QospolicyDetails
        $AllProperties = ("qosCappedObjsData", "qosUnCappedObjsData", "recvdTotal", "total")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "qosCappedObjsData"))) { #optional property not found
            $QosCappedObjsData = $null
        } else {
            $QosCappedObjsData = $JsonParameters.PSobject.Properties["qosCappedObjsData"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "qosUnCappedObjsData"))) { #optional property not found
            $QosUnCappedObjsData = $null
        } else {
            $QosUnCappedObjsData = $JsonParameters.PSobject.Properties["qosUnCappedObjsData"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "recvdTotal"))) { #optional property not found
            $RecvdTotal = $null
        } else {
            $RecvdTotal = $JsonParameters.PSobject.Properties["recvdTotal"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "total"))) { #optional property not found
            $Total = $null
        } else {
            $Total = $JsonParameters.PSobject.Properties["total"].value
        }

        $PSO = [PSCustomObject]@{
            "qosCappedObjsData" = ${QosCappedObjsData}
            "qosUnCappedObjsData" = ${QosUnCappedObjsData}
            "recvdTotal" = ${RecvdTotal}
            "total" = ${Total}
        }

        return $PSO
    }

}

