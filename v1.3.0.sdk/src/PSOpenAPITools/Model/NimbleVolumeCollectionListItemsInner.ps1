#
# Data Services Cloud Console API
# Data Services Cloud Console API
# Version: 1.3.0
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER AppClusterName
If the application is running within a Windows cluster environment, this is the cluster name. `Filter, Sort`
.PARAMETER AppId
Application ID running on the server. Application ID can only be specified if application synchronization is \\""vss\\"". `Filter, Sort` Possible values: 'exchange_dag', 'sql2012', 'inval', 'sql2014', 'sql2005', 'sql2016', 'exchange', 'sql2017', 'sql2018', 'hyperv'.
.PARAMETER AppServer
Application server hostname. `Filter, Sort`
.PARAMETER AppServiceName
If the application is running within a Windows cluster environment then this is the instance name of the service running within the cluster environment. `Filter, Sort`
.PARAMETER Id
Identifier of the Volume-Collection. `Filter`
.PARAMETER Name
Name of volume collection. `Filter, Sort`
.PARAMETER ProttmplId
Identifier of the protection template whose attributes will be used to create this volume collection. This attribute is only used for input when creating a volume collection and is not outputed. `Filter, Sort`
.PARAMETER ReplicationType
Type of replication configured for the volume collection. Possible values: 'synchronous', 'periodic_snapshot'. `Filter, Sort`
.PARAMETER SynchronousReplicationState
State of synchronous replication on the volume collection. Possible values: 'in_sync', 'not_applicable', 'out_of_sync', 'unknown'. `Filter, Sort`
.PARAMETER SynchronousReplicationType
Type of synchronous replication configured for the volume collection. Possible values: 'soft_available', 'not_applicable'. `Filter, Sort`
.PARAMETER AgentHostname
Generic backup agent hostname. Custom port number can be specified with agent hostname using \\"":\\"".
.PARAMETER AppSync
Application Synchronization. Possible values: 'vss', 'vmware', 'none', 'generic'.
.PARAMETER AssociatedLinks
Associated Links Details
.PARAMETER CachePinnedVolumeList
List of cache pinned volumes associated with volume collection.
.PARAMETER ConsoleUri
consoleUri for detailed storage object
.PARAMETER CreationTime
Application server hostname.
.PARAMETER CustomerId
customerId
.PARAMETER Description
Text descrption of volume collection.
.PARAMETER FullName
Fully qualified name of volume collection.
.PARAMETER Generation
generation
.PARAMETER HandoverReplicationPartner
Replication partner to which ownership is being transferred as part of handover operation.
.PARAMETER IsHandingOver
Indicates whether a handover operation is in progress on this volume collection.
.PARAMETER IsMfaProtected
Protected by multi-factor authentication. Possible values: 'true', 'false'.
.PARAMETER IsStandaloneVolcoll
Last snapshot collection on this volume collection.
.PARAMETER LagTime
Replication lag time for volume collection.
.PARAMETER LastReplicatedSnapcoll
Last replicated snapshot collection on this volume collection.
.PARAMETER LastSnapcoll
Last snapshot collection on this volume collection.
.PARAMETER Metadata
Key-value pairs that augment a volume collection's attributes.
.PARAMETER PolOwnerName
PolOwnerName - Owner group.
.PARAMETER ProtectionType
Specifies if volume collection is protected with schedules. If protected, indicated whether replication is setup.
.PARAMETER ReplBytesTransferred
Total size of volumes replicated for this volume collection.
.PARAMETER ReplPriority
Replication priority for the volume collection with the following choices: {normal | high}.  Possible values: 'normal', 'high'.
.PARAMETER ReplicationPartner
List of replication partners associated with the volume collection.
.PARAMETER ResourceUri
Link to the object URI
.PARAMETER ScheduleList
List of schedules for this volume collection.
.PARAMETER SearchName
Name of volume collection used for object search.
.PARAMETER SnapcollCount
Count of snapshot collections associated with volume collection.
.PARAMETER SrepLastSync
Time when a synchronously replicated volume collection was last synchronized.
.PARAMETER SrepResyncPercent
Percentage of the resync progress for a synchronously replicated volume collection.
.PARAMETER TotalReplBytes
Total size of volumes to be replicated for this volume collection.
.PARAMETER Type
type
.PARAMETER VcenterHostname
VMware vCenter hostname. Custom port number can be specified with vCenter hostname using \\"":\\"".
.PARAMETER VcenterUsername
Application VMware vCenter username.
.PARAMETER VolumeCount
Count of volumes associated with the volume collection.
.PARAMETER VolumeList
List of volumes associated with the volume collection.
.OUTPUTS

NimbleVolumeCollectionListItemsInner<PSCustomObject>
#>

function Initialize-NimbleVolumeCollectionListItemsInner {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${AppClusterName},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${AppId},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${AppServer},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${AppServiceName},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Id},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ProttmplId},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ReplicationType},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SynchronousReplicationState},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SynchronousReplicationType},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${AgentHostname},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${AppSync},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${AssociatedLinks},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${CachePinnedVolumeList},
        [Parameter(Position = 14, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ConsoleUri},
        [Parameter(Position = 15, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${CreationTime},
        [Parameter(Position = 16, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${CustomerId},
        [Parameter(Position = 17, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Description},
        [Parameter(Position = 18, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${FullName},
        [Parameter(Position = 19, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Generation},
        [Parameter(Position = 20, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${HandoverReplicationPartner},
        [Parameter(Position = 21, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${IsHandingOver},
        [Parameter(Position = 22, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${IsMfaProtected},
        [Parameter(Position = 23, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${IsStandaloneVolcoll},
        [Parameter(Position = 24, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${LagTime},
        [Parameter(Position = 25, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${LastReplicatedSnapcoll},
        [Parameter(Position = 26, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${LastSnapcoll},
        [Parameter(Position = 27, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Metadata},
        [Parameter(Position = 28, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${PolOwnerName},
        [Parameter(Position = 29, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ProtectionType},
        [Parameter(Position = 30, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${ReplBytesTransferred},
        [Parameter(Position = 31, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ReplPriority},
        [Parameter(Position = 32, ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${ReplicationPartner},
        [Parameter(Position = 33, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ResourceUri},
        [Parameter(Position = 34, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${ScheduleList},
        [Parameter(Position = 35, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SearchName},
        [Parameter(Position = 36, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${SnapcollCount},
        [Parameter(Position = 37, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${SrepLastSync},
        [Parameter(Position = 38, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${SrepResyncPercent},
        [Parameter(Position = 39, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${TotalReplBytes},
        [Parameter(Position = 40, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Type},
        [Parameter(Position = 41, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${VcenterHostname},
        [Parameter(Position = 42, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${VcenterUsername},
        [Parameter(Position = 43, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${VolumeCount},
        [Parameter(Position = 44, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${VolumeList}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => NimbleVolumeCollectionListItemsInner' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "app_cluster_name" = ${AppClusterName}
            "app_id" = ${AppId}
            "app_server" = ${AppServer}
            "app_service_name" = ${AppServiceName}
            "id" = ${Id}
            "name" = ${Name}
            "prottmpl_id" = ${ProttmplId}
            "replication_type" = ${ReplicationType}
            "synchronous_replication_state" = ${SynchronousReplicationState}
            "synchronous_replication_type" = ${SynchronousReplicationType}
            "agent_hostname" = ${AgentHostname}
            "app_sync" = ${AppSync}
            "associated_links" = ${AssociatedLinks}
            "cache_pinned_volume_list" = ${CachePinnedVolumeList}
            "consoleUri" = ${ConsoleUri}
            "creation_time" = ${CreationTime}
            "customerId" = ${CustomerId}
            "description" = ${Description}
            "full_name" = ${FullName}
            "generation" = ${Generation}
            "handover_replication_partner" = ${HandoverReplicationPartner}
            "is_handing_over" = ${IsHandingOver}
            "is_mfa_protected" = ${IsMfaProtected}
            "is_standalone_volcoll" = ${IsStandaloneVolcoll}
            "lag_time" = ${LagTime}
            "last_replicated_snapcoll" = ${LastReplicatedSnapcoll}
            "last_snapcoll" = ${LastSnapcoll}
            "metadata" = ${Metadata}
            "pol_owner_name" = ${PolOwnerName}
            "protection_type" = ${ProtectionType}
            "repl_bytes_transferred" = ${ReplBytesTransferred}
            "repl_priority" = ${ReplPriority}
            "replication_partner" = ${ReplicationPartner}
            "resourceUri" = ${ResourceUri}
            "schedule_list" = ${ScheduleList}
            "search_name" = ${SearchName}
            "snapcoll_count" = ${SnapcollCount}
            "srep_last_sync" = ${SrepLastSync}
            "srep_resync_percent" = ${SrepResyncPercent}
            "total_repl_bytes" = ${TotalReplBytes}
            "type" = ${Type}
            "vcenter_hostname" = ${VcenterHostname}
            "vcenter_username" = ${VcenterUsername}
            "volume_count" = ${VolumeCount}
            "volume_list" = ${VolumeList}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to NimbleVolumeCollectionListItemsInner<PSCustomObject>

.DESCRIPTION

Convert from JSON to NimbleVolumeCollectionListItemsInner<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

NimbleVolumeCollectionListItemsInner<PSCustomObject>
#>
function ConvertFrom-JsonToNimbleVolumeCollectionListItemsInner {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => NimbleVolumeCollectionListItemsInner' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in NimbleVolumeCollectionListItemsInner
        $AllProperties = ("app_cluster_name", "app_id", "app_server", "app_service_name", "id", "name", "prottmpl_id", "replication_type", "synchronous_replication_state", "synchronous_replication_type", "agent_hostname", "app_sync", "associated_links", "cache_pinned_volume_list", "consoleUri", "creation_time", "customerId", "description", "full_name", "generation", "handover_replication_partner", "is_handing_over", "is_mfa_protected", "is_standalone_volcoll", "lag_time", "last_replicated_snapcoll", "last_snapcoll", "metadata", "pol_owner_name", "protection_type", "repl_bytes_transferred", "repl_priority", "replication_partner", "resourceUri", "schedule_list", "search_name", "snapcoll_count", "srep_last_sync", "srep_resync_percent", "total_repl_bytes", "type", "vcenter_hostname", "vcenter_username", "volume_count", "volume_list")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "app_cluster_name"))) { #optional property not found
            $AppClusterName = $null
        } else {
            $AppClusterName = $JsonParameters.PSobject.Properties["app_cluster_name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "app_id"))) { #optional property not found
            $AppId = $null
        } else {
            $AppId = $JsonParameters.PSobject.Properties["app_id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "app_server"))) { #optional property not found
            $AppServer = $null
        } else {
            $AppServer = $JsonParameters.PSobject.Properties["app_server"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "app_service_name"))) { #optional property not found
            $AppServiceName = $null
        } else {
            $AppServiceName = $JsonParameters.PSobject.Properties["app_service_name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) { #optional property not found
            $Id = $null
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) { #optional property not found
            $Name = $null
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "prottmpl_id"))) { #optional property not found
            $ProttmplId = $null
        } else {
            $ProttmplId = $JsonParameters.PSobject.Properties["prottmpl_id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "replication_type"))) { #optional property not found
            $ReplicationType = $null
        } else {
            $ReplicationType = $JsonParameters.PSobject.Properties["replication_type"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "synchronous_replication_state"))) { #optional property not found
            $SynchronousReplicationState = $null
        } else {
            $SynchronousReplicationState = $JsonParameters.PSobject.Properties["synchronous_replication_state"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "synchronous_replication_type"))) { #optional property not found
            $SynchronousReplicationType = $null
        } else {
            $SynchronousReplicationType = $JsonParameters.PSobject.Properties["synchronous_replication_type"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "agent_hostname"))) { #optional property not found
            $AgentHostname = $null
        } else {
            $AgentHostname = $JsonParameters.PSobject.Properties["agent_hostname"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "app_sync"))) { #optional property not found
            $AppSync = $null
        } else {
            $AppSync = $JsonParameters.PSobject.Properties["app_sync"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "associated_links"))) { #optional property not found
            $AssociatedLinks = $null
        } else {
            $AssociatedLinks = $JsonParameters.PSobject.Properties["associated_links"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "cache_pinned_volume_list"))) { #optional property not found
            $CachePinnedVolumeList = $null
        } else {
            $CachePinnedVolumeList = $JsonParameters.PSobject.Properties["cache_pinned_volume_list"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "consoleUri"))) { #optional property not found
            $ConsoleUri = $null
        } else {
            $ConsoleUri = $JsonParameters.PSobject.Properties["consoleUri"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "creation_time"))) { #optional property not found
            $CreationTime = $null
        } else {
            $CreationTime = $JsonParameters.PSobject.Properties["creation_time"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "customerId"))) { #optional property not found
            $CustomerId = $null
        } else {
            $CustomerId = $JsonParameters.PSobject.Properties["customerId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "description"))) { #optional property not found
            $Description = $null
        } else {
            $Description = $JsonParameters.PSobject.Properties["description"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "full_name"))) { #optional property not found
            $FullName = $null
        } else {
            $FullName = $JsonParameters.PSobject.Properties["full_name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "generation"))) { #optional property not found
            $Generation = $null
        } else {
            $Generation = $JsonParameters.PSobject.Properties["generation"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "handover_replication_partner"))) { #optional property not found
            $HandoverReplicationPartner = $null
        } else {
            $HandoverReplicationPartner = $JsonParameters.PSobject.Properties["handover_replication_partner"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "is_handing_over"))) { #optional property not found
            $IsHandingOver = $null
        } else {
            $IsHandingOver = $JsonParameters.PSobject.Properties["is_handing_over"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "is_mfa_protected"))) { #optional property not found
            $IsMfaProtected = $null
        } else {
            $IsMfaProtected = $JsonParameters.PSobject.Properties["is_mfa_protected"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "is_standalone_volcoll"))) { #optional property not found
            $IsStandaloneVolcoll = $null
        } else {
            $IsStandaloneVolcoll = $JsonParameters.PSobject.Properties["is_standalone_volcoll"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "lag_time"))) { #optional property not found
            $LagTime = $null
        } else {
            $LagTime = $JsonParameters.PSobject.Properties["lag_time"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "last_replicated_snapcoll"))) { #optional property not found
            $LastReplicatedSnapcoll = $null
        } else {
            $LastReplicatedSnapcoll = $JsonParameters.PSobject.Properties["last_replicated_snapcoll"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "last_snapcoll"))) { #optional property not found
            $LastSnapcoll = $null
        } else {
            $LastSnapcoll = $JsonParameters.PSobject.Properties["last_snapcoll"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "metadata"))) { #optional property not found
            $Metadata = $null
        } else {
            $Metadata = $JsonParameters.PSobject.Properties["metadata"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "pol_owner_name"))) { #optional property not found
            $PolOwnerName = $null
        } else {
            $PolOwnerName = $JsonParameters.PSobject.Properties["pol_owner_name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "protection_type"))) { #optional property not found
            $ProtectionType = $null
        } else {
            $ProtectionType = $JsonParameters.PSobject.Properties["protection_type"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "repl_bytes_transferred"))) { #optional property not found
            $ReplBytesTransferred = $null
        } else {
            $ReplBytesTransferred = $JsonParameters.PSobject.Properties["repl_bytes_transferred"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "repl_priority"))) { #optional property not found
            $ReplPriority = $null
        } else {
            $ReplPriority = $JsonParameters.PSobject.Properties["repl_priority"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "replication_partner"))) { #optional property not found
            $ReplicationPartner = $null
        } else {
            $ReplicationPartner = $JsonParameters.PSobject.Properties["replication_partner"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "resourceUri"))) { #optional property not found
            $ResourceUri = $null
        } else {
            $ResourceUri = $JsonParameters.PSobject.Properties["resourceUri"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "schedule_list"))) { #optional property not found
            $ScheduleList = $null
        } else {
            $ScheduleList = $JsonParameters.PSobject.Properties["schedule_list"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "search_name"))) { #optional property not found
            $SearchName = $null
        } else {
            $SearchName = $JsonParameters.PSobject.Properties["search_name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "snapcoll_count"))) { #optional property not found
            $SnapcollCount = $null
        } else {
            $SnapcollCount = $JsonParameters.PSobject.Properties["snapcoll_count"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "srep_last_sync"))) { #optional property not found
            $SrepLastSync = $null
        } else {
            $SrepLastSync = $JsonParameters.PSobject.Properties["srep_last_sync"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "srep_resync_percent"))) { #optional property not found
            $SrepResyncPercent = $null
        } else {
            $SrepResyncPercent = $JsonParameters.PSobject.Properties["srep_resync_percent"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "total_repl_bytes"))) { #optional property not found
            $TotalReplBytes = $null
        } else {
            $TotalReplBytes = $JsonParameters.PSobject.Properties["total_repl_bytes"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "type"))) { #optional property not found
            $Type = $null
        } else {
            $Type = $JsonParameters.PSobject.Properties["type"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "vcenter_hostname"))) { #optional property not found
            $VcenterHostname = $null
        } else {
            $VcenterHostname = $JsonParameters.PSobject.Properties["vcenter_hostname"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "vcenter_username"))) { #optional property not found
            $VcenterUsername = $null
        } else {
            $VcenterUsername = $JsonParameters.PSobject.Properties["vcenter_username"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "volume_count"))) { #optional property not found
            $VolumeCount = $null
        } else {
            $VolumeCount = $JsonParameters.PSobject.Properties["volume_count"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "volume_list"))) { #optional property not found
            $VolumeList = $null
        } else {
            $VolumeList = $JsonParameters.PSobject.Properties["volume_list"].value
        }

        $PSO = [PSCustomObject]@{
            "app_cluster_name" = ${AppClusterName}
            "app_id" = ${AppId}
            "app_server" = ${AppServer}
            "app_service_name" = ${AppServiceName}
            "id" = ${Id}
            "name" = ${Name}
            "prottmpl_id" = ${ProttmplId}
            "replication_type" = ${ReplicationType}
            "synchronous_replication_state" = ${SynchronousReplicationState}
            "synchronous_replication_type" = ${SynchronousReplicationType}
            "agent_hostname" = ${AgentHostname}
            "app_sync" = ${AppSync}
            "associated_links" = ${AssociatedLinks}
            "cache_pinned_volume_list" = ${CachePinnedVolumeList}
            "consoleUri" = ${ConsoleUri}
            "creation_time" = ${CreationTime}
            "customerId" = ${CustomerId}
            "description" = ${Description}
            "full_name" = ${FullName}
            "generation" = ${Generation}
            "handover_replication_partner" = ${HandoverReplicationPartner}
            "is_handing_over" = ${IsHandingOver}
            "is_mfa_protected" = ${IsMfaProtected}
            "is_standalone_volcoll" = ${IsStandaloneVolcoll}
            "lag_time" = ${LagTime}
            "last_replicated_snapcoll" = ${LastReplicatedSnapcoll}
            "last_snapcoll" = ${LastSnapcoll}
            "metadata" = ${Metadata}
            "pol_owner_name" = ${PolOwnerName}
            "protection_type" = ${ProtectionType}
            "repl_bytes_transferred" = ${ReplBytesTransferred}
            "repl_priority" = ${ReplPriority}
            "replication_partner" = ${ReplicationPartner}
            "resourceUri" = ${ResourceUri}
            "schedule_list" = ${ScheduleList}
            "search_name" = ${SearchName}
            "snapcoll_count" = ${SnapcollCount}
            "srep_last_sync" = ${SrepLastSync}
            "srep_resync_percent" = ${SrepResyncPercent}
            "total_repl_bytes" = ${TotalReplBytes}
            "type" = ${Type}
            "vcenter_hostname" = ${VcenterHostname}
            "vcenter_username" = ${VcenterUsername}
            "volume_count" = ${VolumeCount}
            "volume_list" = ${VolumeList}
        }

        return $PSO
    }

}

