#
# Data Services Cloud Console API
# Data Services Cloud Console API
# Version: 1.3.0
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Response schema

.PARAMETER CustomerId
The customer application identifier
.PARAMETER Fans
Describe fans
.PARAMETER FileServer
No description available.
.PARAMETER Generation
This value updates when the resource is updated and can be used as a short way to determine if a resource has changed or which of two different copies of a resource is more up to date. 
.PARAMETER Id
Specifies the id of the JBOF enclosures
.PARAMETER JbofNodes
Associated jbof-nodes details
.PARAMETER Model
Model of the JBOF enclosure
.PARAMETER Name
Specifies the name of the JBOF Enclosure
.PARAMETER PowerSupplyUnits
Describes power supply units
.PARAMETER ResourceUri
Resource URI of the file server JBOF enclosure
.PARAMETER Serial
The serial number of the JBOF enclosure
.PARAMETER State
Health Status of the JBOF enclosure
.PARAMETER Uuid
Specifies the uuid of the JBOF enclosure
.OUTPUTS

GetJBOFEnclosureResponse<PSCustomObject>
#>

function Initialize-GetJBOFEnclosureResponse {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${CustomerId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Fans},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${FileServer},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${Generation},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${Id},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${JbofNodes},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Model},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${PowerSupplyUnits},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ResourceUri},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Serial},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${State},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Uuid}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => GetJBOFEnclosureResponse' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($Generation -and $Generation -lt 0) {
          throw "invalid value for 'Generation', must be greater than or equal to 0."
        }


        $PSO = [PSCustomObject]@{
            "customerId" = ${CustomerId}
            "fans" = ${Fans}
            "fileServer" = ${FileServer}
            "generation" = ${Generation}
            "id" = ${Id}
            "jbofNodes" = ${JbofNodes}
            "model" = ${Model}
            "name" = ${Name}
            "powerSupplyUnits" = ${PowerSupplyUnits}
            "resourceUri" = ${ResourceUri}
            "serial" = ${Serial}
            "state" = ${State}
            "uuid" = ${Uuid}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to GetJBOFEnclosureResponse<PSCustomObject>

.DESCRIPTION

Convert from JSON to GetJBOFEnclosureResponse<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

GetJBOFEnclosureResponse<PSCustomObject>
#>
function ConvertFrom-JsonToGetJBOFEnclosureResponse {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => GetJBOFEnclosureResponse' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in GetJBOFEnclosureResponse
        $AllProperties = ("customerId", "fans", "fileServer", "generation", "id", "jbofNodes", "model", "name", "powerSupplyUnits", "resourceUri", "serial", "state", "uuid")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "customerId"))) { #optional property not found
            $CustomerId = $null
        } else {
            $CustomerId = $JsonParameters.PSobject.Properties["customerId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "fans"))) { #optional property not found
            $Fans = $null
        } else {
            $Fans = $JsonParameters.PSobject.Properties["fans"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "fileServer"))) { #optional property not found
            $FileServer = $null
        } else {
            $FileServer = $JsonParameters.PSobject.Properties["fileServer"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "generation"))) { #optional property not found
            $Generation = $null
        } else {
            $Generation = $JsonParameters.PSobject.Properties["generation"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) { #optional property not found
            $Id = $null
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "jbofNodes"))) { #optional property not found
            $JbofNodes = $null
        } else {
            $JbofNodes = $JsonParameters.PSobject.Properties["jbofNodes"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "model"))) { #optional property not found
            $Model = $null
        } else {
            $Model = $JsonParameters.PSobject.Properties["model"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) { #optional property not found
            $Name = $null
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "powerSupplyUnits"))) { #optional property not found
            $PowerSupplyUnits = $null
        } else {
            $PowerSupplyUnits = $JsonParameters.PSobject.Properties["powerSupplyUnits"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "resourceUri"))) { #optional property not found
            $ResourceUri = $null
        } else {
            $ResourceUri = $JsonParameters.PSobject.Properties["resourceUri"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "serial"))) { #optional property not found
            $Serial = $null
        } else {
            $Serial = $JsonParameters.PSobject.Properties["serial"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "state"))) { #optional property not found
            $State = $null
        } else {
            $State = $JsonParameters.PSobject.Properties["state"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "uuid"))) { #optional property not found
            $Uuid = $null
        } else {
            $Uuid = $JsonParameters.PSobject.Properties["uuid"].value
        }

        $PSO = [PSCustomObject]@{
            "customerId" = ${CustomerId}
            "fans" = ${Fans}
            "fileServer" = ${FileServer}
            "generation" = ${Generation}
            "id" = ${Id}
            "jbofNodes" = ${JbofNodes}
            "model" = ${Model}
            "name" = ${Name}
            "powerSupplyUnits" = ${PowerSupplyUnits}
            "resourceUri" = ${ResourceUri}
            "serial" = ${Serial}
            "state" = ${State}
            "uuid" = ${Uuid}
        }

        return $PSO
    }

}

