#
# Data Services Cloud Console API
# Data Services Cloud Console API
# Version: 1.3.0
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

remote syslog settings

.PARAMETER Protocol
Protocol used to send syslog
.PARAMETER SyslogdEnabled
Indicates whether syslogd is enabled or not
.PARAMETER SyslogdHost
syslogd host
.PARAMETER SyslogdPort
syslogd port
.OUTPUTS

GetSystemSettingsResponseSyslogdSettings<PSCustomObject>
#>

function Initialize-GetSystemSettingsResponseSyslogdSettings {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Protocol},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${SyslogdEnabled},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SyslogdHost},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${SyslogdPort}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => GetSystemSettingsResponseSyslogdSettings' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($SyslogdPort -and $SyslogdPort -gt 65535) {
          throw "invalid value for 'SyslogdPort', must be smaller than or equal to 65535."
        }

        if ($SyslogdPort -and $SyslogdPort -lt 1) {
          throw "invalid value for 'SyslogdPort', must be greater than or equal to 1."
        }


        $PSO = [PSCustomObject]@{
            "protocol" = ${Protocol}
            "syslogdEnabled" = ${SyslogdEnabled}
            "syslogdHost" = ${SyslogdHost}
            "syslogdPort" = ${SyslogdPort}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to GetSystemSettingsResponseSyslogdSettings<PSCustomObject>

.DESCRIPTION

Convert from JSON to GetSystemSettingsResponseSyslogdSettings<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

GetSystemSettingsResponseSyslogdSettings<PSCustomObject>
#>
function ConvertFrom-JsonToGetSystemSettingsResponseSyslogdSettings {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => GetSystemSettingsResponseSyslogdSettings' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in GetSystemSettingsResponseSyslogdSettings
        $AllProperties = ("protocol", "syslogdEnabled", "syslogdHost", "syslogdPort")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "protocol"))) { #optional property not found
            $Protocol = $null
        } else {
            $Protocol = $JsonParameters.PSobject.Properties["protocol"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "syslogdEnabled"))) { #optional property not found
            $SyslogdEnabled = $null
        } else {
            $SyslogdEnabled = $JsonParameters.PSobject.Properties["syslogdEnabled"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "syslogdHost"))) { #optional property not found
            $SyslogdHost = $null
        } else {
            $SyslogdHost = $JsonParameters.PSobject.Properties["syslogdHost"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "syslogdPort"))) { #optional property not found
            $SyslogdPort = $null
        } else {
            $SyslogdPort = $JsonParameters.PSobject.Properties["syslogdPort"].value
        }

        $PSO = [PSCustomObject]@{
            "protocol" = ${Protocol}
            "syslogdEnabled" = ${SyslogdEnabled}
            "syslogdHost" = ${SyslogdHost}
            "syslogdPort" = ${SyslogdPort}
        }

        return $PSO
    }

}

