#
# Data Services Cloud Console API
# Data Services Cloud Console API
# Version: 1.3.0
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER ControllerName
Name (A or B) of the controller where the interface is hosted. Plain string. `Filter`
.PARAMETER FcPortId
ID of the port with which the interface is associated. `Filter`
.PARAMETER Id
Identifier for the interface. A 42 digit hexadecimal number. `Filter`
.PARAMETER Name
Name of the interface. `Filter, Sort`
.PARAMETER Wwnn
World Wide Node Name for this Fibre Channel interface. `Filter, Sort`
.PARAMETER Wwpn
World Wide Port Name for this Fibre Channel interface. `Filter, Sort`
.PARAMETER ArrayNameOrSerial
Name or serial number of array where the interface is hosted.
.PARAMETER BusLocation
PCI bus location of the HBA for this Fibre Channel port.
.PARAMETER ConsoleUri
consoleUri for detailed storage object
.PARAMETER CustomerId
customerId
.PARAMETER FabricInfo
No description available.
.PARAMETER FcPortName
Name of Fibre Channel port.
.PARAMETER FirmwareVersion
Version of the Fibre Channel firmware.
.PARAMETER Generation
generation
.PARAMETER LinkInfo
No description available.
.PARAMETER LogicalPortNumber
Logical port number for the Fibre Channel port.
.PARAMETER Online
Identify whether the Fibre Channel interface is online.
.PARAMETER Orientation
Orientation of FC ports on a HBA. An orientation of 'right_to_left' indicates that ports are ordered as 3,2,1,0 on the slot. Possible values: 'left_to_right', 'right_to_left'.
.PARAMETER PartialResponseOk
Port response.
.PARAMETER Peerzone
Active peer zone for this Fibre Channel interface.
.PARAMETER Port
HBA port number for this Fibre Channel port.
.PARAMETER Slot
HBA slot number for this Fibre Channel port.
.PARAMETER Type
type
.OUTPUTS

NimblePortsListFibreChannelInterfaceItemsInner<PSCustomObject>
#>

function Initialize-NimblePortsListFibreChannelInterfaceItemsInner {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ControllerName},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${FcPortId},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Id},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Wwnn},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Wwpn},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ArrayNameOrSerial},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${BusLocation},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ConsoleUri},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${CustomerId},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${FabricInfo},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${FcPortName},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${FirmwareVersion},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Generation},
        [Parameter(Position = 14, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${LinkInfo},
        [Parameter(Position = 15, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${LogicalPortNumber},
        [Parameter(Position = 16, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${Online},
        [Parameter(Position = 17, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Orientation},
        [Parameter(Position = 18, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${PartialResponseOk},
        [Parameter(Position = 19, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Peerzone},
        [Parameter(Position = 20, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${Port},
        [Parameter(Position = 21, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${Slot},
        [Parameter(Position = 22, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Type}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => NimblePortsListFibreChannelInterfaceItemsInner' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "controller_name" = ${ControllerName}
            "fc_port_id" = ${FcPortId}
            "id" = ${Id}
            "name" = ${Name}
            "wwnn" = ${Wwnn}
            "wwpn" = ${Wwpn}
            "array_name_or_serial" = ${ArrayNameOrSerial}
            "bus_location" = ${BusLocation}
            "consoleUri" = ${ConsoleUri}
            "customerId" = ${CustomerId}
            "fabric_info" = ${FabricInfo}
            "fc_port_name" = ${FcPortName}
            "firmware_version" = ${FirmwareVersion}
            "generation" = ${Generation}
            "link_info" = ${LinkInfo}
            "logical_port_number" = ${LogicalPortNumber}
            "online" = ${Online}
            "orientation" = ${Orientation}
            "partial_response_ok" = ${PartialResponseOk}
            "peerzone" = ${Peerzone}
            "port" = ${Port}
            "slot" = ${Slot}
            "type" = ${Type}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to NimblePortsListFibreChannelInterfaceItemsInner<PSCustomObject>

.DESCRIPTION

Convert from JSON to NimblePortsListFibreChannelInterfaceItemsInner<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

NimblePortsListFibreChannelInterfaceItemsInner<PSCustomObject>
#>
function ConvertFrom-JsonToNimblePortsListFibreChannelInterfaceItemsInner {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => NimblePortsListFibreChannelInterfaceItemsInner' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in NimblePortsListFibreChannelInterfaceItemsInner
        $AllProperties = ("controller_name", "fc_port_id", "id", "name", "wwnn", "wwpn", "array_name_or_serial", "bus_location", "consoleUri", "customerId", "fabric_info", "fc_port_name", "firmware_version", "generation", "link_info", "logical_port_number", "online", "orientation", "partial_response_ok", "peerzone", "port", "slot", "type")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "controller_name"))) { #optional property not found
            $ControllerName = $null
        } else {
            $ControllerName = $JsonParameters.PSobject.Properties["controller_name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "fc_port_id"))) { #optional property not found
            $FcPortId = $null
        } else {
            $FcPortId = $JsonParameters.PSobject.Properties["fc_port_id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) { #optional property not found
            $Id = $null
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) { #optional property not found
            $Name = $null
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "wwnn"))) { #optional property not found
            $Wwnn = $null
        } else {
            $Wwnn = $JsonParameters.PSobject.Properties["wwnn"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "wwpn"))) { #optional property not found
            $Wwpn = $null
        } else {
            $Wwpn = $JsonParameters.PSobject.Properties["wwpn"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "array_name_or_serial"))) { #optional property not found
            $ArrayNameOrSerial = $null
        } else {
            $ArrayNameOrSerial = $JsonParameters.PSobject.Properties["array_name_or_serial"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "bus_location"))) { #optional property not found
            $BusLocation = $null
        } else {
            $BusLocation = $JsonParameters.PSobject.Properties["bus_location"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "consoleUri"))) { #optional property not found
            $ConsoleUri = $null
        } else {
            $ConsoleUri = $JsonParameters.PSobject.Properties["consoleUri"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "customerId"))) { #optional property not found
            $CustomerId = $null
        } else {
            $CustomerId = $JsonParameters.PSobject.Properties["customerId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "fabric_info"))) { #optional property not found
            $FabricInfo = $null
        } else {
            $FabricInfo = $JsonParameters.PSobject.Properties["fabric_info"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "fc_port_name"))) { #optional property not found
            $FcPortName = $null
        } else {
            $FcPortName = $JsonParameters.PSobject.Properties["fc_port_name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "firmware_version"))) { #optional property not found
            $FirmwareVersion = $null
        } else {
            $FirmwareVersion = $JsonParameters.PSobject.Properties["firmware_version"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "generation"))) { #optional property not found
            $Generation = $null
        } else {
            $Generation = $JsonParameters.PSobject.Properties["generation"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "link_info"))) { #optional property not found
            $LinkInfo = $null
        } else {
            $LinkInfo = $JsonParameters.PSobject.Properties["link_info"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "logical_port_number"))) { #optional property not found
            $LogicalPortNumber = $null
        } else {
            $LogicalPortNumber = $JsonParameters.PSobject.Properties["logical_port_number"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "online"))) { #optional property not found
            $Online = $null
        } else {
            $Online = $JsonParameters.PSobject.Properties["online"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "orientation"))) { #optional property not found
            $Orientation = $null
        } else {
            $Orientation = $JsonParameters.PSobject.Properties["orientation"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "partial_response_ok"))) { #optional property not found
            $PartialResponseOk = $null
        } else {
            $PartialResponseOk = $JsonParameters.PSobject.Properties["partial_response_ok"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "peerzone"))) { #optional property not found
            $Peerzone = $null
        } else {
            $Peerzone = $JsonParameters.PSobject.Properties["peerzone"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "port"))) { #optional property not found
            $Port = $null
        } else {
            $Port = $JsonParameters.PSobject.Properties["port"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "slot"))) { #optional property not found
            $Slot = $null
        } else {
            $Slot = $JsonParameters.PSobject.Properties["slot"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "type"))) { #optional property not found
            $Type = $null
        } else {
            $Type = $JsonParameters.PSobject.Properties["type"].value
        }

        $PSO = [PSCustomObject]@{
            "controller_name" = ${ControllerName}
            "fc_port_id" = ${FcPortId}
            "id" = ${Id}
            "name" = ${Name}
            "wwnn" = ${Wwnn}
            "wwpn" = ${Wwpn}
            "array_name_or_serial" = ${ArrayNameOrSerial}
            "bus_location" = ${BusLocation}
            "consoleUri" = ${ConsoleUri}
            "customerId" = ${CustomerId}
            "fabric_info" = ${FabricInfo}
            "fc_port_name" = ${FcPortName}
            "firmware_version" = ${FirmwareVersion}
            "generation" = ${Generation}
            "link_info" = ${LinkInfo}
            "logical_port_number" = ${LogicalPortNumber}
            "online" = ${Online}
            "orientation" = ${Orientation}
            "partial_response_ok" = ${PartialResponseOk}
            "peerzone" = ${Peerzone}
            "port" = ${Port}
            "slot" = ${Slot}
            "type" = ${Type}
        }

        return $PSO
    }

}

