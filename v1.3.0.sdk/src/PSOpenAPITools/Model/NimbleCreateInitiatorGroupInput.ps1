#
# Data Services Cloud Console API
# Data Services Cloud Console API
# Version: 1.3.0
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Create Nimble intiator group input.

.PARAMETER AccessProtocol
Initiator group access protocol.
.PARAMETER AppUuid
Application identifier of initiator group. String of up to 255 alphanumeric characters, hyphen, colon, dot and underscore are allowed
.PARAMETER Description
Text description of initiator group. String of up to 255 printable ASCII characters.
.PARAMETER FcInitiators
List of FC initiators. When create/update fc_initiators, wwpn is required. List of Fibre Channel initiators.
.PARAMETER FcTdzPorts
List of target Fibre Channel ports with Target Driven Zoning configured on this initiator group. List of target ports.
.PARAMETER HostType
Initiator group host type. Available options are auto and hpux. The default option is auto. This attribute will be applied to all the initiators in the initiator group. Initiators with different host OSes should not be kept in the same initiator group having a non-default host type attribute. String of up to 64 alphanumeric characters, - and . and : are allowed after first character.
.PARAMETER IscsiInitiators
List of iSCSI initiators. When create/update iscsi_initiators, either iqn or ip_address is always required with label.
.PARAMETER Metadata
Key-value pairs that augment an initiator group's attributes.
.PARAMETER Name
Name of initiator group. String of up to 64 alphanumeric characters, - and . and : are allowed after first character.
.PARAMETER TargetSubnets
List of target subnet labels. If specified, discovery and access to volumes will be restricted to
.OUTPUTS

NimbleCreateInitiatorGroupInput<PSCustomObject>
#>

function Initialize-NimbleCreateInitiatorGroupInput {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${AccessProtocol},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${AppUuid},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Description},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${FcInitiators},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${FcTdzPorts},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${HostType},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${IscsiInitiators},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Metadata},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${TargetSubnets}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => NimbleCreateInitiatorGroupInput' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $AccessProtocol) {
            throw "invalid value for 'AccessProtocol', 'AccessProtocol' cannot be null."
        }

        if ($null -eq $Name) {
            throw "invalid value for 'Name', 'Name' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "access_protocol" = ${AccessProtocol}
            "app_uuid" = ${AppUuid}
            "description" = ${Description}
            "fc_initiators" = ${FcInitiators}
            "fc_tdz_ports" = ${FcTdzPorts}
            "host_type" = ${HostType}
            "iscsi_initiators" = ${IscsiInitiators}
            "metadata" = ${Metadata}
            "name" = ${Name}
            "target_subnets" = ${TargetSubnets}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to NimbleCreateInitiatorGroupInput<PSCustomObject>

.DESCRIPTION

Convert from JSON to NimbleCreateInitiatorGroupInput<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

NimbleCreateInitiatorGroupInput<PSCustomObject>
#>
function ConvertFrom-JsonToNimbleCreateInitiatorGroupInput {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => NimbleCreateInitiatorGroupInput' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in NimbleCreateInitiatorGroupInput
        $AllProperties = ("access_protocol", "app_uuid", "description", "fc_initiators", "fc_tdz_ports", "host_type", "iscsi_initiators", "metadata", "name", "target_subnets")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'access_protocol' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "access_protocol"))) {
            throw "Error! JSON cannot be serialized due to the required property 'access_protocol' missing."
        } else {
            $AccessProtocol = $JsonParameters.PSobject.Properties["access_protocol"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) {
            throw "Error! JSON cannot be serialized due to the required property 'name' missing."
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "app_uuid"))) { #optional property not found
            $AppUuid = $null
        } else {
            $AppUuid = $JsonParameters.PSobject.Properties["app_uuid"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "description"))) { #optional property not found
            $Description = $null
        } else {
            $Description = $JsonParameters.PSobject.Properties["description"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "fc_initiators"))) { #optional property not found
            $FcInitiators = $null
        } else {
            $FcInitiators = $JsonParameters.PSobject.Properties["fc_initiators"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "fc_tdz_ports"))) { #optional property not found
            $FcTdzPorts = $null
        } else {
            $FcTdzPorts = $JsonParameters.PSobject.Properties["fc_tdz_ports"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "host_type"))) { #optional property not found
            $HostType = $null
        } else {
            $HostType = $JsonParameters.PSobject.Properties["host_type"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "iscsi_initiators"))) { #optional property not found
            $IscsiInitiators = $null
        } else {
            $IscsiInitiators = $JsonParameters.PSobject.Properties["iscsi_initiators"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "metadata"))) { #optional property not found
            $Metadata = $null
        } else {
            $Metadata = $JsonParameters.PSobject.Properties["metadata"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "target_subnets"))) { #optional property not found
            $TargetSubnets = $null
        } else {
            $TargetSubnets = $JsonParameters.PSobject.Properties["target_subnets"].value
        }

        $PSO = [PSCustomObject]@{
            "access_protocol" = ${AccessProtocol}
            "app_uuid" = ${AppUuid}
            "description" = ${Description}
            "fc_initiators" = ${FcInitiators}
            "fc_tdz_ports" = ${FcTdzPorts}
            "host_type" = ${HostType}
            "iscsi_initiators" = ${IscsiInitiators}
            "metadata" = ${Metadata}
            "name" = ${Name}
            "target_subnets" = ${TargetSubnets}
        }

        return $PSO
    }

}

