#
# Data Services Cloud Console API
# Data Services Cloud Console API
# Version: 1.3.0
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER CustomerId
customerId
.PARAMETER Domain
domain of the service port object
.PARAMETER Generation
generation
.PARAMETER Id
uid (Unique identifier) for the service port object
.PARAMETER Ipv4address
ipv4address of the service port object `Filter`
.PARAMETER Ipv4netmask
ipv4 net mask of the service port object
.PARAMETER Ipv6address
ipv6address of the service port object `Filter`
.PARAMETER Ipv6vnetmask
ipv6 net mask for the service port objectt
.PARAMETER Mode
mode for the service port object
.PARAMETER Name
display name of the service port object
.PARAMETER Node
node for the service port object
.PARAMETER ResourceUri
resourceUri for detailed service ports object
.PARAMETER SystemId
SystemUid/serialNumber of the array.
.PARAMETER Type
type
.OUTPUTS

ServicePorts<PSCustomObject>
#>

function Initialize-ServicePorts {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${CustomerId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Domain},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Generation},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Id},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Ipv4address},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Ipv4netmask},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Ipv6address},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Ipv6vnetmask},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Mode},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Node},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ResourceUri},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SystemId},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Type}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => ServicePorts' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "customerId" = ${CustomerId}
            "domain" = ${Domain}
            "generation" = ${Generation}
            "id" = ${Id}
            "ipv4address" = ${Ipv4address}
            "ipv4netmask" = ${Ipv4netmask}
            "ipv6address" = ${Ipv6address}
            "ipv6vnetmask" = ${Ipv6vnetmask}
            "mode" = ${Mode}
            "name" = ${Name}
            "node" = ${Node}
            "resourceUri" = ${ResourceUri}
            "systemId" = ${SystemId}
            "type" = ${Type}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to ServicePorts<PSCustomObject>

.DESCRIPTION

Convert from JSON to ServicePorts<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

ServicePorts<PSCustomObject>
#>
function ConvertFrom-JsonToServicePorts {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => ServicePorts' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in ServicePorts
        $AllProperties = ("customerId", "domain", "generation", "id", "ipv4address", "ipv4netmask", "ipv6address", "ipv6vnetmask", "mode", "name", "node", "resourceUri", "systemId", "type")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "customerId"))) { #optional property not found
            $CustomerId = $null
        } else {
            $CustomerId = $JsonParameters.PSobject.Properties["customerId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "domain"))) { #optional property not found
            $Domain = $null
        } else {
            $Domain = $JsonParameters.PSobject.Properties["domain"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "generation"))) { #optional property not found
            $Generation = $null
        } else {
            $Generation = $JsonParameters.PSobject.Properties["generation"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) { #optional property not found
            $Id = $null
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ipv4address"))) { #optional property not found
            $Ipv4address = $null
        } else {
            $Ipv4address = $JsonParameters.PSobject.Properties["ipv4address"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ipv4netmask"))) { #optional property not found
            $Ipv4netmask = $null
        } else {
            $Ipv4netmask = $JsonParameters.PSobject.Properties["ipv4netmask"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ipv6address"))) { #optional property not found
            $Ipv6address = $null
        } else {
            $Ipv6address = $JsonParameters.PSobject.Properties["ipv6address"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ipv6vnetmask"))) { #optional property not found
            $Ipv6vnetmask = $null
        } else {
            $Ipv6vnetmask = $JsonParameters.PSobject.Properties["ipv6vnetmask"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "mode"))) { #optional property not found
            $Mode = $null
        } else {
            $Mode = $JsonParameters.PSobject.Properties["mode"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) { #optional property not found
            $Name = $null
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "node"))) { #optional property not found
            $Node = $null
        } else {
            $Node = $JsonParameters.PSobject.Properties["node"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "resourceUri"))) { #optional property not found
            $ResourceUri = $null
        } else {
            $ResourceUri = $JsonParameters.PSobject.Properties["resourceUri"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "systemId"))) { #optional property not found
            $SystemId = $null
        } else {
            $SystemId = $JsonParameters.PSobject.Properties["systemId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "type"))) { #optional property not found
            $Type = $null
        } else {
            $Type = $JsonParameters.PSobject.Properties["type"].value
        }

        $PSO = [PSCustomObject]@{
            "customerId" = ${CustomerId}
            "domain" = ${Domain}
            "generation" = ${Generation}
            "id" = ${Id}
            "ipv4address" = ${Ipv4address}
            "ipv4netmask" = ${Ipv4netmask}
            "ipv6address" = ${Ipv6address}
            "ipv6vnetmask" = ${Ipv6vnetmask}
            "mode" = ${Mode}
            "name" = ${Name}
            "node" = ${Node}
            "resourceUri" = ${ResourceUri}
            "systemId" = ${SystemId}
            "type" = ${Type}
        }

        return $PSO
    }

}

