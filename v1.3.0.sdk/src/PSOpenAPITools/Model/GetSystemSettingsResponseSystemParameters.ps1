#
# Data Services Cloud Console API
# Data Services Cloud Console API
# Version: 1.3.0
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

System settings

.PARAMETER ClusterName
Cluster Name
.PARAMETER EnableTrash
Specifies whether trash folder is enabled or not
.PARAMETER ShowmountSuppressed
Suppress output of 'showmount' command from Linux NFSv3 clients
.PARAMETER SmbAdministratorsGroupName
Optional custom group logon name. If set, the group name will replace local administrators group access. 
.PARAMETER SmbPrivilegedGroupFullAccess
Enable privileged domain group restore access
.PARAMETER SmbPrivilegedGroupSid
Specify a custom SID for the privileged SMB group. If not specified, the privileged SMB group SID is the Backup Operators domain group SID (S-1-5-32-551). 
.PARAMETER SmbPrivilegedUserName
Logon name of the privileged domain user
.PARAMETER TrashGid
Specify the GID of a group of non root users to allow them access to the trash folder
.PARAMETER UseSmbPrivilegedGroup
Enable the privileged SMB group for backup and restore
.PARAMETER UseSmbPrivilegedUser
Enable the privileged SMB user for backup and restore
.OUTPUTS

GetSystemSettingsResponseSystemParameters<PSCustomObject>
#>

function Initialize-GetSystemSettingsResponseSystemParameters {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ClusterName},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${EnableTrash},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${ShowmountSuppressed},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SmbAdministratorsGroupName},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${SmbPrivilegedGroupFullAccess},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SmbPrivilegedGroupSid},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SmbPrivilegedUserName},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${TrashGid},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${UseSmbPrivilegedGroup},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${UseSmbPrivilegedUser}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => GetSystemSettingsResponseSystemParameters' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "clusterName" = ${ClusterName}
            "enableTrash" = ${EnableTrash}
            "showmountSuppressed" = ${ShowmountSuppressed}
            "smbAdministratorsGroupName" = ${SmbAdministratorsGroupName}
            "smbPrivilegedGroupFullAccess" = ${SmbPrivilegedGroupFullAccess}
            "smbPrivilegedGroupSid" = ${SmbPrivilegedGroupSid}
            "smbPrivilegedUserName" = ${SmbPrivilegedUserName}
            "trashGid" = ${TrashGid}
            "useSmbPrivilegedGroup" = ${UseSmbPrivilegedGroup}
            "useSmbPrivilegedUser" = ${UseSmbPrivilegedUser}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to GetSystemSettingsResponseSystemParameters<PSCustomObject>

.DESCRIPTION

Convert from JSON to GetSystemSettingsResponseSystemParameters<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

GetSystemSettingsResponseSystemParameters<PSCustomObject>
#>
function ConvertFrom-JsonToGetSystemSettingsResponseSystemParameters {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => GetSystemSettingsResponseSystemParameters' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in GetSystemSettingsResponseSystemParameters
        $AllProperties = ("clusterName", "enableTrash", "showmountSuppressed", "smbAdministratorsGroupName", "smbPrivilegedGroupFullAccess", "smbPrivilegedGroupSid", "smbPrivilegedUserName", "trashGid", "useSmbPrivilegedGroup", "useSmbPrivilegedUser")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "clusterName"))) { #optional property not found
            $ClusterName = $null
        } else {
            $ClusterName = $JsonParameters.PSobject.Properties["clusterName"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "enableTrash"))) { #optional property not found
            $EnableTrash = $null
        } else {
            $EnableTrash = $JsonParameters.PSobject.Properties["enableTrash"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "showmountSuppressed"))) { #optional property not found
            $ShowmountSuppressed = $null
        } else {
            $ShowmountSuppressed = $JsonParameters.PSobject.Properties["showmountSuppressed"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "smbAdministratorsGroupName"))) { #optional property not found
            $SmbAdministratorsGroupName = $null
        } else {
            $SmbAdministratorsGroupName = $JsonParameters.PSobject.Properties["smbAdministratorsGroupName"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "smbPrivilegedGroupFullAccess"))) { #optional property not found
            $SmbPrivilegedGroupFullAccess = $null
        } else {
            $SmbPrivilegedGroupFullAccess = $JsonParameters.PSobject.Properties["smbPrivilegedGroupFullAccess"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "smbPrivilegedGroupSid"))) { #optional property not found
            $SmbPrivilegedGroupSid = $null
        } else {
            $SmbPrivilegedGroupSid = $JsonParameters.PSobject.Properties["smbPrivilegedGroupSid"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "smbPrivilegedUserName"))) { #optional property not found
            $SmbPrivilegedUserName = $null
        } else {
            $SmbPrivilegedUserName = $JsonParameters.PSobject.Properties["smbPrivilegedUserName"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "trashGid"))) { #optional property not found
            $TrashGid = $null
        } else {
            $TrashGid = $JsonParameters.PSobject.Properties["trashGid"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "useSmbPrivilegedGroup"))) { #optional property not found
            $UseSmbPrivilegedGroup = $null
        } else {
            $UseSmbPrivilegedGroup = $JsonParameters.PSobject.Properties["useSmbPrivilegedGroup"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "useSmbPrivilegedUser"))) { #optional property not found
            $UseSmbPrivilegedUser = $null
        } else {
            $UseSmbPrivilegedUser = $JsonParameters.PSobject.Properties["useSmbPrivilegedUser"].value
        }

        $PSO = [PSCustomObject]@{
            "clusterName" = ${ClusterName}
            "enableTrash" = ${EnableTrash}
            "showmountSuppressed" = ${ShowmountSuppressed}
            "smbAdministratorsGroupName" = ${SmbAdministratorsGroupName}
            "smbPrivilegedGroupFullAccess" = ${SmbPrivilegedGroupFullAccess}
            "smbPrivilegedGroupSid" = ${SmbPrivilegedGroupSid}
            "smbPrivilegedUserName" = ${SmbPrivilegedUserName}
            "trashGid" = ${TrashGid}
            "useSmbPrivilegedGroup" = ${UseSmbPrivilegedGroup}
            "useSmbPrivilegedUser" = ${UseSmbPrivilegedUser}
        }

        return $PSO
    }

}

