#
# Data Services Cloud Console API
# Data Services Cloud Console API
# Version: 1.3.0
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER ArrayId
Identifier of the array to which this result belongs.
.PARAMETER Context
Context for aggregating health check results. Possible values: 'all', 'failover', 'sw_update'.
.PARAMETER CtrlrId
Identifier of the controller to which this result belongs.
.PARAMETER Id
Identifier for the health check.
.PARAMETER Scope
Scope at which the health check is to be run.Possible values: 'controller', 'array', 'group'.
.OUTPUTS

NimbleHealthStatusWithoutSortKey<PSCustomObject>
#>

function Initialize-NimbleHealthStatusWithoutSortKey {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ArrayId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Context},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${CtrlrId},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Id},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Scope}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => NimbleHealthStatusWithoutSortKey' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "array_id" = ${ArrayId}
            "context" = ${Context}
            "ctrlr_id" = ${CtrlrId}
            "id" = ${Id}
            "scope" = ${Scope}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to NimbleHealthStatusWithoutSortKey<PSCustomObject>

.DESCRIPTION

Convert from JSON to NimbleHealthStatusWithoutSortKey<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

NimbleHealthStatusWithoutSortKey<PSCustomObject>
#>
function ConvertFrom-JsonToNimbleHealthStatusWithoutSortKey {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => NimbleHealthStatusWithoutSortKey' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in NimbleHealthStatusWithoutSortKey
        $AllProperties = ("array_id", "context", "ctrlr_id", "id", "scope")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "array_id"))) { #optional property not found
            $ArrayId = $null
        } else {
            $ArrayId = $JsonParameters.PSobject.Properties["array_id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "context"))) { #optional property not found
            $Context = $null
        } else {
            $Context = $JsonParameters.PSobject.Properties["context"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ctrlr_id"))) { #optional property not found
            $CtrlrId = $null
        } else {
            $CtrlrId = $JsonParameters.PSobject.Properties["ctrlr_id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) { #optional property not found
            $Id = $null
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "scope"))) { #optional property not found
            $Scope = $null
        } else {
            $Scope = $JsonParameters.PSobject.Properties["scope"].value
        }

        $PSO = [PSCustomObject]@{
            "array_id" = ${ArrayId}
            "context" = ${Context}
            "ctrlr_id" = ${CtrlrId}
            "id" = ${Id}
            "scope" = ${Scope}
        }

        return $PSO
    }

}

