#
# Data Services Cloud Console API
# Data Services Cloud Console API
# Version: 1.3.0
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER ArrayId
Identifier for the array. A 42 digit hexadecimal number.
.PARAMETER ArrayNameOrSerial
Name or serial number of array where the interface is hosted.
.PARAMETER BusLocation
PCI bus location of the HBA for this Fibre Channel port.
.PARAMETER ControllerId
Identifier of the controller where the interface is hosted. A 42 digit hexadecimal number.
.PARAMETER ControllerName
Name (A or B) of the controller where the interface is hosted. Plain string.
.PARAMETER FabricInfo
No description available.
.PARAMETER FcPortId
ID of the port with which the interface is associated.
.PARAMETER FcPortName
Name of Fibre Channel port.
.PARAMETER FirmwareVersion
Version of the Fibre Channel firmware.
.PARAMETER Id
Identifier for the interface. A 42 digit hexadecimal number.
.PARAMETER IpList
No description available.
.PARAMETER IsPresent
Whether this interface is present on this controller. Possible values: true, false.
.PARAMETER LinkInfo
No description available.
.PARAMETER LinkSpeed
Speed of the link. Possible values: link_speed_unknown, link_speed_10M, link_speed_100M, link_speed_1000M, link_speed_10000M.
.PARAMETER LinkStatus
Status of the link. Possible values: link_status_unknown, link_status_down, link_status_up.
.PARAMETER LogicalPortNumber
Logical port number for the Fibre Channel port.
.PARAMETER Mac
MAC address of the interface. Mac address of an interface.
.PARAMETER MaxLinkSpeed
Maximum speed of the link. Possible values: link_speed_unknown, link_speed_10M, link_speed_100M, link_speed_1000M, link_speed_10000M.
.PARAMETER Mtu
MTU on the link.
.PARAMETER Name
Name of the interface.
.PARAMETER NicType
Interface type. Possible values: nic_type_unknown, nic_type_tp, nic_type_sfp.
.PARAMETER Online
Identify whether the Fibre Channel interface is online.
.PARAMETER Orientation
Orientation of FC ports on a HBA. An orientation of 'right_to_left' indicates that ports are ordered as 3,2,1,0 on the slot. Possible values: 'left_to_right', 'right_to_left'.
.PARAMETER PartialResponseOk
Port response.
.PARAMETER Peerzone
Active peer zone for this Fibre Channel interface.
.PARAMETER Port
Port number for this interface.
.PARAMETER Slot
Slot number for this interface.
.PARAMETER Wwnn
World Wide Node Name for this Fibre Channel interface.
.PARAMETER Wwpn
World Wide Port Name for this Fibre Channel interface.
.OUTPUTS

NimblePortDetails<PSCustomObject>
#>

function Initialize-NimblePortDetails {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ArrayId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ArrayNameOrSerial},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${BusLocation},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ControllerId},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ControllerName},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${FabricInfo},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${FcPortId},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${FcPortName},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${FirmwareVersion},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Id},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${IpList},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${IsPresent},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${LinkInfo},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${LinkSpeed},
        [Parameter(Position = 14, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${LinkStatus},
        [Parameter(Position = 15, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${LogicalPortNumber},
        [Parameter(Position = 16, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Mac},
        [Parameter(Position = 17, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${MaxLinkSpeed},
        [Parameter(Position = 18, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${Mtu},
        [Parameter(Position = 19, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 20, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${NicType},
        [Parameter(Position = 21, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${Online},
        [Parameter(Position = 22, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Orientation},
        [Parameter(Position = 23, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${PartialResponseOk},
        [Parameter(Position = 24, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Peerzone},
        [Parameter(Position = 25, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${Port},
        [Parameter(Position = 26, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${Slot},
        [Parameter(Position = 27, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Wwnn},
        [Parameter(Position = 28, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Wwpn}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => NimblePortDetails' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "array_id" = ${ArrayId}
            "array_name_or_serial" = ${ArrayNameOrSerial}
            "bus_location" = ${BusLocation}
            "controller_id" = ${ControllerId}
            "controller_name" = ${ControllerName}
            "fabric_info" = ${FabricInfo}
            "fc_port_id" = ${FcPortId}
            "fc_port_name" = ${FcPortName}
            "firmware_version" = ${FirmwareVersion}
            "id" = ${Id}
            "ip_list" = ${IpList}
            "is_present" = ${IsPresent}
            "link_info" = ${LinkInfo}
            "link_speed" = ${LinkSpeed}
            "link_status" = ${LinkStatus}
            "logical_port_number" = ${LogicalPortNumber}
            "mac" = ${Mac}
            "max_link_speed" = ${MaxLinkSpeed}
            "mtu" = ${Mtu}
            "name" = ${Name}
            "nic_type" = ${NicType}
            "online" = ${Online}
            "orientation" = ${Orientation}
            "partial_response_ok" = ${PartialResponseOk}
            "peerzone" = ${Peerzone}
            "port" = ${Port}
            "slot" = ${Slot}
            "wwnn" = ${Wwnn}
            "wwpn" = ${Wwpn}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to NimblePortDetails<PSCustomObject>

.DESCRIPTION

Convert from JSON to NimblePortDetails<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

NimblePortDetails<PSCustomObject>
#>
function ConvertFrom-JsonToNimblePortDetails {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => NimblePortDetails' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in NimblePortDetails
        $AllProperties = ("array_id", "array_name_or_serial", "bus_location", "controller_id", "controller_name", "fabric_info", "fc_port_id", "fc_port_name", "firmware_version", "id", "ip_list", "is_present", "link_info", "link_speed", "link_status", "logical_port_number", "mac", "max_link_speed", "mtu", "name", "nic_type", "online", "orientation", "partial_response_ok", "peerzone", "port", "slot", "wwnn", "wwpn")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "array_id"))) { #optional property not found
            $ArrayId = $null
        } else {
            $ArrayId = $JsonParameters.PSobject.Properties["array_id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "array_name_or_serial"))) { #optional property not found
            $ArrayNameOrSerial = $null
        } else {
            $ArrayNameOrSerial = $JsonParameters.PSobject.Properties["array_name_or_serial"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "bus_location"))) { #optional property not found
            $BusLocation = $null
        } else {
            $BusLocation = $JsonParameters.PSobject.Properties["bus_location"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "controller_id"))) { #optional property not found
            $ControllerId = $null
        } else {
            $ControllerId = $JsonParameters.PSobject.Properties["controller_id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "controller_name"))) { #optional property not found
            $ControllerName = $null
        } else {
            $ControllerName = $JsonParameters.PSobject.Properties["controller_name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "fabric_info"))) { #optional property not found
            $FabricInfo = $null
        } else {
            $FabricInfo = $JsonParameters.PSobject.Properties["fabric_info"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "fc_port_id"))) { #optional property not found
            $FcPortId = $null
        } else {
            $FcPortId = $JsonParameters.PSobject.Properties["fc_port_id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "fc_port_name"))) { #optional property not found
            $FcPortName = $null
        } else {
            $FcPortName = $JsonParameters.PSobject.Properties["fc_port_name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "firmware_version"))) { #optional property not found
            $FirmwareVersion = $null
        } else {
            $FirmwareVersion = $JsonParameters.PSobject.Properties["firmware_version"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) { #optional property not found
            $Id = $null
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ip_list"))) { #optional property not found
            $IpList = $null
        } else {
            $IpList = $JsonParameters.PSobject.Properties["ip_list"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "is_present"))) { #optional property not found
            $IsPresent = $null
        } else {
            $IsPresent = $JsonParameters.PSobject.Properties["is_present"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "link_info"))) { #optional property not found
            $LinkInfo = $null
        } else {
            $LinkInfo = $JsonParameters.PSobject.Properties["link_info"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "link_speed"))) { #optional property not found
            $LinkSpeed = $null
        } else {
            $LinkSpeed = $JsonParameters.PSobject.Properties["link_speed"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "link_status"))) { #optional property not found
            $LinkStatus = $null
        } else {
            $LinkStatus = $JsonParameters.PSobject.Properties["link_status"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "logical_port_number"))) { #optional property not found
            $LogicalPortNumber = $null
        } else {
            $LogicalPortNumber = $JsonParameters.PSobject.Properties["logical_port_number"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "mac"))) { #optional property not found
            $Mac = $null
        } else {
            $Mac = $JsonParameters.PSobject.Properties["mac"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "max_link_speed"))) { #optional property not found
            $MaxLinkSpeed = $null
        } else {
            $MaxLinkSpeed = $JsonParameters.PSobject.Properties["max_link_speed"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "mtu"))) { #optional property not found
            $Mtu = $null
        } else {
            $Mtu = $JsonParameters.PSobject.Properties["mtu"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) { #optional property not found
            $Name = $null
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "nic_type"))) { #optional property not found
            $NicType = $null
        } else {
            $NicType = $JsonParameters.PSobject.Properties["nic_type"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "online"))) { #optional property not found
            $Online = $null
        } else {
            $Online = $JsonParameters.PSobject.Properties["online"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "orientation"))) { #optional property not found
            $Orientation = $null
        } else {
            $Orientation = $JsonParameters.PSobject.Properties["orientation"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "partial_response_ok"))) { #optional property not found
            $PartialResponseOk = $null
        } else {
            $PartialResponseOk = $JsonParameters.PSobject.Properties["partial_response_ok"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "peerzone"))) { #optional property not found
            $Peerzone = $null
        } else {
            $Peerzone = $JsonParameters.PSobject.Properties["peerzone"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "port"))) { #optional property not found
            $Port = $null
        } else {
            $Port = $JsonParameters.PSobject.Properties["port"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "slot"))) { #optional property not found
            $Slot = $null
        } else {
            $Slot = $JsonParameters.PSobject.Properties["slot"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "wwnn"))) { #optional property not found
            $Wwnn = $null
        } else {
            $Wwnn = $JsonParameters.PSobject.Properties["wwnn"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "wwpn"))) { #optional property not found
            $Wwpn = $null
        } else {
            $Wwpn = $JsonParameters.PSobject.Properties["wwpn"].value
        }

        $PSO = [PSCustomObject]@{
            "array_id" = ${ArrayId}
            "array_name_or_serial" = ${ArrayNameOrSerial}
            "bus_location" = ${BusLocation}
            "controller_id" = ${ControllerId}
            "controller_name" = ${ControllerName}
            "fabric_info" = ${FabricInfo}
            "fc_port_id" = ${FcPortId}
            "fc_port_name" = ${FcPortName}
            "firmware_version" = ${FirmwareVersion}
            "id" = ${Id}
            "ip_list" = ${IpList}
            "is_present" = ${IsPresent}
            "link_info" = ${LinkInfo}
            "link_speed" = ${LinkSpeed}
            "link_status" = ${LinkStatus}
            "logical_port_number" = ${LogicalPortNumber}
            "mac" = ${Mac}
            "max_link_speed" = ${MaxLinkSpeed}
            "mtu" = ${Mtu}
            "name" = ${Name}
            "nic_type" = ${NicType}
            "online" = ${Online}
            "orientation" = ${Orientation}
            "partial_response_ok" = ${PartialResponseOk}
            "peerzone" = ${Peerzone}
            "port" = ${Port}
            "slot" = ${Slot}
            "wwnn" = ${Wwnn}
            "wwpn" = ${Wwpn}
        }

        return $PSO
    }

}

