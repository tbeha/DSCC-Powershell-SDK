#
# Data Services Cloud Console API
# Data Services Cloud Console API
# Version: 1.3.0
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Request body for creating remote copy links

.PARAMETER Address
IP Address or WWN of Remote Copy target for this link, depending on the link type IP or FC
.PARAMETER PortPos
No description available.
.PARAMETER TargetName
Remote Copy target with which the link is affiliated
.PARAMETER Type
Remote Copy link type. 1 for IP and 2 for FC
.OUTPUTS

CreateRemoteCopyLinkInput<PSCustomObject>
#>

function Initialize-CreateRemoteCopyLinkInput {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Address},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${PortPos},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${TargetName},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [Int64]
        ${Type}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => CreateRemoteCopyLinkInput' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $Address) {
            throw "invalid value for 'Address', 'Address' cannot be null."
        }

        if ($null -eq $PortPos) {
            throw "invalid value for 'PortPos', 'PortPos' cannot be null."
        }

        if ($null -eq $TargetName) {
            throw "invalid value for 'TargetName', 'TargetName' cannot be null."
        }

        if ($null -eq $Type) {
            throw "invalid value for 'Type', 'Type' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "address" = ${Address}
            "portPos" = ${PortPos}
            "targetName" = ${TargetName}
            "type" = ${Type}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to CreateRemoteCopyLinkInput<PSCustomObject>

.DESCRIPTION

Convert from JSON to CreateRemoteCopyLinkInput<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

CreateRemoteCopyLinkInput<PSCustomObject>
#>
function ConvertFrom-JsonToCreateRemoteCopyLinkInput {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => CreateRemoteCopyLinkInput' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in CreateRemoteCopyLinkInput
        $AllProperties = ("address", "portPos", "targetName", "type")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'address' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "address"))) {
            throw "Error! JSON cannot be serialized due to the required property 'address' missing."
        } else {
            $Address = $JsonParameters.PSobject.Properties["address"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "portPos"))) {
            throw "Error! JSON cannot be serialized due to the required property 'portPos' missing."
        } else {
            $PortPos = $JsonParameters.PSobject.Properties["portPos"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "targetName"))) {
            throw "Error! JSON cannot be serialized due to the required property 'targetName' missing."
        } else {
            $TargetName = $JsonParameters.PSobject.Properties["targetName"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "type"))) {
            throw "Error! JSON cannot be serialized due to the required property 'type' missing."
        } else {
            $Type = $JsonParameters.PSobject.Properties["type"].value
        }

        $PSO = [PSCustomObject]@{
            "address" = ${Address}
            "portPos" = ${PortPos}
            "targetName" = ${TargetName}
            "type" = ${Type}
        }

        return $PSO
    }

}

