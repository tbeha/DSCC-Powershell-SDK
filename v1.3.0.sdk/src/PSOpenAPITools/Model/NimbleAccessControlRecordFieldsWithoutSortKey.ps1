#
# Data Services Cloud Console API
# Data Services Cloud Console API
# Version: 1.3.0
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER AccessProtocol
Access protocol of the volume. Possible values:'iscsi', 'fc'.
.PARAMETER ChapUserId
Identifier for the CHAP user.
.PARAMETER ChapUserName
Flag denoting if data in the associated volume should be compressed.
.PARAMETER CreationTime
Time when this access control record was created.
.PARAMETER Id
Identifier for the access control record.
.PARAMETER InitiatorGroupId
Identifier for the initiator group.
.PARAMETER InitiatorGroupName
Name of the initiator group.
.PARAMETER LastModified
Time when this access control record was last modified.
.PARAMETER Lun
If this access control record applies to a regular volume, this attribute is the volume's LUN (Logical Unit Number). If the access protocol is iSCSI, the LUN will be 0. However, if the access protocol is Fibre Channel, the LUN will be in the range from 0 to 2047. If this record applies to a Virtual Volume, this attribute is the volume's secondary LUN in the range from 0 to 399999, for both iSCSI and Fibre Channel. If the record applies to a OpenstackV2 volume, the LUN will be in the range from 0 to 2047, for both iSCSI and Fibre Channel. If this record applies to a protocol endpoint or only a snapshot, this attribute is not meaningful and is set to null.
.PARAMETER PeId
Identifier for the protocol endpoint this access control record applies to.
.PARAMETER PeLun
LUN (Logical Unit Number) to associate with this protocol endpoint. Valid LUNs are in the 0-2047 range.
.PARAMETER PeName
Name of the protocol endpoint this access control record applies to.
.PARAMETER SnapId
Identifier for the snapshot this access control record applies to.
.PARAMETER SnapName
Name of the snapshot this access control record applies to.
.PARAMETER VolId
Identifier for the volume this access control record applies to.
.PARAMETER VolName
Name of the volume this access control record applies to.
.OUTPUTS

NimbleAccessControlRecordFieldsWithoutSortKey<PSCustomObject>
#>

function Initialize-NimbleAccessControlRecordFieldsWithoutSortKey {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${AccessProtocol},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ChapUserId},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ChapUserName},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${CreationTime},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Id},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${InitiatorGroupId},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${InitiatorGroupName},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${LastModified},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${Lun},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${PeId},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${PeLun},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${PeName},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SnapId},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SnapName},
        [Parameter(Position = 14, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${VolId},
        [Parameter(Position = 15, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${VolName}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => NimbleAccessControlRecordFieldsWithoutSortKey' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "access_protocol" = ${AccessProtocol}
            "chap_user_id" = ${ChapUserId}
            "chap_user_name" = ${ChapUserName}
            "creation_time" = ${CreationTime}
            "id" = ${Id}
            "initiator_group_id" = ${InitiatorGroupId}
            "initiator_group_name" = ${InitiatorGroupName}
            "last_modified" = ${LastModified}
            "lun" = ${Lun}
            "pe_id" = ${PeId}
            "pe_lun" = ${PeLun}
            "pe_name" = ${PeName}
            "snap_id" = ${SnapId}
            "snap_name" = ${SnapName}
            "vol_id" = ${VolId}
            "vol_name" = ${VolName}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to NimbleAccessControlRecordFieldsWithoutSortKey<PSCustomObject>

.DESCRIPTION

Convert from JSON to NimbleAccessControlRecordFieldsWithoutSortKey<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

NimbleAccessControlRecordFieldsWithoutSortKey<PSCustomObject>
#>
function ConvertFrom-JsonToNimbleAccessControlRecordFieldsWithoutSortKey {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => NimbleAccessControlRecordFieldsWithoutSortKey' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in NimbleAccessControlRecordFieldsWithoutSortKey
        $AllProperties = ("access_protocol", "chap_user_id", "chap_user_name", "creation_time", "id", "initiator_group_id", "initiator_group_name", "last_modified", "lun", "pe_id", "pe_lun", "pe_name", "snap_id", "snap_name", "vol_id", "vol_name")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "access_protocol"))) { #optional property not found
            $AccessProtocol = $null
        } else {
            $AccessProtocol = $JsonParameters.PSobject.Properties["access_protocol"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "chap_user_id"))) { #optional property not found
            $ChapUserId = $null
        } else {
            $ChapUserId = $JsonParameters.PSobject.Properties["chap_user_id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "chap_user_name"))) { #optional property not found
            $ChapUserName = $null
        } else {
            $ChapUserName = $JsonParameters.PSobject.Properties["chap_user_name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "creation_time"))) { #optional property not found
            $CreationTime = $null
        } else {
            $CreationTime = $JsonParameters.PSobject.Properties["creation_time"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) { #optional property not found
            $Id = $null
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "initiator_group_id"))) { #optional property not found
            $InitiatorGroupId = $null
        } else {
            $InitiatorGroupId = $JsonParameters.PSobject.Properties["initiator_group_id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "initiator_group_name"))) { #optional property not found
            $InitiatorGroupName = $null
        } else {
            $InitiatorGroupName = $JsonParameters.PSobject.Properties["initiator_group_name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "last_modified"))) { #optional property not found
            $LastModified = $null
        } else {
            $LastModified = $JsonParameters.PSobject.Properties["last_modified"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "lun"))) { #optional property not found
            $Lun = $null
        } else {
            $Lun = $JsonParameters.PSobject.Properties["lun"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "pe_id"))) { #optional property not found
            $PeId = $null
        } else {
            $PeId = $JsonParameters.PSobject.Properties["pe_id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "pe_lun"))) { #optional property not found
            $PeLun = $null
        } else {
            $PeLun = $JsonParameters.PSobject.Properties["pe_lun"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "pe_name"))) { #optional property not found
            $PeName = $null
        } else {
            $PeName = $JsonParameters.PSobject.Properties["pe_name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "snap_id"))) { #optional property not found
            $SnapId = $null
        } else {
            $SnapId = $JsonParameters.PSobject.Properties["snap_id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "snap_name"))) { #optional property not found
            $SnapName = $null
        } else {
            $SnapName = $JsonParameters.PSobject.Properties["snap_name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "vol_id"))) { #optional property not found
            $VolId = $null
        } else {
            $VolId = $JsonParameters.PSobject.Properties["vol_id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "vol_name"))) { #optional property not found
            $VolName = $null
        } else {
            $VolName = $JsonParameters.PSobject.Properties["vol_name"].value
        }

        $PSO = [PSCustomObject]@{
            "access_protocol" = ${AccessProtocol}
            "chap_user_id" = ${ChapUserId}
            "chap_user_name" = ${ChapUserName}
            "creation_time" = ${CreationTime}
            "id" = ${Id}
            "initiator_group_id" = ${InitiatorGroupId}
            "initiator_group_name" = ${InitiatorGroupName}
            "last_modified" = ${LastModified}
            "lun" = ${Lun}
            "pe_id" = ${PeId}
            "pe_lun" = ${PeLun}
            "pe_name" = ${PeName}
            "snap_id" = ${SnapId}
            "snap_name" = ${SnapName}
            "vol_id" = ${VolId}
            "vol_name" = ${VolName}
        }

        return $PSO
    }

}

