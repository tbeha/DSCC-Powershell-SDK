#
# Data Services Cloud Console API
# Data Services Cloud Console API
# Version: 1.3.0
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Nimble mail-settings input.

.PARAMETER SmtpPort
Port number of SMTP Server. Positive integer value up to 65535 representing TCP/IP port.
.PARAMETER SmtpServer
Hostname or IP Address of SMTP Server. String of alphanumeric characters, valid range is from 2 to 255; Each label must be between 1 and 63 characters long; - and . are allowed after the first and before the last character.
.OUTPUTS

NimbleMailSettingInput<PSCustomObject>
#>

function Initialize-NimbleMailSettingInput {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${SmtpPort},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SmtpServer}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => NimbleMailSettingInput' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "smtp_port" = ${SmtpPort}
            "smtp_server" = ${SmtpServer}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to NimbleMailSettingInput<PSCustomObject>

.DESCRIPTION

Convert from JSON to NimbleMailSettingInput<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

NimbleMailSettingInput<PSCustomObject>
#>
function ConvertFrom-JsonToNimbleMailSettingInput {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => NimbleMailSettingInput' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in NimbleMailSettingInput
        $AllProperties = ("smtp_port", "smtp_server")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "smtp_port"))) { #optional property not found
            $SmtpPort = $null
        } else {
            $SmtpPort = $JsonParameters.PSobject.Properties["smtp_port"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "smtp_server"))) { #optional property not found
            $SmtpServer = $null
        } else {
            $SmtpServer = $JsonParameters.PSobject.Properties["smtp_server"].value
        }

        $PSO = [PSCustomObject]@{
            "smtp_port" = ${SmtpPort}
            "smtp_server" = ${SmtpServer}
        }

        return $PSO
    }

}

