#
# Data Services Cloud Console API
# Data Services Cloud Console API
# Version: 1.3.0
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Response body for device-type6 proxy settings

.PARAMETER AuthenticationRequired
Is authentication required
.PARAMETER CustomerId
The customer application identifier
.PARAMETER EnableProxy
Specifies whether the proxy is enabled or not
.PARAMETER FileServerId
An identifier for the fileserver resource, usually a UUID
.PARAMETER Nodes
Specifies the node name and status of proxy settings on that node.
.PARAMETER ProxyPassword
Password for authentication. Required only if authenticationRequired is enabled 
.PARAMETER ProxyPort
Proxy server port. Allowed values (1-65535)
.PARAMETER ProxyProtocol
Proxy protocol. Supported protocol is HTTP.
.PARAMETER ProxyServer
Proxy server hostname/IP.
.PARAMETER ProxyUser
Username for authentication. Required only if authenticationRequired is enabled.
.PARAMETER ProxyUserDomain
User's domain for NTLM authentication (Required only if authenticationRequired is enabled).
.PARAMETER RequestUri
Request URI of the resource
.OUTPUTS

GetProxySettingsResponse<PSCustomObject>
#>

function Initialize-GetProxySettingsResponse {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${AuthenticationRequired},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${CustomerId},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${EnableProxy},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${FileServerId},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Nodes},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ProxyPassword},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${ProxyPort},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ProxyProtocol},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ProxyServer},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ProxyUser},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ProxyUserDomain},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${RequestUri}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => GetProxySettingsResponse' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($ProxyPort -and $ProxyPort -gt 65535) {
          throw "invalid value for 'ProxyPort', must be smaller than or equal to 65535."
        }

        if ($ProxyPort -and $ProxyPort -lt 1) {
          throw "invalid value for 'ProxyPort', must be greater than or equal to 1."
        }


        $PSO = [PSCustomObject]@{
            "authenticationRequired" = ${AuthenticationRequired}
            "customerId" = ${CustomerId}
            "enableProxy" = ${EnableProxy}
            "fileServerId" = ${FileServerId}
            "nodes" = ${Nodes}
            "proxyPassword" = ${ProxyPassword}
            "proxyPort" = ${ProxyPort}
            "proxyProtocol" = ${ProxyProtocol}
            "proxyServer" = ${ProxyServer}
            "proxyUser" = ${ProxyUser}
            "proxyUserDomain" = ${ProxyUserDomain}
            "requestUri" = ${RequestUri}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to GetProxySettingsResponse<PSCustomObject>

.DESCRIPTION

Convert from JSON to GetProxySettingsResponse<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

GetProxySettingsResponse<PSCustomObject>
#>
function ConvertFrom-JsonToGetProxySettingsResponse {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => GetProxySettingsResponse' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in GetProxySettingsResponse
        $AllProperties = ("authenticationRequired", "customerId", "enableProxy", "fileServerId", "nodes", "proxyPassword", "proxyPort", "proxyProtocol", "proxyServer", "proxyUser", "proxyUserDomain", "requestUri")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "authenticationRequired"))) { #optional property not found
            $AuthenticationRequired = $null
        } else {
            $AuthenticationRequired = $JsonParameters.PSobject.Properties["authenticationRequired"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "customerId"))) { #optional property not found
            $CustomerId = $null
        } else {
            $CustomerId = $JsonParameters.PSobject.Properties["customerId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "enableProxy"))) { #optional property not found
            $EnableProxy = $null
        } else {
            $EnableProxy = $JsonParameters.PSobject.Properties["enableProxy"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "fileServerId"))) { #optional property not found
            $FileServerId = $null
        } else {
            $FileServerId = $JsonParameters.PSobject.Properties["fileServerId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "nodes"))) { #optional property not found
            $Nodes = $null
        } else {
            $Nodes = $JsonParameters.PSobject.Properties["nodes"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "proxyPassword"))) { #optional property not found
            $ProxyPassword = $null
        } else {
            $ProxyPassword = $JsonParameters.PSobject.Properties["proxyPassword"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "proxyPort"))) { #optional property not found
            $ProxyPort = $null
        } else {
            $ProxyPort = $JsonParameters.PSobject.Properties["proxyPort"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "proxyProtocol"))) { #optional property not found
            $ProxyProtocol = $null
        } else {
            $ProxyProtocol = $JsonParameters.PSobject.Properties["proxyProtocol"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "proxyServer"))) { #optional property not found
            $ProxyServer = $null
        } else {
            $ProxyServer = $JsonParameters.PSobject.Properties["proxyServer"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "proxyUser"))) { #optional property not found
            $ProxyUser = $null
        } else {
            $ProxyUser = $JsonParameters.PSobject.Properties["proxyUser"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "proxyUserDomain"))) { #optional property not found
            $ProxyUserDomain = $null
        } else {
            $ProxyUserDomain = $JsonParameters.PSobject.Properties["proxyUserDomain"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "requestUri"))) { #optional property not found
            $RequestUri = $null
        } else {
            $RequestUri = $JsonParameters.PSobject.Properties["requestUri"].value
        }

        $PSO = [PSCustomObject]@{
            "authenticationRequired" = ${AuthenticationRequired}
            "customerId" = ${CustomerId}
            "enableProxy" = ${EnableProxy}
            "fileServerId" = ${FileServerId}
            "nodes" = ${Nodes}
            "proxyPassword" = ${ProxyPassword}
            "proxyPort" = ${ProxyPort}
            "proxyProtocol" = ${ProxyProtocol}
            "proxyServer" = ${ProxyServer}
            "proxyUser" = ${ProxyUser}
            "proxyUserDomain" = ${ProxyUserDomain}
            "requestUri" = ${RequestUri}
        }

        return $PSO
    }

}

