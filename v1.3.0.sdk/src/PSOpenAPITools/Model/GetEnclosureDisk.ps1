#
# Data Services Cloud Console API
# Data Services Cloud Console API
# Version: 1.3.0
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER ArchType
Specifies arch type
.PARAMETER CustomerId
The customer application identifier
.PARAMETER FailReason
Specifies the failure reason, incase of failures
.PARAMETER FileServerId
An identifier of the file server resource, usually a UUID
.PARAMETER Generation
This value updates when the resource is updated and can be used as a short way to determine if a resource has changed or which of the two different copies of a resource is more up to date. 
.PARAMETER Id
Specifies the id of the drive
.PARAMETER InsertTime
No description available.
.PARAMETER JbofEnclosureId
Unique Identifier of the JBOF enclosure
.PARAMETER JbofEnclosureName
Name of the JBOF enclosure
.PARAMETER JbofNodeId
Unique identifier of the JBOF Node
.PARAMETER JbofNodeName
Name of the JBOF Node
.PARAMETER Model
Model of the drive
.PARAMETER Name
Specifies the name of the drive
.PARAMETER ResourceUri
Resource URI of the drive
.PARAMETER SerialNumber
Serial Number of the drive
.PARAMETER Shelf
Specifies the location of the shelf
.PARAMETER SizeInBytes
Size of the drive in bytes
.PARAMETER Slot
Specifies the slot number in a shelf
.PARAMETER State
State of the drive
.PARAMETER Type
Specifies the type of the drive
.PARAMETER Uuid
Specifies the uuid of the drive
.OUTPUTS

GetEnclosureDisk<PSCustomObject>
#>

function Initialize-GetEnclosureDisk {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ArchType},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${CustomerId},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${FailReason},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${FileServerId},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${Generation},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${Id},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${InsertTime},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${JbofEnclosureId},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${JbofEnclosureName},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${JbofNodeId},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${JbofNodeName},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Model},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ResourceUri},
        [Parameter(Position = 14, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SerialNumber},
        [Parameter(Position = 15, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Shelf},
        [Parameter(Position = 16, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${SizeInBytes},
        [Parameter(Position = 17, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${Slot},
        [Parameter(Position = 18, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("ACTIVE", "ACTIVATING", "INACTIVE", "DEACTIVATING", "FAILED", "FAILING", "LOGIN_FAILED", "PHASING_OUT", "ENTER_PHASING_OUT", "EXIT_PHASING_OUT", "UNKNOWN", "")]
        [String]
        ${State},
        [Parameter(Position = 19, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("NVRAM", "SSD", "")]
        [String]
        ${Type},
        [Parameter(Position = 20, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Uuid}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => GetEnclosureDisk' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($Generation -and $Generation -lt 0) {
          throw "invalid value for 'Generation', must be greater than or equal to 0."
        }

        if ($SizeInBytes -and $SizeInBytes -lt 0) {
          throw "invalid value for 'SizeInBytes', must be greater than or equal to 0."
        }

        if ($Slot -and $Slot -lt 0) {
          throw "invalid value for 'Slot', must be greater than or equal to 0."
        }


        $PSO = [PSCustomObject]@{
            "archType" = ${ArchType}
            "customerId" = ${CustomerId}
            "failReason" = ${FailReason}
            "fileServerId" = ${FileServerId}
            "generation" = ${Generation}
            "id" = ${Id}
            "insertTime" = ${InsertTime}
            "jbofEnclosureId" = ${JbofEnclosureId}
            "jbofEnclosureName" = ${JbofEnclosureName}
            "jbofNodeId" = ${JbofNodeId}
            "jbofNodeName" = ${JbofNodeName}
            "model" = ${Model}
            "name" = ${Name}
            "resourceUri" = ${ResourceUri}
            "serialNumber" = ${SerialNumber}
            "shelf" = ${Shelf}
            "sizeInBytes" = ${SizeInBytes}
            "slot" = ${Slot}
            "state" = ${State}
            "type" = ${Type}
            "uuid" = ${Uuid}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to GetEnclosureDisk<PSCustomObject>

.DESCRIPTION

Convert from JSON to GetEnclosureDisk<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

GetEnclosureDisk<PSCustomObject>
#>
function ConvertFrom-JsonToGetEnclosureDisk {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => GetEnclosureDisk' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in GetEnclosureDisk
        $AllProperties = ("archType", "customerId", "failReason", "fileServerId", "generation", "id", "insertTime", "jbofEnclosureId", "jbofEnclosureName", "jbofNodeId", "jbofNodeName", "model", "name", "resourceUri", "serialNumber", "shelf", "sizeInBytes", "slot", "state", "type", "uuid")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "archType"))) { #optional property not found
            $ArchType = $null
        } else {
            $ArchType = $JsonParameters.PSobject.Properties["archType"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "customerId"))) { #optional property not found
            $CustomerId = $null
        } else {
            $CustomerId = $JsonParameters.PSobject.Properties["customerId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "failReason"))) { #optional property not found
            $FailReason = $null
        } else {
            $FailReason = $JsonParameters.PSobject.Properties["failReason"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "fileServerId"))) { #optional property not found
            $FileServerId = $null
        } else {
            $FileServerId = $JsonParameters.PSobject.Properties["fileServerId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "generation"))) { #optional property not found
            $Generation = $null
        } else {
            $Generation = $JsonParameters.PSobject.Properties["generation"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) { #optional property not found
            $Id = $null
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "insertTime"))) { #optional property not found
            $InsertTime = $null
        } else {
            $InsertTime = $JsonParameters.PSobject.Properties["insertTime"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "jbofEnclosureId"))) { #optional property not found
            $JbofEnclosureId = $null
        } else {
            $JbofEnclosureId = $JsonParameters.PSobject.Properties["jbofEnclosureId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "jbofEnclosureName"))) { #optional property not found
            $JbofEnclosureName = $null
        } else {
            $JbofEnclosureName = $JsonParameters.PSobject.Properties["jbofEnclosureName"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "jbofNodeId"))) { #optional property not found
            $JbofNodeId = $null
        } else {
            $JbofNodeId = $JsonParameters.PSobject.Properties["jbofNodeId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "jbofNodeName"))) { #optional property not found
            $JbofNodeName = $null
        } else {
            $JbofNodeName = $JsonParameters.PSobject.Properties["jbofNodeName"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "model"))) { #optional property not found
            $Model = $null
        } else {
            $Model = $JsonParameters.PSobject.Properties["model"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) { #optional property not found
            $Name = $null
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "resourceUri"))) { #optional property not found
            $ResourceUri = $null
        } else {
            $ResourceUri = $JsonParameters.PSobject.Properties["resourceUri"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "serialNumber"))) { #optional property not found
            $SerialNumber = $null
        } else {
            $SerialNumber = $JsonParameters.PSobject.Properties["serialNumber"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "shelf"))) { #optional property not found
            $Shelf = $null
        } else {
            $Shelf = $JsonParameters.PSobject.Properties["shelf"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "sizeInBytes"))) { #optional property not found
            $SizeInBytes = $null
        } else {
            $SizeInBytes = $JsonParameters.PSobject.Properties["sizeInBytes"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "slot"))) { #optional property not found
            $Slot = $null
        } else {
            $Slot = $JsonParameters.PSobject.Properties["slot"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "state"))) { #optional property not found
            $State = $null
        } else {
            $State = $JsonParameters.PSobject.Properties["state"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "type"))) { #optional property not found
            $Type = $null
        } else {
            $Type = $JsonParameters.PSobject.Properties["type"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "uuid"))) { #optional property not found
            $Uuid = $null
        } else {
            $Uuid = $JsonParameters.PSobject.Properties["uuid"].value
        }

        $PSO = [PSCustomObject]@{
            "archType" = ${ArchType}
            "customerId" = ${CustomerId}
            "failReason" = ${FailReason}
            "fileServerId" = ${FileServerId}
            "generation" = ${Generation}
            "id" = ${Id}
            "insertTime" = ${InsertTime}
            "jbofEnclosureId" = ${JbofEnclosureId}
            "jbofEnclosureName" = ${JbofEnclosureName}
            "jbofNodeId" = ${JbofNodeId}
            "jbofNodeName" = ${JbofNodeName}
            "model" = ${Model}
            "name" = ${Name}
            "resourceUri" = ${ResourceUri}
            "serialNumber" = ${SerialNumber}
            "shelf" = ${Shelf}
            "sizeInBytes" = ${SizeInBytes}
            "slot" = ${Slot}
            "state" = ${State}
            "type" = ${Type}
            "uuid" = ${Uuid}
        }

        return $PSO
    }

}

