#
# Data Services Cloud Console API
# Data Services Cloud Console API
# Version: 1.3.0
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

system headroom contribution by volumes

.PARAMETER AssociatedLinks
Associated Links Details
.PARAMETER AverageHeadroomUtilization
No description available.
.PARAMETER CustomerId
id specific to the customer
.PARAMETER EndTime
endTime refers to last/ending period of the interval for which contributors are fetched
.PARAMETER HeadroomContribution
No description available.
.PARAMETER Remaining
No description available.
.PARAMETER RequestUri
requestUri for detailed storage object
.PARAMETER ResourceType
Resource type - volumes
.PARAMETER StartTime
startTime refers to starting period of the interval for which contributors are fetched
.PARAMETER System
No description available.
.PARAMETER SystemId
Serial Number of the array
.OUTPUTS

HeadroomContribution<PSCustomObject>
#>

function Initialize-HeadroomContribution {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${AssociatedLinks},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${AverageHeadroomUtilization},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${CustomerId},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Decimal]]
        ${EndTime},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${HeadroomContribution},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Remaining},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${RequestUri},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ResourceType},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Decimal]]
        ${StartTime},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${System},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SystemId}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => HeadroomContribution' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "associatedLinks" = ${AssociatedLinks}
            "averageHeadroomUtilization" = ${AverageHeadroomUtilization}
            "customerId" = ${CustomerId}
            "endTime" = ${EndTime}
            "headroomContribution" = ${HeadroomContribution}
            "remaining" = ${Remaining}
            "requestUri" = ${RequestUri}
            "resourceType" = ${ResourceType}
            "startTime" = ${StartTime}
            "system" = ${System}
            "systemId" = ${SystemId}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to HeadroomContribution<PSCustomObject>

.DESCRIPTION

Convert from JSON to HeadroomContribution<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

HeadroomContribution<PSCustomObject>
#>
function ConvertFrom-JsonToHeadroomContribution {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => HeadroomContribution' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in HeadroomContribution
        $AllProperties = ("associatedLinks", "averageHeadroomUtilization", "customerId", "endTime", "headroomContribution", "remaining", "requestUri", "resourceType", "startTime", "system", "systemId")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "associatedLinks"))) { #optional property not found
            $AssociatedLinks = $null
        } else {
            $AssociatedLinks = $JsonParameters.PSobject.Properties["associatedLinks"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "averageHeadroomUtilization"))) { #optional property not found
            $AverageHeadroomUtilization = $null
        } else {
            $AverageHeadroomUtilization = $JsonParameters.PSobject.Properties["averageHeadroomUtilization"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "customerId"))) { #optional property not found
            $CustomerId = $null
        } else {
            $CustomerId = $JsonParameters.PSobject.Properties["customerId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "endTime"))) { #optional property not found
            $EndTime = $null
        } else {
            $EndTime = $JsonParameters.PSobject.Properties["endTime"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "headroomContribution"))) { #optional property not found
            $HeadroomContribution = $null
        } else {
            $HeadroomContribution = $JsonParameters.PSobject.Properties["headroomContribution"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "remaining"))) { #optional property not found
            $Remaining = $null
        } else {
            $Remaining = $JsonParameters.PSobject.Properties["remaining"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "requestUri"))) { #optional property not found
            $RequestUri = $null
        } else {
            $RequestUri = $JsonParameters.PSobject.Properties["requestUri"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "resourceType"))) { #optional property not found
            $ResourceType = $null
        } else {
            $ResourceType = $JsonParameters.PSobject.Properties["resourceType"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "startTime"))) { #optional property not found
            $StartTime = $null
        } else {
            $StartTime = $JsonParameters.PSobject.Properties["startTime"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "system"))) { #optional property not found
            $System = $null
        } else {
            $System = $JsonParameters.PSobject.Properties["system"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "systemId"))) { #optional property not found
            $SystemId = $null
        } else {
            $SystemId = $JsonParameters.PSobject.Properties["systemId"].value
        }

        $PSO = [PSCustomObject]@{
            "associatedLinks" = ${AssociatedLinks}
            "averageHeadroomUtilization" = ${AverageHeadroomUtilization}
            "customerId" = ${CustomerId}
            "endTime" = ${EndTime}
            "headroomContribution" = ${HeadroomContribution}
            "remaining" = ${Remaining}
            "requestUri" = ${RequestUri}
            "resourceType" = ${ResourceType}
            "startTime" = ${StartTime}
            "system" = ${System}
            "systemId" = ${SystemId}
        }

        return $PSO
    }

}

