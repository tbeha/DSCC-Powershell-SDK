#
# Data Services Cloud Console API
# Data Services Cloud Console API
# Version: 1.3.0
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER ManagerIP
Specify the IP address of the host from which the manager runs
.PARAMETER Notify
Indicates the trap notification types defined by the HPE deviceType1 MIB
.PARAMETER Port
Specify the port number where the SNMP manager receives traps
.PARAMETER Retry
Specify the number of times to send a trap (retry) if the SNMP manager is not available.
.PARAMETER TimeoutSecs
Specify the number of seconds to wait before sending a trap (timeout).
.PARAMETER User
Specify the SNMPv3 user name
.PARAMETER Version
Specify the SNMP version supported
.OUTPUTS

NwSnmpMgrEdit<PSCustomObject>
#>

function Initialize-NwSnmpMgrEdit {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ManagerIP},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("ALL", "NODUP", "STANDARD")]
        [String]
        ${Notify},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${Port},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${Retry},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${TimeoutSecs},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${User},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Version}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => NwSnmpMgrEdit' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "managerIP" = ${ManagerIP}
            "notify" = ${Notify}
            "port" = ${Port}
            "retry" = ${Retry}
            "timeoutSecs" = ${TimeoutSecs}
            "user" = ${User}
            "version" = ${Version}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to NwSnmpMgrEdit<PSCustomObject>

.DESCRIPTION

Convert from JSON to NwSnmpMgrEdit<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

NwSnmpMgrEdit<PSCustomObject>
#>
function ConvertFrom-JsonToNwSnmpMgrEdit {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => NwSnmpMgrEdit' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in NwSnmpMgrEdit
        $AllProperties = ("managerIP", "notify", "port", "retry", "timeoutSecs", "user", "version")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "managerIP"))) { #optional property not found
            $ManagerIP = $null
        } else {
            $ManagerIP = $JsonParameters.PSobject.Properties["managerIP"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "notify"))) { #optional property not found
            $Notify = $null
        } else {
            $Notify = $JsonParameters.PSobject.Properties["notify"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "port"))) { #optional property not found
            $Port = $null
        } else {
            $Port = $JsonParameters.PSobject.Properties["port"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "retry"))) { #optional property not found
            $Retry = $null
        } else {
            $Retry = $JsonParameters.PSobject.Properties["retry"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "timeoutSecs"))) { #optional property not found
            $TimeoutSecs = $null
        } else {
            $TimeoutSecs = $JsonParameters.PSobject.Properties["timeoutSecs"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "user"))) { #optional property not found
            $User = $null
        } else {
            $User = $JsonParameters.PSobject.Properties["user"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "version"))) { #optional property not found
            $Version = $null
        } else {
            $Version = $JsonParameters.PSobject.Properties["version"].value
        }

        $PSO = [PSCustomObject]@{
            "managerIP" = ${ManagerIP}
            "notify" = ${Notify}
            "port" = ${Port}
            "retry" = ${Retry}
            "timeoutSecs" = ${TimeoutSecs}
            "user" = ${User}
            "version" = ${Version}
        }

        return $PSO
    }

}

