#
# Data Services Cloud Console API
# Data Services Cloud Console API
# Version: 1.3.0
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Response schema

.PARAMETER CustomerId
The customer application identifier
.PARAMETER EnclosureId
An identifier for the enclosure, usually a UUID
.PARAMETER EnclosureName
The enclosure name
.PARAMETER FileServerId
An identifier for the fileserver, usually a UUID
.PARAMETER FwVersion
Firmware version
.PARAMETER Generation
This value updates when the resource is updated and can be used as a short way to determine if a resource has changed or which of two different copies of a resource is more up to date. 
.PARAMETER Id
Specifies the id of the node
.PARAMETER Ipv4Address
IP Address of the network port
.PARAMETER JbofEnclosureId
An identifier for the jbof enclosure, usually a UUID
.PARAMETER JbofEnclosureName
The jbof enclsoure name
.PARAMETER LinkSpeed
Speed of the network port
.PARAMETER LinkState
Physical connection state
.PARAMETER LinkType
Type of the network port
.PARAMETER Mtu
Maximum transmission unit (MTU) size
.PARAMETER Name
Specifies the name of the node
.PARAMETER NodeId
An identifier for the node, usually a UUID
.PARAMETER NodeName
Node name
.PARAMETER Port
Specifies the port of the nic
.PARAMETER ResourceUri
Resource URI of the fileserver nic
.PARAMETER State
Health Status of the nic
.PARAMETER Type
Purpose of the network port
.PARAMETER Uuid
Specifies the uuid of the node
.PARAMETER VipPoolIds
VIPPools ID
.OUTPUTS

GetNICResponse<PSCustomObject>
#>

function Initialize-GetNICResponse {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${CustomerId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${EnclosureId},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${EnclosureName},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${FileServerId},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${FwVersion},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${Generation},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${Id},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Ipv4Address},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${JbofEnclosureId},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${JbofEnclosureName},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${LinkSpeed},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${LinkState},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("ETHERNET", "INFINIBAND", "")]
        [String]
        ${LinkType},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Decimal]]
        ${Mtu},
        [Parameter(Position = 14, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 15, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${NodeId},
        [Parameter(Position = 16, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${NodeName},
        [Parameter(Position = 17, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Port},
        [Parameter(Position = 18, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ResourceUri},
        [Parameter(Position = 19, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${State},
        [Parameter(Position = 20, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("MANAGEMENT", "DATA", "")]
        [String]
        ${Type},
        [Parameter(Position = 21, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Uuid},
        [Parameter(Position = 22, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${VipPoolIds}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => GetNICResponse' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($Generation -and $Generation -lt 0) {
          throw "invalid value for 'Generation', must be greater than or equal to 0."
        }


        $PSO = [PSCustomObject]@{
            "customerId" = ${CustomerId}
            "enclosureId" = ${EnclosureId}
            "enclosureName" = ${EnclosureName}
            "fileServerId" = ${FileServerId}
            "fwVersion" = ${FwVersion}
            "generation" = ${Generation}
            "id" = ${Id}
            "ipv4Address" = ${Ipv4Address}
            "jbofEnclosureId" = ${JbofEnclosureId}
            "jbofEnclosureName" = ${JbofEnclosureName}
            "linkSpeed" = ${LinkSpeed}
            "linkState" = ${LinkState}
            "linkType" = ${LinkType}
            "mtu" = ${Mtu}
            "name" = ${Name}
            "nodeId" = ${NodeId}
            "nodeName" = ${NodeName}
            "port" = ${Port}
            "resourceUri" = ${ResourceUri}
            "state" = ${State}
            "type" = ${Type}
            "uuid" = ${Uuid}
            "vipPoolIds" = ${VipPoolIds}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to GetNICResponse<PSCustomObject>

.DESCRIPTION

Convert from JSON to GetNICResponse<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

GetNICResponse<PSCustomObject>
#>
function ConvertFrom-JsonToGetNICResponse {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => GetNICResponse' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in GetNICResponse
        $AllProperties = ("customerId", "enclosureId", "enclosureName", "fileServerId", "fwVersion", "generation", "id", "ipv4Address", "jbofEnclosureId", "jbofEnclosureName", "linkSpeed", "linkState", "linkType", "mtu", "name", "nodeId", "nodeName", "port", "resourceUri", "state", "type", "uuid", "vipPoolIds")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "customerId"))) { #optional property not found
            $CustomerId = $null
        } else {
            $CustomerId = $JsonParameters.PSobject.Properties["customerId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "enclosureId"))) { #optional property not found
            $EnclosureId = $null
        } else {
            $EnclosureId = $JsonParameters.PSobject.Properties["enclosureId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "enclosureName"))) { #optional property not found
            $EnclosureName = $null
        } else {
            $EnclosureName = $JsonParameters.PSobject.Properties["enclosureName"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "fileServerId"))) { #optional property not found
            $FileServerId = $null
        } else {
            $FileServerId = $JsonParameters.PSobject.Properties["fileServerId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "fwVersion"))) { #optional property not found
            $FwVersion = $null
        } else {
            $FwVersion = $JsonParameters.PSobject.Properties["fwVersion"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "generation"))) { #optional property not found
            $Generation = $null
        } else {
            $Generation = $JsonParameters.PSobject.Properties["generation"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) { #optional property not found
            $Id = $null
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ipv4Address"))) { #optional property not found
            $Ipv4Address = $null
        } else {
            $Ipv4Address = $JsonParameters.PSobject.Properties["ipv4Address"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "jbofEnclosureId"))) { #optional property not found
            $JbofEnclosureId = $null
        } else {
            $JbofEnclosureId = $JsonParameters.PSobject.Properties["jbofEnclosureId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "jbofEnclosureName"))) { #optional property not found
            $JbofEnclosureName = $null
        } else {
            $JbofEnclosureName = $JsonParameters.PSobject.Properties["jbofEnclosureName"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "linkSpeed"))) { #optional property not found
            $LinkSpeed = $null
        } else {
            $LinkSpeed = $JsonParameters.PSobject.Properties["linkSpeed"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "linkState"))) { #optional property not found
            $LinkState = $null
        } else {
            $LinkState = $JsonParameters.PSobject.Properties["linkState"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "linkType"))) { #optional property not found
            $LinkType = $null
        } else {
            $LinkType = $JsonParameters.PSobject.Properties["linkType"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "mtu"))) { #optional property not found
            $Mtu = $null
        } else {
            $Mtu = $JsonParameters.PSobject.Properties["mtu"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) { #optional property not found
            $Name = $null
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "nodeId"))) { #optional property not found
            $NodeId = $null
        } else {
            $NodeId = $JsonParameters.PSobject.Properties["nodeId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "nodeName"))) { #optional property not found
            $NodeName = $null
        } else {
            $NodeName = $JsonParameters.PSobject.Properties["nodeName"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "port"))) { #optional property not found
            $Port = $null
        } else {
            $Port = $JsonParameters.PSobject.Properties["port"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "resourceUri"))) { #optional property not found
            $ResourceUri = $null
        } else {
            $ResourceUri = $JsonParameters.PSobject.Properties["resourceUri"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "state"))) { #optional property not found
            $State = $null
        } else {
            $State = $JsonParameters.PSobject.Properties["state"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "type"))) { #optional property not found
            $Type = $null
        } else {
            $Type = $JsonParameters.PSobject.Properties["type"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "uuid"))) { #optional property not found
            $Uuid = $null
        } else {
            $Uuid = $JsonParameters.PSobject.Properties["uuid"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "vipPoolIds"))) { #optional property not found
            $VipPoolIds = $null
        } else {
            $VipPoolIds = $JsonParameters.PSobject.Properties["vipPoolIds"].value
        }

        $PSO = [PSCustomObject]@{
            "customerId" = ${CustomerId}
            "enclosureId" = ${EnclosureId}
            "enclosureName" = ${EnclosureName}
            "fileServerId" = ${FileServerId}
            "fwVersion" = ${FwVersion}
            "generation" = ${Generation}
            "id" = ${Id}
            "ipv4Address" = ${Ipv4Address}
            "jbofEnclosureId" = ${JbofEnclosureId}
            "jbofEnclosureName" = ${JbofEnclosureName}
            "linkSpeed" = ${LinkSpeed}
            "linkState" = ${LinkState}
            "linkType" = ${LinkType}
            "mtu" = ${Mtu}
            "name" = ${Name}
            "nodeId" = ${NodeId}
            "nodeName" = ${NodeName}
            "port" = ${Port}
            "resourceUri" = ${ResourceUri}
            "state" = ${State}
            "type" = ${Type}
            "uuid" = ${Uuid}
            "vipPoolIds" = ${VipPoolIds}
        }

        return $PSO
    }

}

