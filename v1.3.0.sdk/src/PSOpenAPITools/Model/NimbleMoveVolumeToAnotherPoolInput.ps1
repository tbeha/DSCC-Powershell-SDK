#
# Data Services Cloud Console API
# Data Services Cloud Console API
# Version: 1.3.0
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Input to move Nimble volume to another pool.

.PARAMETER DestPoolId
ID of the destination pool or folder. Specify a pool ID when the volumes should not be in a folder; otherwise, specify a folder ID and the pool will be derived from the folder. A 42 digit hexadecimal number
.OUTPUTS

NimbleMoveVolumeToAnotherPoolInput<PSCustomObject>
#>

function Initialize-NimbleMoveVolumeToAnotherPoolInput {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${DestPoolId}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => NimbleMoveVolumeToAnotherPoolInput' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "dest_pool_id" = ${DestPoolId}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to NimbleMoveVolumeToAnotherPoolInput<PSCustomObject>

.DESCRIPTION

Convert from JSON to NimbleMoveVolumeToAnotherPoolInput<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

NimbleMoveVolumeToAnotherPoolInput<PSCustomObject>
#>
function ConvertFrom-JsonToNimbleMoveVolumeToAnotherPoolInput {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => NimbleMoveVolumeToAnotherPoolInput' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in NimbleMoveVolumeToAnotherPoolInput
        $AllProperties = ("dest_pool_id")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'dest_pool_id' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "dest_pool_id"))) {
            throw "Error! JSON cannot be serialized due to the required property 'dest_pool_id' missing."
        } else {
            $DestPoolId = $JsonParameters.PSobject.Properties["dest_pool_id"].value
        }

        $PSO = [PSCustomObject]@{
            "dest_pool_id" = ${DestPoolId}
        }

        return $PSO
    }

}

