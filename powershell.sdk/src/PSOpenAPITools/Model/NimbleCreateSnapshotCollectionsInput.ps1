#
# Data Services Cloud Console API
# Data Services Cloud Console API
# Version: 1.3.0
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Create {DeviceType-2} snapshot collections input. Create a snapshot collection. VSS application-synchronized snapshot collection must specify the 'allow_writes' parameter ans set it to 'true'.

.PARAMETER AgentType
External management agent type for snapshots being created as part of snapshot collection. Possible values: 'none', 'smis', 'vvol', 'openstack', 'openstackv2'.
.PARAMETER AllowWrites
Atollow applications to write to created snapshot(s). Mandatory and must be set to 'true' for VSS application synchronized snapshots. Possible values: 'true', 'false'.
.PARAMETER Description
Text description of snapshot collection. String of up to 255 printable ASCII characters. Example: '99.9999% availability'.
.PARAMETER DisableAppsync
Do not perform application synchronization for this snapshot, create a crash-consistent snapshot instead. Possible values: 'true', 'false'.
.PARAMETER InvokeOnUpstreamPartner
Invoke snapshot request on upstream partner. Possible values: 'true', 'false'.
.PARAMETER IsExternalTrigger
Is externally triggered. Possible values: 'true', 'false'.
.PARAMETER Metadata
Key-value pairs that augment a snapshot collection's attributes. List of key-value pairs. Keys must be unique and non-empty. When creating an object, values must be non-empty. When updating an object, an empty value causes the corresponding key to be removed.
.PARAMETER Name
Name of snapshot collection. String of up to 215 alphanumeric, hyphenated, colon, or period-separated characters; but cannot begin with hyphen, colon or period. This type is used for object sets containing volumes, snapshots, snapshot collections and protocol endpoints.
.PARAMETER Replicate
True if this snapshot collection has been marked for replication. Possible values: 'true', 'false'.
.PARAMETER ReplicateTo
Specifies the partner name that the snapshots in this snapshot collection are replicated to. String of up to 64 alphanumeric characters, - and . and : are allowed after first character. Example: 'myobject-5'.
.PARAMETER SkipDbConsistencyCheck
Skip consistency check for database files on this snapshot. This option only applies to volume collections with application synchronization set to VSS, application ID set to MS Exchange 2010 or later with Database Availability Group (DAG), snap_verify option set to true, and disable_appsync option set to false. Possible values: 'true', 'false'.
.PARAMETER SnapVerify
Run verification tool on this snapshot. This option can only be used with a volume collection that has application synchronization. Possible values: 'true', 'false'.
.PARAMETER StartOnline
Start with snapshot set online. Possible values: 'true', 'false'.
.PARAMETER VolSnapAttrList
List of snapshot attributes for snapshots being created as part of snapshot collection creation. List of volumes with per snapshot attributes.
.OUTPUTS

NimbleCreateSnapshotCollectionsInput<PSCustomObject>
#>

function Initialize-NimbleCreateSnapshotCollectionsInput {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${AgentType},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${AllowWrites},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Description},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${DisableAppsync},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${InvokeOnUpstreamPartner},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${IsExternalTrigger},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Metadata},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${Replicate},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ReplicateTo},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${SkipDbConsistencyCheck},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${SnapVerify},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${StartOnline},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${VolSnapAttrList}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => NimbleCreateSnapshotCollectionsInput' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $Name) {
            throw "invalid value for 'Name', 'Name' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "agent_type" = ${AgentType}
            "allow_writes" = ${AllowWrites}
            "description" = ${Description}
            "disable_appsync" = ${DisableAppsync}
            "invoke_on_upstream_partner" = ${InvokeOnUpstreamPartner}
            "is_external_trigger" = ${IsExternalTrigger}
            "metadata" = ${Metadata}
            "name" = ${Name}
            "replicate" = ${Replicate}
            "replicate_to" = ${ReplicateTo}
            "skip_db_consistency_check" = ${SkipDbConsistencyCheck}
            "snap_verify" = ${SnapVerify}
            "start_online" = ${StartOnline}
            "vol_snap_attr_list" = ${VolSnapAttrList}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to NimbleCreateSnapshotCollectionsInput<PSCustomObject>

.DESCRIPTION

Convert from JSON to NimbleCreateSnapshotCollectionsInput<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

NimbleCreateSnapshotCollectionsInput<PSCustomObject>
#>
function ConvertFrom-JsonToNimbleCreateSnapshotCollectionsInput {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => NimbleCreateSnapshotCollectionsInput' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in NimbleCreateSnapshotCollectionsInput
        $AllProperties = ("agent_type", "allow_writes", "description", "disable_appsync", "invoke_on_upstream_partner", "is_external_trigger", "metadata", "name", "replicate", "replicate_to", "skip_db_consistency_check", "snap_verify", "start_online", "vol_snap_attr_list")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'name' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) {
            throw "Error! JSON cannot be serialized due to the required property 'name' missing."
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "agent_type"))) { #optional property not found
            $AgentType = $null
        } else {
            $AgentType = $JsonParameters.PSobject.Properties["agent_type"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "allow_writes"))) { #optional property not found
            $AllowWrites = $null
        } else {
            $AllowWrites = $JsonParameters.PSobject.Properties["allow_writes"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "description"))) { #optional property not found
            $Description = $null
        } else {
            $Description = $JsonParameters.PSobject.Properties["description"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "disable_appsync"))) { #optional property not found
            $DisableAppsync = $null
        } else {
            $DisableAppsync = $JsonParameters.PSobject.Properties["disable_appsync"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "invoke_on_upstream_partner"))) { #optional property not found
            $InvokeOnUpstreamPartner = $null
        } else {
            $InvokeOnUpstreamPartner = $JsonParameters.PSobject.Properties["invoke_on_upstream_partner"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "is_external_trigger"))) { #optional property not found
            $IsExternalTrigger = $null
        } else {
            $IsExternalTrigger = $JsonParameters.PSobject.Properties["is_external_trigger"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "metadata"))) { #optional property not found
            $Metadata = $null
        } else {
            $Metadata = $JsonParameters.PSobject.Properties["metadata"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "replicate"))) { #optional property not found
            $Replicate = $null
        } else {
            $Replicate = $JsonParameters.PSobject.Properties["replicate"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "replicate_to"))) { #optional property not found
            $ReplicateTo = $null
        } else {
            $ReplicateTo = $JsonParameters.PSobject.Properties["replicate_to"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "skip_db_consistency_check"))) { #optional property not found
            $SkipDbConsistencyCheck = $null
        } else {
            $SkipDbConsistencyCheck = $JsonParameters.PSobject.Properties["skip_db_consistency_check"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "snap_verify"))) { #optional property not found
            $SnapVerify = $null
        } else {
            $SnapVerify = $JsonParameters.PSobject.Properties["snap_verify"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "start_online"))) { #optional property not found
            $StartOnline = $null
        } else {
            $StartOnline = $JsonParameters.PSobject.Properties["start_online"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "vol_snap_attr_list"))) { #optional property not found
            $VolSnapAttrList = $null
        } else {
            $VolSnapAttrList = $JsonParameters.PSobject.Properties["vol_snap_attr_list"].value
        }

        $PSO = [PSCustomObject]@{
            "agent_type" = ${AgentType}
            "allow_writes" = ${AllowWrites}
            "description" = ${Description}
            "disable_appsync" = ${DisableAppsync}
            "invoke_on_upstream_partner" = ${InvokeOnUpstreamPartner}
            "is_external_trigger" = ${IsExternalTrigger}
            "metadata" = ${Metadata}
            "name" = ${Name}
            "replicate" = ${Replicate}
            "replicate_to" = ${ReplicateTo}
            "skip_db_consistency_check" = ${SkipDbConsistencyCheck}
            "snap_verify" = ${SnapVerify}
            "start_online" = ${StartOnline}
            "vol_snap_attr_list" = ${VolSnapAttrList}
        }

        return $PSO
    }

}

