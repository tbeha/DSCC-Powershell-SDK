#
# Data Services Cloud Console API
# Data Services Cloud Console API
# Version: 1.3.0
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER AllowGroup
Indicates whether group is allowed.
.PARAMETER AllowIscsi
Indicates whether iSCSI is allowed.
.PARAMETER DiscoveryIp
Discovery IP address.
.PARAMETER Failover
Failover setting of the subnet.
.PARAMETER FailoverEnableTime
Failover for this subnet will be enabled again at the time specified by failover_enable_time.
.PARAMETER Label
Subnet label.
.PARAMETER Mtu
MTU for specified subnet.
.PARAMETER Netmask
Subnet netmask address.
.PARAMETER Network
Network IP address.
.PARAMETER NetzoneType
Netzone type. Possible values: 'single', 'evenodd', 'bisect', 'none'.
.PARAMETER Type
Subnet type. Possible values: 'mgmt', 'unconfigured', 'data', 'mgmt_data', 'invalid'.
.PARAMETER VlanId
VLAN ID for specified subnet.
.OUTPUTS

NimbleSubnet<PSCustomObject>
#>

function Initialize-NimbleSubnet {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${AllowGroup},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${AllowIscsi},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${DiscoveryIp},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${Failover},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${FailoverEnableTime},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Label},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${Mtu},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Netmask},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Network},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${NetzoneType},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Type},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${VlanId}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => NimbleSubnet' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "allow_group" = ${AllowGroup}
            "allow_iscsi" = ${AllowIscsi}
            "discovery_ip" = ${DiscoveryIp}
            "failover" = ${Failover}
            "failover_enable_time" = ${FailoverEnableTime}
            "label" = ${Label}
            "mtu" = ${Mtu}
            "netmask" = ${Netmask}
            "network" = ${Network}
            "netzone_type" = ${NetzoneType}
            "type" = ${Type}
            "vlan_id" = ${VlanId}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to NimbleSubnet<PSCustomObject>

.DESCRIPTION

Convert from JSON to NimbleSubnet<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

NimbleSubnet<PSCustomObject>
#>
function ConvertFrom-JsonToNimbleSubnet {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => NimbleSubnet' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in NimbleSubnet
        $AllProperties = ("allow_group", "allow_iscsi", "discovery_ip", "failover", "failover_enable_time", "label", "mtu", "netmask", "network", "netzone_type", "type", "vlan_id")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "allow_group"))) { #optional property not found
            $AllowGroup = $null
        } else {
            $AllowGroup = $JsonParameters.PSobject.Properties["allow_group"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "allow_iscsi"))) { #optional property not found
            $AllowIscsi = $null
        } else {
            $AllowIscsi = $JsonParameters.PSobject.Properties["allow_iscsi"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "discovery_ip"))) { #optional property not found
            $DiscoveryIp = $null
        } else {
            $DiscoveryIp = $JsonParameters.PSobject.Properties["discovery_ip"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "failover"))) { #optional property not found
            $Failover = $null
        } else {
            $Failover = $JsonParameters.PSobject.Properties["failover"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "failover_enable_time"))) { #optional property not found
            $FailoverEnableTime = $null
        } else {
            $FailoverEnableTime = $JsonParameters.PSobject.Properties["failover_enable_time"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "label"))) { #optional property not found
            $Label = $null
        } else {
            $Label = $JsonParameters.PSobject.Properties["label"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "mtu"))) { #optional property not found
            $Mtu = $null
        } else {
            $Mtu = $JsonParameters.PSobject.Properties["mtu"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "netmask"))) { #optional property not found
            $Netmask = $null
        } else {
            $Netmask = $JsonParameters.PSobject.Properties["netmask"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "network"))) { #optional property not found
            $Network = $null
        } else {
            $Network = $JsonParameters.PSobject.Properties["network"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "netzone_type"))) { #optional property not found
            $NetzoneType = $null
        } else {
            $NetzoneType = $JsonParameters.PSobject.Properties["netzone_type"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "type"))) { #optional property not found
            $Type = $null
        } else {
            $Type = $JsonParameters.PSobject.Properties["type"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "vlan_id"))) { #optional property not found
            $VlanId = $null
        } else {
            $VlanId = $JsonParameters.PSobject.Properties["vlan_id"].value
        }

        $PSO = [PSCustomObject]@{
            "allow_group" = ${AllowGroup}
            "allow_iscsi" = ${AllowIscsi}
            "discovery_ip" = ${DiscoveryIp}
            "failover" = ${Failover}
            "failover_enable_time" = ${FailoverEnableTime}
            "label" = ${Label}
            "mtu" = ${Mtu}
            "netmask" = ${Netmask}
            "network" = ${Network}
            "netzone_type" = ${NetzoneType}
            "type" = ${Type}
            "vlan_id" = ${VlanId}
        }

        return $PSO
    }

}

