#
# Data Services Cloud Console API
# Data Services Cloud Console API
# Version: 1.3.0
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER AccessProtocolList
Protocol used to access this group. List of access protocols.
.PARAMETER AlarmsEnabled
Whether alarm feature is enabled.
.PARAMETER AlertFromEmailAddr
From email address to use while sending emails. Case insensitive email address.
.PARAMETER AlertMinLevel
Minimum level of alert to be notified. Possible values: 'info', 'notice', 'warning', 'critical'.
.PARAMETER AlertToEmailAddrs
Comma-separated list of email addresss to receive emails. Comma separated email list.
.PARAMETER AllowSupportTunnel
Whether to allow support tunnel.
.PARAMETER ArrayUnassignMigrationStatus
Data migration status for arrays being removed from their pool. Data migration status information for arrays being unassigned from their pool.
.PARAMETER Arrays
No description available.
.PARAMETER AssociatedLinks
Associated Links Details
.PARAMETER AutoSwitchoverEnabled
Whether automatic switchover of Group management services feature is enabled.
.PARAMETER AutoSwitchoverMessages
List of validation messages for automatic switchover of Group Management. This will be empty when there are no conflicts found.
.PARAMETER AutocleanUnmanagedSnapshotsEnabled
Whether auto-clean unmanaged snapshots feature is enabled.
.PARAMETER AutocleanUnmanagedSnapshotsTtlUnit
Deprecated. Unit for unmanaged snapshot time to live.
.PARAMETER AutosupportEnabled
Whether to send autosupport.
.PARAMETER CcModeEnabled
Enable or disable Common Criteria mode.
.PARAMETER CloneRatio
Clone savings for the group expressed as ratio. Fraction expressed as floating point number.
.PARAMETER CloudManagement
Specifies the mode of operation in cloud. Possible values are 'off', 'read_write', 'read_only'.
.PARAMETER CompressedSnapUsageBytes
Compressed usage of snapshots in the group.
.PARAMETER CompressedVolUsageBytes
Compressed usage of volumes in the group.
.PARAMETER CompressionRatio
Compression savings for the group expressed as ratio. Fraction expressed as floating point number.
.PARAMETER CustomerId
customerId
.PARAMETER DataRebalanceStatus
Status of data rebalancing operations for pools in the group. Status of data re-balancing operations for a list of pools.
.PARAMETER DataReductionRatio
Space savings in the group that does not include thin-provisioning savings expressed as ratio. Fraction expressed as floating point number.
.PARAMETER Date
Unix epoch time local to the group. Seconds since last epoch i.e. 00:00 January 1, 1970.
.PARAMETER DedupeRatio
Dedupe savings for the group expressed as ratio. Fraction expressed as floating point number.
.PARAMETER DefaultIscsiTargetScope
Newly created volumes are exported under iSCSI Group Target or iSCSI Volume Target.
.PARAMETER DefaultSnapLimitPercent
Default limit for a volumes snapshot space usage, expressed either as a percentage of the volumes size or as -1 to indicate that there is no limit. A volume will be taken offline or made non-writable upon exceeding its snapshot limit. Signed 64-bit integer.
.PARAMETER DefaultSnapReserve
Amount of space to reserve for snapshots of a volume as a percentage of volume size.
.PARAMETER DefaultSnapWarnLevel
Default threshold for snapshot space usage of a volume as a percentage of volume size above which an alert is raised.
.PARAMETER DefaultVolumeLimit
Default limit for a volume space usage as a percentage of volume size. Volume will be taken offline/made non-writable on exceeding its limit. Percentage as integer from 0 to 100.
.PARAMETER DefaultVolumeReserve
Amount of space to reserve for a volume as a percentage of volume size. Percentage as integer from 0 to 100.
.PARAMETER DefaultVolumeWarnLevel
Default threshold for volume space usage as a percentage of volume size above which an alert is raised. Percentage as integer from 0 to 100.
.PARAMETER DnsServers
IP addresses for this groups dns servers. List of IP Addresses.
.PARAMETER DomainName
Domain name for this group. String of alphanumeric characters, valid range is from 2 to 255; Each label must be between 1 and 63 characters long; - and . are allowed after the first and before the last character.
.PARAMETER EncryptionConfig
No description available.
.PARAMETER FailoverMode
Failover mode of the group Management Service. Possible values: 'Manual', 'Automatic'.
.PARAMETER FcEnabled
Whether FC is enabled on this group.
.PARAMETER FreeSpace
Free space of the pool in bytes.
.PARAMETER Generation
generation
.PARAMETER GroupSnapshotTtl
Snapshot Time-to-live(TTL) configured at group level for automatic deletion of unmanaged snapshots. Value 0 indicates unlimited TTL.
.PARAMETER GroupTargetEnabled
Is group_target enabled on this group.
.PARAMETER GroupTargetName
Iscsi target name for this group. Plain string.
.PARAMETER IscsiAutomaticConnectionMethod
Is iscsi reconnection automatic.
.PARAMETER IscsiConnectionRebalancing
Does ISCSI automatically rebalance connections.
.PARAMETER IscsiEnabled
Whether iSCSI is enabled on this group.
.PARAMETER IsnsEnabled
Whether iSNS is enabled.
.PARAMETER IsnsPort
Port number for iSNS Server. Positive integer value up to 65535 representing TCP/IP port.
.PARAMETER IsnsServer
Hostname or IP Address of iSNS Server. String of alphanumeric characters, valid range is from 2 to 255; Each label must be between 1 and 63 characters long; - and . are allowed after the first and before the last character.
.PARAMETER LastLogin
Time and user of last login to this group. Plain string.
.PARAMETER LeaderArrayName
Name of the array where the group Management Service is running.
.PARAMETER LeaderArraySerial
Serial number of the array where the group Management Service is running.
.PARAMETER ManagementServiceBackupArrayName
Name of the array where backup the group Management Service is running.
.PARAMETER ManagementServiceBackupStatus
HA status of the group Management Service. Possible values: 'in_sync', 'remove_in_progress', 'yet_to_setup', 'unsetup_in_progress', 'setup_in_progress', 'out_of_sync', 'add_in_progress', 'setup_failed'.
.PARAMETER MemberList
Members of this group. A list of object names.
.PARAMETER MergeGroupName
Group that were being merged with. Plain string.
.PARAMETER MergeState
State of group merge. Possible values: 'dset_start', 'dest_DB', 'dest_DB_done', 'dest_reassigned', 'dest_relinquish', 'dest_DB_failed', 'src_start', 'src_quiesced', 'src_reassigned', 'src_quiesce_failed', 'src_reassign_failed', 'none'.
.PARAMETER NtpServer
Either IP address or hostname of the NTP server for this group. Plain string.
.PARAMETER NumConnections
Number of connections to the group.
.PARAMETER NumSnapcolls
Number of snapshot collections in this group.
.PARAMETER NumSnaps
Number of snapshots in the group.
.PARAMETER PendingDeletes
Usage for blocks that are not yet deleted.
.PARAMETER ProxyPort
Proxy Port of HTTP Proxy Server. Integer value between 0-65535 representing TCP/IP port.
.PARAMETER ProxyServer
Hostname or IP Address of HTTP Proxy Server. Setting this attribute to an empty string will unset all proxy settings. String of alphanumeric characters, can be an empty string, or valid range must be from 2 to 255; Each label must be between 1 and 63 characters long; - and . are allowed after the first and before the last character.
.PARAMETER ProxyUsername
Username to authenticate with HTTP Proxy Server. HTTP proxy server username, string up to 255 characters, special characters ([, ], `, ;, ampersand, tab, space, newline) are not allowed.
.PARAMETER RawCacheCapacity
Total cache capacity of the group.
.PARAMETER RawCapacity
Total capacity of the group.
.PARAMETER ReplThrottleList
All the replication bandwidth limits on the system. All the throttles for the partner.
.PARAMETER ReplThrottledBandwidth
Current bandwidth throttle for replication, expressed either as megabits per second or as -1 to indicate that there is no throttle. Signed 64-bit integer.
.PARAMETER ReplThrottledBandwidthKbps
Current bandwidth throttle for replication, expressed either as kilobits per second or as -1 to indicate that there is no throttle. Signed 64-bit integer.
.PARAMETER ResourceUri
Link to the object URI
.PARAMETER Savings
Overall space usage savings in the group.
.PARAMETER SavingsClone
Space usage savings in the group due to cloning of volumes.
.PARAMETER SavingsCompression
Space usage savings in the group due to compression.
.PARAMETER SavingsDataReduction
Space usage savings in the group that does not include thin-provisioning savings.
.PARAMETER SavingsDedupe
Space usage savings in the group due to deduplication.
.PARAMETER SavingsRatio
Overall savings in the group expressed as ratio. Fraction expressed as floating point number.
.PARAMETER SavingsVolThinProvisioning
Space usage savings in the group due to thin provisioning of volumes.
.PARAMETER ScsiVendorId
SCSI vendor ID. Plain string.
.PARAMETER SendAlertToSupport
Whether to send alert to Support.
.PARAMETER SmtpPort
Port number of SMTP Server. Positive integer value up to 65535 representing TCP/IP port.
.PARAMETER SmtpServer
Hostname or IP Address of SMTP Server. String of alphanumeric characters, valid range is from 2 to 255; Each label must be between 1 and 63 characters long; - and . are allowed after the first and before the last character.
.PARAMETER SnapCompressionRatio
Compression ratio of snapshots in the group. Fraction expressed as floating point number.
.PARAMETER SnapRetnMeterHigh
Threshold for considering a volume as high retention.
.PARAMETER SnapRetnMeterVeryHigh
Threshold for considering a volume as very high retention.
.PARAMETER SnapUsagePopulated
Total snapshot usage as if each snapshot is deep copy of the volume.
.PARAMETER SnmpCommunity
Community string to be used with SNMP. String of up to 64 alphanumeric characters, - and . and : are allowed after first character.
.PARAMETER SnmpGetEnabled
Whether to accept SNMP get commands.
.PARAMETER SnmpGetPort
Port number to which SNMP get requests should be sent. Positive integer value up to 65535 representing TCP/IP port.
.PARAMETER SnmpSysContact
Name of the SNMP administrator. Plain string.
.PARAMETER SnmpSysLocation
Location of the group. Plain string.
.PARAMETER SnmpTrapEnabled
Whether to enable SNMP traps.
.PARAMETER SnmpTrapHost
Hostname or IP Address to send SNMP traps. String of alphanumeric characters, valid range is from 2 to 255; Each label must be between 1 and 63 characters long; - and . are allowed after the first and before the last character.
.PARAMETER SnmpTrapPort
Port number of SNMP trap host. Positive integer value up to 65535 representing TCP/IP port.
.PARAMETER SpaceInfoValid
Is space info for this group valid.
.PARAMETER SyslogdEnabled
Is syslogd enabled on this system.
.PARAMETER SyslogdPort
Port number for syslogd server. Positive integer value up to 65535 representing TCP/IP port.
.PARAMETER SyslogdServer
Hostname of the syslogd server. String of alphanumeric characters, valid range is from 2 to 255; Each label must be between 1 and 63 characters long; - and . are allowed after the first and before the last character.
.PARAMETER SyslogdServers
syslogd server info.
.PARAMETER SystemHeadroom
No description available.
.PARAMETER TdzEnabled
Is Target Driven Zoning (TDZ) enabled on this group.
.PARAMETER TdzPrefix
Target Driven Zoning (TDZ) prefix for peer zones created by TDZ.
.PARAMETER Timezone
Timezone in which this group is located. Plain string.
.PARAMETER Tlsv1Enabled
Enable or disable TLSv1.0 and TLSv1.1.
.PARAMETER UncompressedSnapUsageBytes
Uncompressed usage of snapshots in the group.
.PARAMETER UncompressedVolUsageBytes
Uncompressed usage of volumes in the group.
.PARAMETER UniqueNameEnabled
Are new volume and volume collection names transformed on this group.
.PARAMETER UnusedReserveBytes
Reserved space that is not utilized.
.PARAMETER UpdateArrayNames
Arrays in the group undergoing update. Comma separated list of up to 64 non-empty lowercase alphanumeric strings without spaces.
.PARAMETER UpdateDownloadEndTime
End time of last update. Seconds since last epoch i.e. 00:00 January 1, 1970.
.PARAMETER UpdateDownloadErrorCode
If the software download has failed, this indicates the error code corresponding to the failure. Non-negative integer in range [0,9000].
.PARAMETER UpdateDownloadStartTime
Start time of last update. Seconds since last epoch i.e. 00:00 January 1, 1970.
.PARAMETER UpdateDownloading
Is software update package currently downloading.
.PARAMETER UpdateEndTime
End time of last update. Seconds since last epoch i.e. 00:00 January 1, 1970.
.PARAMETER UpdateErrorCode
If the software update has failed, this indicates the error code corresponding to the failure. Non-negative integer in range [0,9000].
.PARAMETER UpdateProgressMsg
Group update detailed progress message. Plain string.
.PARAMETER UpdateStartTime
Start time of last update. Seconds since last epoch i.e. 00:00 January 1, 1970.
.PARAMETER UpdateState
Group update state.Possible values: 'invalid', 'normal', 'updating', 'timed_out', 'failed', 'paused'.
.PARAMETER UsableCacheCapacity
Usable cache capacity of the group.
.PARAMETER UsableCapacityBytes
Usable capacity bytes of the group.
.PARAMETER Usage
Used space of the group in bytes.
.PARAMETER UsageValid
Indicates whether the usage of group is valid.
.PARAMETER UserInactivityTimeout
The amount of time in seconds that the user session is inactive before timing out. User inactivity timeout in second, valid range is from 1 to 43200 (720 minutes).
.PARAMETER VersionCurrent
Version of software running on the group.
.PARAMETER VersionRollback
Rollback software version for the group.
.PARAMETER VersionTarget
Desired software version for the group.
.PARAMETER VolCompressionRatio
Compression ratio of volumes in the group. Fraction expressed as floating point number.
.PARAMETER VolThinProvisioningRatio
Thin provisioning savings for volumes in the group expressed as ratio. Fraction expressed as floating point number.
.PARAMETER VolumeMigrationStatus
Status of data migration activity related to volumes being relocated to different pools. List of data migration status for a group of related volumes.
.PARAMETER VssValidationTimeout
The amount of time in seconds to validate Microsoft VSS application synchronization before timing out. VSS validation timeout in second, valid range is from 1 to 3600 (60 minutes).
.PARAMETER VvolEnabled
Are vvols enabled on this group.
.PARAMETER WitnessStatus
Witness status from group Management Service array and group Management Service backup array.
.OUTPUTS

NimbleStorageSystemDetail<PSCustomObject>
#>

function Initialize-NimbleStorageSystemDetail {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${AccessProtocolList},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${AlarmsEnabled},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${AlertFromEmailAddr},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${AlertMinLevel},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${AlertToEmailAddrs},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${AllowSupportTunnel},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${ArrayUnassignMigrationStatus},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Arrays},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${AssociatedLinks},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${AutoSwitchoverEnabled},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${AutoSwitchoverMessages},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${AutocleanUnmanagedSnapshotsEnabled},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${AutocleanUnmanagedSnapshotsTtlUnit},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${AutosupportEnabled},
        [Parameter(Position = 14, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${CcModeEnabled},
        [Parameter(Position = 15, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Decimal]]
        ${CloneRatio},
        [Parameter(Position = 16, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${CloudManagement},
        [Parameter(Position = 17, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${CompressedSnapUsageBytes},
        [Parameter(Position = 18, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${CompressedVolUsageBytes},
        [Parameter(Position = 19, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Decimal]]
        ${CompressionRatio},
        [Parameter(Position = 20, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${CustomerId},
        [Parameter(Position = 21, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${DataRebalanceStatus},
        [Parameter(Position = 22, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Decimal]]
        ${DataReductionRatio},
        [Parameter(Position = 23, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${Date},
        [Parameter(Position = 24, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Decimal]]
        ${DedupeRatio},
        [Parameter(Position = 25, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${DefaultIscsiTargetScope},
        [Parameter(Position = 26, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${DefaultSnapLimitPercent},
        [Parameter(Position = 27, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${DefaultSnapReserve},
        [Parameter(Position = 28, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${DefaultSnapWarnLevel},
        [Parameter(Position = 29, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${DefaultVolumeLimit},
        [Parameter(Position = 30, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${DefaultVolumeReserve},
        [Parameter(Position = 31, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${DefaultVolumeWarnLevel},
        [Parameter(Position = 32, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${DnsServers},
        [Parameter(Position = 33, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${DomainName},
        [Parameter(Position = 34, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${EncryptionConfig},
        [Parameter(Position = 35, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${FailoverMode},
        [Parameter(Position = 36, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${FcEnabled},
        [Parameter(Position = 37, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${FreeSpace},
        [Parameter(Position = 38, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Generation},
        [Parameter(Position = 39, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${GroupSnapshotTtl},
        [Parameter(Position = 40, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${GroupTargetEnabled},
        [Parameter(Position = 41, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${GroupTargetName},
        [Parameter(Position = 42, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${IscsiAutomaticConnectionMethod},
        [Parameter(Position = 43, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${IscsiConnectionRebalancing},
        [Parameter(Position = 44, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${IscsiEnabled},
        [Parameter(Position = 45, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${IsnsEnabled},
        [Parameter(Position = 46, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${IsnsPort},
        [Parameter(Position = 47, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${IsnsServer},
        [Parameter(Position = 48, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${LastLogin},
        [Parameter(Position = 49, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${LeaderArrayName},
        [Parameter(Position = 50, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${LeaderArraySerial},
        [Parameter(Position = 51, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ManagementServiceBackupArrayName},
        [Parameter(Position = 52, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ManagementServiceBackupStatus},
        [Parameter(Position = 53, ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${MemberList},
        [Parameter(Position = 54, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${MergeGroupName},
        [Parameter(Position = 55, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${MergeState},
        [Parameter(Position = 56, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${NtpServer},
        [Parameter(Position = 57, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${NumConnections},
        [Parameter(Position = 58, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${NumSnapcolls},
        [Parameter(Position = 59, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${NumSnaps},
        [Parameter(Position = 60, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${PendingDeletes},
        [Parameter(Position = 61, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${ProxyPort},
        [Parameter(Position = 62, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ProxyServer},
        [Parameter(Position = 63, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ProxyUsername},
        [Parameter(Position = 64, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${RawCacheCapacity},
        [Parameter(Position = 65, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${RawCapacity},
        [Parameter(Position = 66, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${ReplThrottleList},
        [Parameter(Position = 67, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${ReplThrottledBandwidth},
        [Parameter(Position = 68, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${ReplThrottledBandwidthKbps},
        [Parameter(Position = 69, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ResourceUri},
        [Parameter(Position = 70, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${Savings},
        [Parameter(Position = 71, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${SavingsClone},
        [Parameter(Position = 72, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${SavingsCompression},
        [Parameter(Position = 73, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${SavingsDataReduction},
        [Parameter(Position = 74, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${SavingsDedupe},
        [Parameter(Position = 75, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Decimal]]
        ${SavingsRatio},
        [Parameter(Position = 76, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${SavingsVolThinProvisioning},
        [Parameter(Position = 77, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ScsiVendorId},
        [Parameter(Position = 78, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${SendAlertToSupport},
        [Parameter(Position = 79, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${SmtpPort},
        [Parameter(Position = 80, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SmtpServer},
        [Parameter(Position = 81, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Decimal]]
        ${SnapCompressionRatio},
        [Parameter(Position = 82, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${SnapRetnMeterHigh},
        [Parameter(Position = 83, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${SnapRetnMeterVeryHigh},
        [Parameter(Position = 84, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${SnapUsagePopulated},
        [Parameter(Position = 85, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SnmpCommunity},
        [Parameter(Position = 86, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${SnmpGetEnabled},
        [Parameter(Position = 87, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${SnmpGetPort},
        [Parameter(Position = 88, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SnmpSysContact},
        [Parameter(Position = 89, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SnmpSysLocation},
        [Parameter(Position = 90, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${SnmpTrapEnabled},
        [Parameter(Position = 91, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SnmpTrapHost},
        [Parameter(Position = 92, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${SnmpTrapPort},
        [Parameter(Position = 93, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${SpaceInfoValid},
        [Parameter(Position = 94, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${SyslogdEnabled},
        [Parameter(Position = 95, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${SyslogdPort},
        [Parameter(Position = 96, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SyslogdServer},
        [Parameter(Position = 97, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${SyslogdServers},
        [Parameter(Position = 98, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${SystemHeadroom},
        [Parameter(Position = 99, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${TdzEnabled},
        [Parameter(Position = 100, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${TdzPrefix},
        [Parameter(Position = 101, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Timezone},
        [Parameter(Position = 102, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${Tlsv1Enabled},
        [Parameter(Position = 103, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${UncompressedSnapUsageBytes},
        [Parameter(Position = 104, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${UncompressedVolUsageBytes},
        [Parameter(Position = 105, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${UniqueNameEnabled},
        [Parameter(Position = 106, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${UnusedReserveBytes},
        [Parameter(Position = 107, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${UpdateArrayNames},
        [Parameter(Position = 108, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${UpdateDownloadEndTime},
        [Parameter(Position = 109, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${UpdateDownloadErrorCode},
        [Parameter(Position = 110, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${UpdateDownloadStartTime},
        [Parameter(Position = 111, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${UpdateDownloading},
        [Parameter(Position = 112, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${UpdateEndTime},
        [Parameter(Position = 113, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${UpdateErrorCode},
        [Parameter(Position = 114, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${UpdateProgressMsg},
        [Parameter(Position = 115, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${UpdateStartTime},
        [Parameter(Position = 116, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${UpdateState},
        [Parameter(Position = 117, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${UsableCacheCapacity},
        [Parameter(Position = 118, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${UsableCapacityBytes},
        [Parameter(Position = 119, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${Usage},
        [Parameter(Position = 120, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${UsageValid},
        [Parameter(Position = 121, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${UserInactivityTimeout},
        [Parameter(Position = 122, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${VersionCurrent},
        [Parameter(Position = 123, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${VersionRollback},
        [Parameter(Position = 124, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${VersionTarget},
        [Parameter(Position = 125, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Decimal]]
        ${VolCompressionRatio},
        [Parameter(Position = 126, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Decimal]]
        ${VolThinProvisioningRatio},
        [Parameter(Position = 127, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${VolumeMigrationStatus},
        [Parameter(Position = 128, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${VssValidationTimeout},
        [Parameter(Position = 129, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${VvolEnabled},
        [Parameter(Position = 130, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${WitnessStatus}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => NimbleStorageSystemDetail' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "access_protocol_list" = ${AccessProtocolList}
            "alarms_enabled" = ${AlarmsEnabled}
            "alert_from_email_addr" = ${AlertFromEmailAddr}
            "alert_min_level" = ${AlertMinLevel}
            "alert_to_email_addrs" = ${AlertToEmailAddrs}
            "allow_support_tunnel" = ${AllowSupportTunnel}
            "array_unassign_migration_status" = ${ArrayUnassignMigrationStatus}
            "arrays" = ${Arrays}
            "associated_links" = ${AssociatedLinks}
            "auto_switchover_enabled" = ${AutoSwitchoverEnabled}
            "auto_switchover_messages" = ${AutoSwitchoverMessages}
            "autoclean_unmanaged_snapshots_enabled" = ${AutocleanUnmanagedSnapshotsEnabled}
            "autoclean_unmanaged_snapshots_ttl_unit" = ${AutocleanUnmanagedSnapshotsTtlUnit}
            "autosupport_enabled" = ${AutosupportEnabled}
            "cc_mode_enabled" = ${CcModeEnabled}
            "clone_ratio" = ${CloneRatio}
            "cloud_management" = ${CloudManagement}
            "compressed_snap_usage_bytes" = ${CompressedSnapUsageBytes}
            "compressed_vol_usage_bytes" = ${CompressedVolUsageBytes}
            "compression_ratio" = ${CompressionRatio}
            "customerId" = ${CustomerId}
            "data_rebalance_status" = ${DataRebalanceStatus}
            "data_reduction_ratio" = ${DataReductionRatio}
            "date" = ${Date}
            "dedupe_ratio" = ${DedupeRatio}
            "default_iscsi_target_scope" = ${DefaultIscsiTargetScope}
            "default_snap_limit_percent" = ${DefaultSnapLimitPercent}
            "default_snap_reserve" = ${DefaultSnapReserve}
            "default_snap_warn_level" = ${DefaultSnapWarnLevel}
            "default_volume_limit" = ${DefaultVolumeLimit}
            "default_volume_reserve" = ${DefaultVolumeReserve}
            "default_volume_warn_level" = ${DefaultVolumeWarnLevel}
            "dns_servers" = ${DnsServers}
            "domain_name" = ${DomainName}
            "encryption_config" = ${EncryptionConfig}
            "failover_mode" = ${FailoverMode}
            "fc_enabled" = ${FcEnabled}
            "free_space" = ${FreeSpace}
            "generation" = ${Generation}
            "group_snapshot_ttl" = ${GroupSnapshotTtl}
            "group_target_enabled" = ${GroupTargetEnabled}
            "group_target_name" = ${GroupTargetName}
            "iscsi_automatic_connection_method" = ${IscsiAutomaticConnectionMethod}
            "iscsi_connection_rebalancing" = ${IscsiConnectionRebalancing}
            "iscsi_enabled" = ${IscsiEnabled}
            "isns_enabled" = ${IsnsEnabled}
            "isns_port" = ${IsnsPort}
            "isns_server" = ${IsnsServer}
            "last_login" = ${LastLogin}
            "leader_array_name" = ${LeaderArrayName}
            "leader_array_serial" = ${LeaderArraySerial}
            "management_service_backup_array_name" = ${ManagementServiceBackupArrayName}
            "management_service_backup_status" = ${ManagementServiceBackupStatus}
            "member_list" = ${MemberList}
            "merge_group_name" = ${MergeGroupName}
            "merge_state" = ${MergeState}
            "ntp_server" = ${NtpServer}
            "num_connections" = ${NumConnections}
            "num_snapcolls" = ${NumSnapcolls}
            "num_snaps" = ${NumSnaps}
            "pending_deletes" = ${PendingDeletes}
            "proxy_port" = ${ProxyPort}
            "proxy_server" = ${ProxyServer}
            "proxy_username" = ${ProxyUsername}
            "raw_cache_capacity" = ${RawCacheCapacity}
            "raw_capacity" = ${RawCapacity}
            "repl_throttle_list" = ${ReplThrottleList}
            "repl_throttled_bandwidth" = ${ReplThrottledBandwidth}
            "repl_throttled_bandwidth_kbps" = ${ReplThrottledBandwidthKbps}
            "resourceUri" = ${ResourceUri}
            "savings" = ${Savings}
            "savings_clone" = ${SavingsClone}
            "savings_compression" = ${SavingsCompression}
            "savings_data_reduction" = ${SavingsDataReduction}
            "savings_dedupe" = ${SavingsDedupe}
            "savings_ratio" = ${SavingsRatio}
            "savings_vol_thin_provisioning" = ${SavingsVolThinProvisioning}
            "scsi_vendor_id" = ${ScsiVendorId}
            "send_alert_to_support" = ${SendAlertToSupport}
            "smtp_port" = ${SmtpPort}
            "smtp_server" = ${SmtpServer}
            "snap_compression_ratio" = ${SnapCompressionRatio}
            "snap_retn_meter_high" = ${SnapRetnMeterHigh}
            "snap_retn_meter_very_high" = ${SnapRetnMeterVeryHigh}
            "snap_usage_populated" = ${SnapUsagePopulated}
            "snmp_community" = ${SnmpCommunity}
            "snmp_get_enabled" = ${SnmpGetEnabled}
            "snmp_get_port" = ${SnmpGetPort}
            "snmp_sys_contact" = ${SnmpSysContact}
            "snmp_sys_location" = ${SnmpSysLocation}
            "snmp_trap_enabled" = ${SnmpTrapEnabled}
            "snmp_trap_host" = ${SnmpTrapHost}
            "snmp_trap_port" = ${SnmpTrapPort}
            "space_info_valid" = ${SpaceInfoValid}
            "syslogd_enabled" = ${SyslogdEnabled}
            "syslogd_port" = ${SyslogdPort}
            "syslogd_server" = ${SyslogdServer}
            "syslogd_servers" = ${SyslogdServers}
            "systemHeadroom" = ${SystemHeadroom}
            "tdz_enabled" = ${TdzEnabled}
            "tdz_prefix" = ${TdzPrefix}
            "timezone" = ${Timezone}
            "tlsv1_enabled" = ${Tlsv1Enabled}
            "uncompressed_snap_usage_bytes" = ${UncompressedSnapUsageBytes}
            "uncompressed_vol_usage_bytes" = ${UncompressedVolUsageBytes}
            "unique_name_enabled" = ${UniqueNameEnabled}
            "unused_reserve_bytes" = ${UnusedReserveBytes}
            "update_array_names" = ${UpdateArrayNames}
            "update_download_end_time" = ${UpdateDownloadEndTime}
            "update_download_error_code" = ${UpdateDownloadErrorCode}
            "update_download_start_time" = ${UpdateDownloadStartTime}
            "update_downloading" = ${UpdateDownloading}
            "update_end_time" = ${UpdateEndTime}
            "update_error_code" = ${UpdateErrorCode}
            "update_progress_msg" = ${UpdateProgressMsg}
            "update_start_time" = ${UpdateStartTime}
            "update_state" = ${UpdateState}
            "usable_cache_capacity" = ${UsableCacheCapacity}
            "usable_capacity_bytes" = ${UsableCapacityBytes}
            "usage" = ${Usage}
            "usage_valid" = ${UsageValid}
            "user_inactivity_timeout" = ${UserInactivityTimeout}
            "version_current" = ${VersionCurrent}
            "version_rollback" = ${VersionRollback}
            "version_target" = ${VersionTarget}
            "vol_compression_ratio" = ${VolCompressionRatio}
            "vol_thin_provisioning_ratio" = ${VolThinProvisioningRatio}
            "volume_migration_status" = ${VolumeMigrationStatus}
            "vss_validation_timeout" = ${VssValidationTimeout}
            "vvol_enabled" = ${VvolEnabled}
            "witness_status" = ${WitnessStatus}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to NimbleStorageSystemDetail<PSCustomObject>

.DESCRIPTION

Convert from JSON to NimbleStorageSystemDetail<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

NimbleStorageSystemDetail<PSCustomObject>
#>
function ConvertFrom-JsonToNimbleStorageSystemDetail {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => NimbleStorageSystemDetail' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in NimbleStorageSystemDetail
        $AllProperties = ("access_protocol_list", "alarms_enabled", "alert_from_email_addr", "alert_min_level", "alert_to_email_addrs", "allow_support_tunnel", "array_unassign_migration_status", "arrays", "associated_links", "auto_switchover_enabled", "auto_switchover_messages", "autoclean_unmanaged_snapshots_enabled", "autoclean_unmanaged_snapshots_ttl_unit", "autosupport_enabled", "cc_mode_enabled", "clone_ratio", "cloud_management", "compressed_snap_usage_bytes", "compressed_vol_usage_bytes", "compression_ratio", "customerId", "data_rebalance_status", "data_reduction_ratio", "date", "dedupe_ratio", "default_iscsi_target_scope", "default_snap_limit_percent", "default_snap_reserve", "default_snap_warn_level", "default_volume_limit", "default_volume_reserve", "default_volume_warn_level", "dns_servers", "domain_name", "encryption_config", "failover_mode", "fc_enabled", "free_space", "generation", "group_snapshot_ttl", "group_target_enabled", "group_target_name", "iscsi_automatic_connection_method", "iscsi_connection_rebalancing", "iscsi_enabled", "isns_enabled", "isns_port", "isns_server", "last_login", "leader_array_name", "leader_array_serial", "management_service_backup_array_name", "management_service_backup_status", "member_list", "merge_group_name", "merge_state", "ntp_server", "num_connections", "num_snapcolls", "num_snaps", "pending_deletes", "proxy_port", "proxy_server", "proxy_username", "raw_cache_capacity", "raw_capacity", "repl_throttle_list", "repl_throttled_bandwidth", "repl_throttled_bandwidth_kbps", "resourceUri", "savings", "savings_clone", "savings_compression", "savings_data_reduction", "savings_dedupe", "savings_ratio", "savings_vol_thin_provisioning", "scsi_vendor_id", "send_alert_to_support", "smtp_port", "smtp_server", "snap_compression_ratio", "snap_retn_meter_high", "snap_retn_meter_very_high", "snap_usage_populated", "snmp_community", "snmp_get_enabled", "snmp_get_port", "snmp_sys_contact", "snmp_sys_location", "snmp_trap_enabled", "snmp_trap_host", "snmp_trap_port", "space_info_valid", "syslogd_enabled", "syslogd_port", "syslogd_server", "syslogd_servers", "systemHeadroom", "tdz_enabled", "tdz_prefix", "timezone", "tlsv1_enabled", "uncompressed_snap_usage_bytes", "uncompressed_vol_usage_bytes", "unique_name_enabled", "unused_reserve_bytes", "update_array_names", "update_download_end_time", "update_download_error_code", "update_download_start_time", "update_downloading", "update_end_time", "update_error_code", "update_progress_msg", "update_start_time", "update_state", "usable_cache_capacity", "usable_capacity_bytes", "usage", "usage_valid", "user_inactivity_timeout", "version_current", "version_rollback", "version_target", "vol_compression_ratio", "vol_thin_provisioning_ratio", "volume_migration_status", "vss_validation_timeout", "vvol_enabled", "witness_status")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "access_protocol_list"))) { #optional property not found
            $AccessProtocolList = $null
        } else {
            $AccessProtocolList = $JsonParameters.PSobject.Properties["access_protocol_list"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "alarms_enabled"))) { #optional property not found
            $AlarmsEnabled = $null
        } else {
            $AlarmsEnabled = $JsonParameters.PSobject.Properties["alarms_enabled"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "alert_from_email_addr"))) { #optional property not found
            $AlertFromEmailAddr = $null
        } else {
            $AlertFromEmailAddr = $JsonParameters.PSobject.Properties["alert_from_email_addr"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "alert_min_level"))) { #optional property not found
            $AlertMinLevel = $null
        } else {
            $AlertMinLevel = $JsonParameters.PSobject.Properties["alert_min_level"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "alert_to_email_addrs"))) { #optional property not found
            $AlertToEmailAddrs = $null
        } else {
            $AlertToEmailAddrs = $JsonParameters.PSobject.Properties["alert_to_email_addrs"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "allow_support_tunnel"))) { #optional property not found
            $AllowSupportTunnel = $null
        } else {
            $AllowSupportTunnel = $JsonParameters.PSobject.Properties["allow_support_tunnel"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "array_unassign_migration_status"))) { #optional property not found
            $ArrayUnassignMigrationStatus = $null
        } else {
            $ArrayUnassignMigrationStatus = $JsonParameters.PSobject.Properties["array_unassign_migration_status"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "arrays"))) { #optional property not found
            $Arrays = $null
        } else {
            $Arrays = $JsonParameters.PSobject.Properties["arrays"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "associated_links"))) { #optional property not found
            $AssociatedLinks = $null
        } else {
            $AssociatedLinks = $JsonParameters.PSobject.Properties["associated_links"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "auto_switchover_enabled"))) { #optional property not found
            $AutoSwitchoverEnabled = $null
        } else {
            $AutoSwitchoverEnabled = $JsonParameters.PSobject.Properties["auto_switchover_enabled"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "auto_switchover_messages"))) { #optional property not found
            $AutoSwitchoverMessages = $null
        } else {
            $AutoSwitchoverMessages = $JsonParameters.PSobject.Properties["auto_switchover_messages"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "autoclean_unmanaged_snapshots_enabled"))) { #optional property not found
            $AutocleanUnmanagedSnapshotsEnabled = $null
        } else {
            $AutocleanUnmanagedSnapshotsEnabled = $JsonParameters.PSobject.Properties["autoclean_unmanaged_snapshots_enabled"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "autoclean_unmanaged_snapshots_ttl_unit"))) { #optional property not found
            $AutocleanUnmanagedSnapshotsTtlUnit = $null
        } else {
            $AutocleanUnmanagedSnapshotsTtlUnit = $JsonParameters.PSobject.Properties["autoclean_unmanaged_snapshots_ttl_unit"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "autosupport_enabled"))) { #optional property not found
            $AutosupportEnabled = $null
        } else {
            $AutosupportEnabled = $JsonParameters.PSobject.Properties["autosupport_enabled"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "cc_mode_enabled"))) { #optional property not found
            $CcModeEnabled = $null
        } else {
            $CcModeEnabled = $JsonParameters.PSobject.Properties["cc_mode_enabled"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "clone_ratio"))) { #optional property not found
            $CloneRatio = $null
        } else {
            $CloneRatio = $JsonParameters.PSobject.Properties["clone_ratio"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "cloud_management"))) { #optional property not found
            $CloudManagement = $null
        } else {
            $CloudManagement = $JsonParameters.PSobject.Properties["cloud_management"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "compressed_snap_usage_bytes"))) { #optional property not found
            $CompressedSnapUsageBytes = $null
        } else {
            $CompressedSnapUsageBytes = $JsonParameters.PSobject.Properties["compressed_snap_usage_bytes"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "compressed_vol_usage_bytes"))) { #optional property not found
            $CompressedVolUsageBytes = $null
        } else {
            $CompressedVolUsageBytes = $JsonParameters.PSobject.Properties["compressed_vol_usage_bytes"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "compression_ratio"))) { #optional property not found
            $CompressionRatio = $null
        } else {
            $CompressionRatio = $JsonParameters.PSobject.Properties["compression_ratio"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "customerId"))) { #optional property not found
            $CustomerId = $null
        } else {
            $CustomerId = $JsonParameters.PSobject.Properties["customerId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "data_rebalance_status"))) { #optional property not found
            $DataRebalanceStatus = $null
        } else {
            $DataRebalanceStatus = $JsonParameters.PSobject.Properties["data_rebalance_status"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "data_reduction_ratio"))) { #optional property not found
            $DataReductionRatio = $null
        } else {
            $DataReductionRatio = $JsonParameters.PSobject.Properties["data_reduction_ratio"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "date"))) { #optional property not found
            $Date = $null
        } else {
            $Date = $JsonParameters.PSobject.Properties["date"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "dedupe_ratio"))) { #optional property not found
            $DedupeRatio = $null
        } else {
            $DedupeRatio = $JsonParameters.PSobject.Properties["dedupe_ratio"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "default_iscsi_target_scope"))) { #optional property not found
            $DefaultIscsiTargetScope = $null
        } else {
            $DefaultIscsiTargetScope = $JsonParameters.PSobject.Properties["default_iscsi_target_scope"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "default_snap_limit_percent"))) { #optional property not found
            $DefaultSnapLimitPercent = $null
        } else {
            $DefaultSnapLimitPercent = $JsonParameters.PSobject.Properties["default_snap_limit_percent"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "default_snap_reserve"))) { #optional property not found
            $DefaultSnapReserve = $null
        } else {
            $DefaultSnapReserve = $JsonParameters.PSobject.Properties["default_snap_reserve"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "default_snap_warn_level"))) { #optional property not found
            $DefaultSnapWarnLevel = $null
        } else {
            $DefaultSnapWarnLevel = $JsonParameters.PSobject.Properties["default_snap_warn_level"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "default_volume_limit"))) { #optional property not found
            $DefaultVolumeLimit = $null
        } else {
            $DefaultVolumeLimit = $JsonParameters.PSobject.Properties["default_volume_limit"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "default_volume_reserve"))) { #optional property not found
            $DefaultVolumeReserve = $null
        } else {
            $DefaultVolumeReserve = $JsonParameters.PSobject.Properties["default_volume_reserve"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "default_volume_warn_level"))) { #optional property not found
            $DefaultVolumeWarnLevel = $null
        } else {
            $DefaultVolumeWarnLevel = $JsonParameters.PSobject.Properties["default_volume_warn_level"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "dns_servers"))) { #optional property not found
            $DnsServers = $null
        } else {
            $DnsServers = $JsonParameters.PSobject.Properties["dns_servers"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "domain_name"))) { #optional property not found
            $DomainName = $null
        } else {
            $DomainName = $JsonParameters.PSobject.Properties["domain_name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "encryption_config"))) { #optional property not found
            $EncryptionConfig = $null
        } else {
            $EncryptionConfig = $JsonParameters.PSobject.Properties["encryption_config"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "failover_mode"))) { #optional property not found
            $FailoverMode = $null
        } else {
            $FailoverMode = $JsonParameters.PSobject.Properties["failover_mode"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "fc_enabled"))) { #optional property not found
            $FcEnabled = $null
        } else {
            $FcEnabled = $JsonParameters.PSobject.Properties["fc_enabled"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "free_space"))) { #optional property not found
            $FreeSpace = $null
        } else {
            $FreeSpace = $JsonParameters.PSobject.Properties["free_space"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "generation"))) { #optional property not found
            $Generation = $null
        } else {
            $Generation = $JsonParameters.PSobject.Properties["generation"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "group_snapshot_ttl"))) { #optional property not found
            $GroupSnapshotTtl = $null
        } else {
            $GroupSnapshotTtl = $JsonParameters.PSobject.Properties["group_snapshot_ttl"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "group_target_enabled"))) { #optional property not found
            $GroupTargetEnabled = $null
        } else {
            $GroupTargetEnabled = $JsonParameters.PSobject.Properties["group_target_enabled"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "group_target_name"))) { #optional property not found
            $GroupTargetName = $null
        } else {
            $GroupTargetName = $JsonParameters.PSobject.Properties["group_target_name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "iscsi_automatic_connection_method"))) { #optional property not found
            $IscsiAutomaticConnectionMethod = $null
        } else {
            $IscsiAutomaticConnectionMethod = $JsonParameters.PSobject.Properties["iscsi_automatic_connection_method"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "iscsi_connection_rebalancing"))) { #optional property not found
            $IscsiConnectionRebalancing = $null
        } else {
            $IscsiConnectionRebalancing = $JsonParameters.PSobject.Properties["iscsi_connection_rebalancing"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "iscsi_enabled"))) { #optional property not found
            $IscsiEnabled = $null
        } else {
            $IscsiEnabled = $JsonParameters.PSobject.Properties["iscsi_enabled"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "isns_enabled"))) { #optional property not found
            $IsnsEnabled = $null
        } else {
            $IsnsEnabled = $JsonParameters.PSobject.Properties["isns_enabled"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "isns_port"))) { #optional property not found
            $IsnsPort = $null
        } else {
            $IsnsPort = $JsonParameters.PSobject.Properties["isns_port"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "isns_server"))) { #optional property not found
            $IsnsServer = $null
        } else {
            $IsnsServer = $JsonParameters.PSobject.Properties["isns_server"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "last_login"))) { #optional property not found
            $LastLogin = $null
        } else {
            $LastLogin = $JsonParameters.PSobject.Properties["last_login"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "leader_array_name"))) { #optional property not found
            $LeaderArrayName = $null
        } else {
            $LeaderArrayName = $JsonParameters.PSobject.Properties["leader_array_name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "leader_array_serial"))) { #optional property not found
            $LeaderArraySerial = $null
        } else {
            $LeaderArraySerial = $JsonParameters.PSobject.Properties["leader_array_serial"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "management_service_backup_array_name"))) { #optional property not found
            $ManagementServiceBackupArrayName = $null
        } else {
            $ManagementServiceBackupArrayName = $JsonParameters.PSobject.Properties["management_service_backup_array_name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "management_service_backup_status"))) { #optional property not found
            $ManagementServiceBackupStatus = $null
        } else {
            $ManagementServiceBackupStatus = $JsonParameters.PSobject.Properties["management_service_backup_status"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "member_list"))) { #optional property not found
            $MemberList = $null
        } else {
            $MemberList = $JsonParameters.PSobject.Properties["member_list"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "merge_group_name"))) { #optional property not found
            $MergeGroupName = $null
        } else {
            $MergeGroupName = $JsonParameters.PSobject.Properties["merge_group_name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "merge_state"))) { #optional property not found
            $MergeState = $null
        } else {
            $MergeState = $JsonParameters.PSobject.Properties["merge_state"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ntp_server"))) { #optional property not found
            $NtpServer = $null
        } else {
            $NtpServer = $JsonParameters.PSobject.Properties["ntp_server"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "num_connections"))) { #optional property not found
            $NumConnections = $null
        } else {
            $NumConnections = $JsonParameters.PSobject.Properties["num_connections"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "num_snapcolls"))) { #optional property not found
            $NumSnapcolls = $null
        } else {
            $NumSnapcolls = $JsonParameters.PSobject.Properties["num_snapcolls"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "num_snaps"))) { #optional property not found
            $NumSnaps = $null
        } else {
            $NumSnaps = $JsonParameters.PSobject.Properties["num_snaps"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "pending_deletes"))) { #optional property not found
            $PendingDeletes = $null
        } else {
            $PendingDeletes = $JsonParameters.PSobject.Properties["pending_deletes"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "proxy_port"))) { #optional property not found
            $ProxyPort = $null
        } else {
            $ProxyPort = $JsonParameters.PSobject.Properties["proxy_port"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "proxy_server"))) { #optional property not found
            $ProxyServer = $null
        } else {
            $ProxyServer = $JsonParameters.PSobject.Properties["proxy_server"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "proxy_username"))) { #optional property not found
            $ProxyUsername = $null
        } else {
            $ProxyUsername = $JsonParameters.PSobject.Properties["proxy_username"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "raw_cache_capacity"))) { #optional property not found
            $RawCacheCapacity = $null
        } else {
            $RawCacheCapacity = $JsonParameters.PSobject.Properties["raw_cache_capacity"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "raw_capacity"))) { #optional property not found
            $RawCapacity = $null
        } else {
            $RawCapacity = $JsonParameters.PSobject.Properties["raw_capacity"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "repl_throttle_list"))) { #optional property not found
            $ReplThrottleList = $null
        } else {
            $ReplThrottleList = $JsonParameters.PSobject.Properties["repl_throttle_list"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "repl_throttled_bandwidth"))) { #optional property not found
            $ReplThrottledBandwidth = $null
        } else {
            $ReplThrottledBandwidth = $JsonParameters.PSobject.Properties["repl_throttled_bandwidth"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "repl_throttled_bandwidth_kbps"))) { #optional property not found
            $ReplThrottledBandwidthKbps = $null
        } else {
            $ReplThrottledBandwidthKbps = $JsonParameters.PSobject.Properties["repl_throttled_bandwidth_kbps"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "resourceUri"))) { #optional property not found
            $ResourceUri = $null
        } else {
            $ResourceUri = $JsonParameters.PSobject.Properties["resourceUri"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "savings"))) { #optional property not found
            $Savings = $null
        } else {
            $Savings = $JsonParameters.PSobject.Properties["savings"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "savings_clone"))) { #optional property not found
            $SavingsClone = $null
        } else {
            $SavingsClone = $JsonParameters.PSobject.Properties["savings_clone"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "savings_compression"))) { #optional property not found
            $SavingsCompression = $null
        } else {
            $SavingsCompression = $JsonParameters.PSobject.Properties["savings_compression"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "savings_data_reduction"))) { #optional property not found
            $SavingsDataReduction = $null
        } else {
            $SavingsDataReduction = $JsonParameters.PSobject.Properties["savings_data_reduction"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "savings_dedupe"))) { #optional property not found
            $SavingsDedupe = $null
        } else {
            $SavingsDedupe = $JsonParameters.PSobject.Properties["savings_dedupe"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "savings_ratio"))) { #optional property not found
            $SavingsRatio = $null
        } else {
            $SavingsRatio = $JsonParameters.PSobject.Properties["savings_ratio"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "savings_vol_thin_provisioning"))) { #optional property not found
            $SavingsVolThinProvisioning = $null
        } else {
            $SavingsVolThinProvisioning = $JsonParameters.PSobject.Properties["savings_vol_thin_provisioning"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "scsi_vendor_id"))) { #optional property not found
            $ScsiVendorId = $null
        } else {
            $ScsiVendorId = $JsonParameters.PSobject.Properties["scsi_vendor_id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "send_alert_to_support"))) { #optional property not found
            $SendAlertToSupport = $null
        } else {
            $SendAlertToSupport = $JsonParameters.PSobject.Properties["send_alert_to_support"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "smtp_port"))) { #optional property not found
            $SmtpPort = $null
        } else {
            $SmtpPort = $JsonParameters.PSobject.Properties["smtp_port"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "smtp_server"))) { #optional property not found
            $SmtpServer = $null
        } else {
            $SmtpServer = $JsonParameters.PSobject.Properties["smtp_server"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "snap_compression_ratio"))) { #optional property not found
            $SnapCompressionRatio = $null
        } else {
            $SnapCompressionRatio = $JsonParameters.PSobject.Properties["snap_compression_ratio"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "snap_retn_meter_high"))) { #optional property not found
            $SnapRetnMeterHigh = $null
        } else {
            $SnapRetnMeterHigh = $JsonParameters.PSobject.Properties["snap_retn_meter_high"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "snap_retn_meter_very_high"))) { #optional property not found
            $SnapRetnMeterVeryHigh = $null
        } else {
            $SnapRetnMeterVeryHigh = $JsonParameters.PSobject.Properties["snap_retn_meter_very_high"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "snap_usage_populated"))) { #optional property not found
            $SnapUsagePopulated = $null
        } else {
            $SnapUsagePopulated = $JsonParameters.PSobject.Properties["snap_usage_populated"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "snmp_community"))) { #optional property not found
            $SnmpCommunity = $null
        } else {
            $SnmpCommunity = $JsonParameters.PSobject.Properties["snmp_community"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "snmp_get_enabled"))) { #optional property not found
            $SnmpGetEnabled = $null
        } else {
            $SnmpGetEnabled = $JsonParameters.PSobject.Properties["snmp_get_enabled"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "snmp_get_port"))) { #optional property not found
            $SnmpGetPort = $null
        } else {
            $SnmpGetPort = $JsonParameters.PSobject.Properties["snmp_get_port"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "snmp_sys_contact"))) { #optional property not found
            $SnmpSysContact = $null
        } else {
            $SnmpSysContact = $JsonParameters.PSobject.Properties["snmp_sys_contact"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "snmp_sys_location"))) { #optional property not found
            $SnmpSysLocation = $null
        } else {
            $SnmpSysLocation = $JsonParameters.PSobject.Properties["snmp_sys_location"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "snmp_trap_enabled"))) { #optional property not found
            $SnmpTrapEnabled = $null
        } else {
            $SnmpTrapEnabled = $JsonParameters.PSobject.Properties["snmp_trap_enabled"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "snmp_trap_host"))) { #optional property not found
            $SnmpTrapHost = $null
        } else {
            $SnmpTrapHost = $JsonParameters.PSobject.Properties["snmp_trap_host"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "snmp_trap_port"))) { #optional property not found
            $SnmpTrapPort = $null
        } else {
            $SnmpTrapPort = $JsonParameters.PSobject.Properties["snmp_trap_port"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "space_info_valid"))) { #optional property not found
            $SpaceInfoValid = $null
        } else {
            $SpaceInfoValid = $JsonParameters.PSobject.Properties["space_info_valid"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "syslogd_enabled"))) { #optional property not found
            $SyslogdEnabled = $null
        } else {
            $SyslogdEnabled = $JsonParameters.PSobject.Properties["syslogd_enabled"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "syslogd_port"))) { #optional property not found
            $SyslogdPort = $null
        } else {
            $SyslogdPort = $JsonParameters.PSobject.Properties["syslogd_port"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "syslogd_server"))) { #optional property not found
            $SyslogdServer = $null
        } else {
            $SyslogdServer = $JsonParameters.PSobject.Properties["syslogd_server"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "syslogd_servers"))) { #optional property not found
            $SyslogdServers = $null
        } else {
            $SyslogdServers = $JsonParameters.PSobject.Properties["syslogd_servers"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "systemHeadroom"))) { #optional property not found
            $SystemHeadroom = $null
        } else {
            $SystemHeadroom = $JsonParameters.PSobject.Properties["systemHeadroom"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "tdz_enabled"))) { #optional property not found
            $TdzEnabled = $null
        } else {
            $TdzEnabled = $JsonParameters.PSobject.Properties["tdz_enabled"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "tdz_prefix"))) { #optional property not found
            $TdzPrefix = $null
        } else {
            $TdzPrefix = $JsonParameters.PSobject.Properties["tdz_prefix"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "timezone"))) { #optional property not found
            $Timezone = $null
        } else {
            $Timezone = $JsonParameters.PSobject.Properties["timezone"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "tlsv1_enabled"))) { #optional property not found
            $Tlsv1Enabled = $null
        } else {
            $Tlsv1Enabled = $JsonParameters.PSobject.Properties["tlsv1_enabled"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "uncompressed_snap_usage_bytes"))) { #optional property not found
            $UncompressedSnapUsageBytes = $null
        } else {
            $UncompressedSnapUsageBytes = $JsonParameters.PSobject.Properties["uncompressed_snap_usage_bytes"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "uncompressed_vol_usage_bytes"))) { #optional property not found
            $UncompressedVolUsageBytes = $null
        } else {
            $UncompressedVolUsageBytes = $JsonParameters.PSobject.Properties["uncompressed_vol_usage_bytes"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "unique_name_enabled"))) { #optional property not found
            $UniqueNameEnabled = $null
        } else {
            $UniqueNameEnabled = $JsonParameters.PSobject.Properties["unique_name_enabled"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "unused_reserve_bytes"))) { #optional property not found
            $UnusedReserveBytes = $null
        } else {
            $UnusedReserveBytes = $JsonParameters.PSobject.Properties["unused_reserve_bytes"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "update_array_names"))) { #optional property not found
            $UpdateArrayNames = $null
        } else {
            $UpdateArrayNames = $JsonParameters.PSobject.Properties["update_array_names"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "update_download_end_time"))) { #optional property not found
            $UpdateDownloadEndTime = $null
        } else {
            $UpdateDownloadEndTime = $JsonParameters.PSobject.Properties["update_download_end_time"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "update_download_error_code"))) { #optional property not found
            $UpdateDownloadErrorCode = $null
        } else {
            $UpdateDownloadErrorCode = $JsonParameters.PSobject.Properties["update_download_error_code"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "update_download_start_time"))) { #optional property not found
            $UpdateDownloadStartTime = $null
        } else {
            $UpdateDownloadStartTime = $JsonParameters.PSobject.Properties["update_download_start_time"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "update_downloading"))) { #optional property not found
            $UpdateDownloading = $null
        } else {
            $UpdateDownloading = $JsonParameters.PSobject.Properties["update_downloading"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "update_end_time"))) { #optional property not found
            $UpdateEndTime = $null
        } else {
            $UpdateEndTime = $JsonParameters.PSobject.Properties["update_end_time"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "update_error_code"))) { #optional property not found
            $UpdateErrorCode = $null
        } else {
            $UpdateErrorCode = $JsonParameters.PSobject.Properties["update_error_code"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "update_progress_msg"))) { #optional property not found
            $UpdateProgressMsg = $null
        } else {
            $UpdateProgressMsg = $JsonParameters.PSobject.Properties["update_progress_msg"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "update_start_time"))) { #optional property not found
            $UpdateStartTime = $null
        } else {
            $UpdateStartTime = $JsonParameters.PSobject.Properties["update_start_time"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "update_state"))) { #optional property not found
            $UpdateState = $null
        } else {
            $UpdateState = $JsonParameters.PSobject.Properties["update_state"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "usable_cache_capacity"))) { #optional property not found
            $UsableCacheCapacity = $null
        } else {
            $UsableCacheCapacity = $JsonParameters.PSobject.Properties["usable_cache_capacity"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "usable_capacity_bytes"))) { #optional property not found
            $UsableCapacityBytes = $null
        } else {
            $UsableCapacityBytes = $JsonParameters.PSobject.Properties["usable_capacity_bytes"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "usage"))) { #optional property not found
            $Usage = $null
        } else {
            $Usage = $JsonParameters.PSobject.Properties["usage"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "usage_valid"))) { #optional property not found
            $UsageValid = $null
        } else {
            $UsageValid = $JsonParameters.PSobject.Properties["usage_valid"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "user_inactivity_timeout"))) { #optional property not found
            $UserInactivityTimeout = $null
        } else {
            $UserInactivityTimeout = $JsonParameters.PSobject.Properties["user_inactivity_timeout"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "version_current"))) { #optional property not found
            $VersionCurrent = $null
        } else {
            $VersionCurrent = $JsonParameters.PSobject.Properties["version_current"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "version_rollback"))) { #optional property not found
            $VersionRollback = $null
        } else {
            $VersionRollback = $JsonParameters.PSobject.Properties["version_rollback"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "version_target"))) { #optional property not found
            $VersionTarget = $null
        } else {
            $VersionTarget = $JsonParameters.PSobject.Properties["version_target"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "vol_compression_ratio"))) { #optional property not found
            $VolCompressionRatio = $null
        } else {
            $VolCompressionRatio = $JsonParameters.PSobject.Properties["vol_compression_ratio"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "vol_thin_provisioning_ratio"))) { #optional property not found
            $VolThinProvisioningRatio = $null
        } else {
            $VolThinProvisioningRatio = $JsonParameters.PSobject.Properties["vol_thin_provisioning_ratio"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "volume_migration_status"))) { #optional property not found
            $VolumeMigrationStatus = $null
        } else {
            $VolumeMigrationStatus = $JsonParameters.PSobject.Properties["volume_migration_status"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "vss_validation_timeout"))) { #optional property not found
            $VssValidationTimeout = $null
        } else {
            $VssValidationTimeout = $JsonParameters.PSobject.Properties["vss_validation_timeout"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "vvol_enabled"))) { #optional property not found
            $VvolEnabled = $null
        } else {
            $VvolEnabled = $JsonParameters.PSobject.Properties["vvol_enabled"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "witness_status"))) { #optional property not found
            $WitnessStatus = $null
        } else {
            $WitnessStatus = $JsonParameters.PSobject.Properties["witness_status"].value
        }

        $PSO = [PSCustomObject]@{
            "access_protocol_list" = ${AccessProtocolList}
            "alarms_enabled" = ${AlarmsEnabled}
            "alert_from_email_addr" = ${AlertFromEmailAddr}
            "alert_min_level" = ${AlertMinLevel}
            "alert_to_email_addrs" = ${AlertToEmailAddrs}
            "allow_support_tunnel" = ${AllowSupportTunnel}
            "array_unassign_migration_status" = ${ArrayUnassignMigrationStatus}
            "arrays" = ${Arrays}
            "associated_links" = ${AssociatedLinks}
            "auto_switchover_enabled" = ${AutoSwitchoverEnabled}
            "auto_switchover_messages" = ${AutoSwitchoverMessages}
            "autoclean_unmanaged_snapshots_enabled" = ${AutocleanUnmanagedSnapshotsEnabled}
            "autoclean_unmanaged_snapshots_ttl_unit" = ${AutocleanUnmanagedSnapshotsTtlUnit}
            "autosupport_enabled" = ${AutosupportEnabled}
            "cc_mode_enabled" = ${CcModeEnabled}
            "clone_ratio" = ${CloneRatio}
            "cloud_management" = ${CloudManagement}
            "compressed_snap_usage_bytes" = ${CompressedSnapUsageBytes}
            "compressed_vol_usage_bytes" = ${CompressedVolUsageBytes}
            "compression_ratio" = ${CompressionRatio}
            "customerId" = ${CustomerId}
            "data_rebalance_status" = ${DataRebalanceStatus}
            "data_reduction_ratio" = ${DataReductionRatio}
            "date" = ${Date}
            "dedupe_ratio" = ${DedupeRatio}
            "default_iscsi_target_scope" = ${DefaultIscsiTargetScope}
            "default_snap_limit_percent" = ${DefaultSnapLimitPercent}
            "default_snap_reserve" = ${DefaultSnapReserve}
            "default_snap_warn_level" = ${DefaultSnapWarnLevel}
            "default_volume_limit" = ${DefaultVolumeLimit}
            "default_volume_reserve" = ${DefaultVolumeReserve}
            "default_volume_warn_level" = ${DefaultVolumeWarnLevel}
            "dns_servers" = ${DnsServers}
            "domain_name" = ${DomainName}
            "encryption_config" = ${EncryptionConfig}
            "failover_mode" = ${FailoverMode}
            "fc_enabled" = ${FcEnabled}
            "free_space" = ${FreeSpace}
            "generation" = ${Generation}
            "group_snapshot_ttl" = ${GroupSnapshotTtl}
            "group_target_enabled" = ${GroupTargetEnabled}
            "group_target_name" = ${GroupTargetName}
            "iscsi_automatic_connection_method" = ${IscsiAutomaticConnectionMethod}
            "iscsi_connection_rebalancing" = ${IscsiConnectionRebalancing}
            "iscsi_enabled" = ${IscsiEnabled}
            "isns_enabled" = ${IsnsEnabled}
            "isns_port" = ${IsnsPort}
            "isns_server" = ${IsnsServer}
            "last_login" = ${LastLogin}
            "leader_array_name" = ${LeaderArrayName}
            "leader_array_serial" = ${LeaderArraySerial}
            "management_service_backup_array_name" = ${ManagementServiceBackupArrayName}
            "management_service_backup_status" = ${ManagementServiceBackupStatus}
            "member_list" = ${MemberList}
            "merge_group_name" = ${MergeGroupName}
            "merge_state" = ${MergeState}
            "ntp_server" = ${NtpServer}
            "num_connections" = ${NumConnections}
            "num_snapcolls" = ${NumSnapcolls}
            "num_snaps" = ${NumSnaps}
            "pending_deletes" = ${PendingDeletes}
            "proxy_port" = ${ProxyPort}
            "proxy_server" = ${ProxyServer}
            "proxy_username" = ${ProxyUsername}
            "raw_cache_capacity" = ${RawCacheCapacity}
            "raw_capacity" = ${RawCapacity}
            "repl_throttle_list" = ${ReplThrottleList}
            "repl_throttled_bandwidth" = ${ReplThrottledBandwidth}
            "repl_throttled_bandwidth_kbps" = ${ReplThrottledBandwidthKbps}
            "resourceUri" = ${ResourceUri}
            "savings" = ${Savings}
            "savings_clone" = ${SavingsClone}
            "savings_compression" = ${SavingsCompression}
            "savings_data_reduction" = ${SavingsDataReduction}
            "savings_dedupe" = ${SavingsDedupe}
            "savings_ratio" = ${SavingsRatio}
            "savings_vol_thin_provisioning" = ${SavingsVolThinProvisioning}
            "scsi_vendor_id" = ${ScsiVendorId}
            "send_alert_to_support" = ${SendAlertToSupport}
            "smtp_port" = ${SmtpPort}
            "smtp_server" = ${SmtpServer}
            "snap_compression_ratio" = ${SnapCompressionRatio}
            "snap_retn_meter_high" = ${SnapRetnMeterHigh}
            "snap_retn_meter_very_high" = ${SnapRetnMeterVeryHigh}
            "snap_usage_populated" = ${SnapUsagePopulated}
            "snmp_community" = ${SnmpCommunity}
            "snmp_get_enabled" = ${SnmpGetEnabled}
            "snmp_get_port" = ${SnmpGetPort}
            "snmp_sys_contact" = ${SnmpSysContact}
            "snmp_sys_location" = ${SnmpSysLocation}
            "snmp_trap_enabled" = ${SnmpTrapEnabled}
            "snmp_trap_host" = ${SnmpTrapHost}
            "snmp_trap_port" = ${SnmpTrapPort}
            "space_info_valid" = ${SpaceInfoValid}
            "syslogd_enabled" = ${SyslogdEnabled}
            "syslogd_port" = ${SyslogdPort}
            "syslogd_server" = ${SyslogdServer}
            "syslogd_servers" = ${SyslogdServers}
            "systemHeadroom" = ${SystemHeadroom}
            "tdz_enabled" = ${TdzEnabled}
            "tdz_prefix" = ${TdzPrefix}
            "timezone" = ${Timezone}
            "tlsv1_enabled" = ${Tlsv1Enabled}
            "uncompressed_snap_usage_bytes" = ${UncompressedSnapUsageBytes}
            "uncompressed_vol_usage_bytes" = ${UncompressedVolUsageBytes}
            "unique_name_enabled" = ${UniqueNameEnabled}
            "unused_reserve_bytes" = ${UnusedReserveBytes}
            "update_array_names" = ${UpdateArrayNames}
            "update_download_end_time" = ${UpdateDownloadEndTime}
            "update_download_error_code" = ${UpdateDownloadErrorCode}
            "update_download_start_time" = ${UpdateDownloadStartTime}
            "update_downloading" = ${UpdateDownloading}
            "update_end_time" = ${UpdateEndTime}
            "update_error_code" = ${UpdateErrorCode}
            "update_progress_msg" = ${UpdateProgressMsg}
            "update_start_time" = ${UpdateStartTime}
            "update_state" = ${UpdateState}
            "usable_cache_capacity" = ${UsableCacheCapacity}
            "usable_capacity_bytes" = ${UsableCapacityBytes}
            "usage" = ${Usage}
            "usage_valid" = ${UsageValid}
            "user_inactivity_timeout" = ${UserInactivityTimeout}
            "version_current" = ${VersionCurrent}
            "version_rollback" = ${VersionRollback}
            "version_target" = ${VersionTarget}
            "vol_compression_ratio" = ${VolCompressionRatio}
            "vol_thin_provisioning_ratio" = ${VolThinProvisioningRatio}
            "volume_migration_status" = ${VolumeMigrationStatus}
            "vss_validation_timeout" = ${VssValidationTimeout}
            "vvol_enabled" = ${VvolEnabled}
            "witness_status" = ${WitnessStatus}
        }

        return $PSO
    }

}

