#
# Data Services Cloud Console API
# Data Services Cloud Console API
# Version: 1.3.0
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER AppSetBusinessUnit
Appset BusinessUnit
.PARAMETER AppSetComments
Application set comments
.PARAMETER AppSetExcludeAIQoS
Exclusion from AI QoS
.PARAMETER AppSetId
ID
.PARAMETER AppSetImportance
Importance Level
.PARAMETER AppSetName
Application set name
.PARAMETER AppSetType
Type of the application set
.PARAMETER AppSetTypeEnum
Enum value of type of the application set
.PARAMETER AssociatedLinks
Associated Links Details
.PARAMETER Comment
Comments if any
.PARAMETER ConsoleUri
consoleUri for detailed storage object
.PARAMETER CustomerId
customerId
.PARAMETER DisplayName
Display Name
.PARAMETER Domain
Domain name
.PARAMETER ExportStatus
Export status
.PARAMETER Generation
generation
.PARAMETER Id
uid of the applicationset
.PARAMETER Initiators
Initiator details
.PARAMETER IsFailoverAllowed
Shows if failover is allowed or not
.PARAMETER IsOverrideAllowed
Shows if Override is allowed or not
.PARAMETER IsPrimary
States if the Application set is Primary or not
.PARAMETER IsSyncAllowed
Shows if sync is allowed or not
.PARAMETER KvPairsPresent
Represents KV pairs present or not
.PARAMETER Members
Volume Names
.PARAMETER Name
Name of the application set
.PARAMETER NonZeroRtoConfig
Non-Zero RTO configuration. Supported config is Active-Sync
.PARAMETER RemoteRecoveryPoint
No description available.
.PARAMETER ReplicationPartner
Shows the Replication Partner Systems and Replication Partners
.PARAMETER ReplicationState
Shows whether data replication is in started or stopped state
.PARAMETER ReplicationTraffic
Shows the direction of flow of data
.PARAMETER ReplicationType
Mode of replication. Can be sync or periodic
.PARAMETER RequestUri
RequestUri for applicationsets resources
.PARAMETER SerialNumber
Serial number.
.PARAMETER SizeMiB
Size in MB of appset
.PARAMETER SnapSetParentId
ParentId of the snapSet
.PARAMETER SnapSetParentName
Parent name of the snapSet
.PARAMETER SystemId
SystemUid/serialNumber of the array.
.PARAMETER Type
type
.PARAMETER VvSetType
Type of the volume-set
.PARAMETER ZeroRtoConfig
Zero RTO configuration. Supported configs are Active Peer Persistence and Peer Persistence
.OUTPUTS

PrimeraApplicationSetDetails<PSCustomObject>
#>

function Initialize-PrimeraApplicationSetDetails {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${AppSetBusinessUnit},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${AppSetComments},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${AppSetExcludeAIQoS},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${AppSetId},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${AppSetImportance},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${AppSetName},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${AppSetType},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${AppSetTypeEnum},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${AssociatedLinks},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Comment},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ConsoleUri},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${CustomerId},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${DisplayName},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Domain},
        [Parameter(Position = 14, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ExportStatus},
        [Parameter(Position = 15, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Generation},
        [Parameter(Position = 16, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Id},
        [Parameter(Position = 17, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Initiators},
        [Parameter(Position = 18, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${IsFailoverAllowed},
        [Parameter(Position = 19, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${IsOverrideAllowed},
        [Parameter(Position = 20, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${IsPrimary},
        [Parameter(Position = 21, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${IsSyncAllowed},
        [Parameter(Position = 22, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${KvPairsPresent},
        [Parameter(Position = 23, ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${Members},
        [Parameter(Position = 24, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 25, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${NonZeroRtoConfig},
        [Parameter(Position = 26, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${RemoteRecoveryPoint},
        [Parameter(Position = 27, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${ReplicationPartner},
        [Parameter(Position = 28, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ReplicationState},
        [Parameter(Position = 29, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ReplicationTraffic},
        [Parameter(Position = 30, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ReplicationType},
        [Parameter(Position = 31, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${RequestUri},
        [Parameter(Position = 32, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SerialNumber},
        [Parameter(Position = 33, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Decimal]]
        ${SizeMiB},
        [Parameter(Position = 34, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${SnapSetParentId},
        [Parameter(Position = 35, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SnapSetParentName},
        [Parameter(Position = 36, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SystemId},
        [Parameter(Position = 37, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Type},
        [Parameter(Position = 38, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${VvSetType},
        [Parameter(Position = 39, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ZeroRtoConfig}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => PrimeraApplicationSetDetails' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if (!$AppSetName -and $AppSetName.length -gt 255) {
            throw "invalid value for 'AppSetName', the character length must be smaller than or equal to 255."
        }

        if (!$DisplayName -and $DisplayName.length -gt 255) {
            throw "invalid value for 'DisplayName', the character length must be smaller than or equal to 255."
        }

        if (!$Domain -and $Domain.length -gt 255) {
            throw "invalid value for 'Domain', the character length must be smaller than or equal to 255."
        }

        if (!$Name -and $Name.length -gt 255) {
            throw "invalid value for 'Name', the character length must be smaller than or equal to 255."
        }

        if (!$SnapSetParentName -and $SnapSetParentName.length -gt 255) {
            throw "invalid value for 'SnapSetParentName', the character length must be smaller than or equal to 255."
        }

        if (!$VvSetType -and $VvSetType.length -gt 255) {
            throw "invalid value for 'VvSetType', the character length must be smaller than or equal to 255."
        }


        $PSO = [PSCustomObject]@{
            "appSetBusinessUnit" = ${AppSetBusinessUnit}
            "appSetComments" = ${AppSetComments}
            "appSetExcludeAIQoS" = ${AppSetExcludeAIQoS}
            "appSetId" = ${AppSetId}
            "appSetImportance" = ${AppSetImportance}
            "appSetName" = ${AppSetName}
            "appSetType" = ${AppSetType}
            "appSetTypeEnum" = ${AppSetTypeEnum}
            "associatedLinks" = ${AssociatedLinks}
            "comment" = ${Comment}
            "consoleUri" = ${ConsoleUri}
            "customerId" = ${CustomerId}
            "displayName" = ${DisplayName}
            "domain" = ${Domain}
            "exportStatus" = ${ExportStatus}
            "generation" = ${Generation}
            "id" = ${Id}
            "initiators" = ${Initiators}
            "isFailoverAllowed" = ${IsFailoverAllowed}
            "isOverrideAllowed" = ${IsOverrideAllowed}
            "isPrimary" = ${IsPrimary}
            "isSyncAllowed" = ${IsSyncAllowed}
            "kvPairsPresent" = ${KvPairsPresent}
            "members" = ${Members}
            "name" = ${Name}
            "nonZeroRtoConfig" = ${NonZeroRtoConfig}
            "remoteRecoveryPoint" = ${RemoteRecoveryPoint}
            "replicationPartner" = ${ReplicationPartner}
            "replicationState" = ${ReplicationState}
            "replicationTraffic" = ${ReplicationTraffic}
            "replicationType" = ${ReplicationType}
            "requestUri" = ${RequestUri}
            "serialNumber" = ${SerialNumber}
            "sizeMiB" = ${SizeMiB}
            "snapSetParentId" = ${SnapSetParentId}
            "snapSetParentName" = ${SnapSetParentName}
            "systemId" = ${SystemId}
            "type" = ${Type}
            "vvSetType" = ${VvSetType}
            "zeroRtoConfig" = ${ZeroRtoConfig}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to PrimeraApplicationSetDetails<PSCustomObject>

.DESCRIPTION

Convert from JSON to PrimeraApplicationSetDetails<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

PrimeraApplicationSetDetails<PSCustomObject>
#>
function ConvertFrom-JsonToPrimeraApplicationSetDetails {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => PrimeraApplicationSetDetails' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in PrimeraApplicationSetDetails
        $AllProperties = ("appSetBusinessUnit", "appSetComments", "appSetExcludeAIQoS", "appSetId", "appSetImportance", "appSetName", "appSetType", "appSetTypeEnum", "associatedLinks", "comment", "consoleUri", "customerId", "displayName", "domain", "exportStatus", "generation", "id", "initiators", "isFailoverAllowed", "isOverrideAllowed", "isPrimary", "isSyncAllowed", "kvPairsPresent", "members", "name", "nonZeroRtoConfig", "remoteRecoveryPoint", "replicationPartner", "replicationState", "replicationTraffic", "replicationType", "requestUri", "serialNumber", "sizeMiB", "snapSetParentId", "snapSetParentName", "systemId", "type", "vvSetType", "zeroRtoConfig")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "appSetBusinessUnit"))) { #optional property not found
            $AppSetBusinessUnit = $null
        } else {
            $AppSetBusinessUnit = $JsonParameters.PSobject.Properties["appSetBusinessUnit"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "appSetComments"))) { #optional property not found
            $AppSetComments = $null
        } else {
            $AppSetComments = $JsonParameters.PSobject.Properties["appSetComments"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "appSetExcludeAIQoS"))) { #optional property not found
            $AppSetExcludeAIQoS = $null
        } else {
            $AppSetExcludeAIQoS = $JsonParameters.PSobject.Properties["appSetExcludeAIQoS"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "appSetId"))) { #optional property not found
            $AppSetId = $null
        } else {
            $AppSetId = $JsonParameters.PSobject.Properties["appSetId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "appSetImportance"))) { #optional property not found
            $AppSetImportance = $null
        } else {
            $AppSetImportance = $JsonParameters.PSobject.Properties["appSetImportance"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "appSetName"))) { #optional property not found
            $AppSetName = $null
        } else {
            $AppSetName = $JsonParameters.PSobject.Properties["appSetName"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "appSetType"))) { #optional property not found
            $AppSetType = $null
        } else {
            $AppSetType = $JsonParameters.PSobject.Properties["appSetType"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "appSetTypeEnum"))) { #optional property not found
            $AppSetTypeEnum = $null
        } else {
            $AppSetTypeEnum = $JsonParameters.PSobject.Properties["appSetTypeEnum"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "associatedLinks"))) { #optional property not found
            $AssociatedLinks = $null
        } else {
            $AssociatedLinks = $JsonParameters.PSobject.Properties["associatedLinks"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "comment"))) { #optional property not found
            $Comment = $null
        } else {
            $Comment = $JsonParameters.PSobject.Properties["comment"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "consoleUri"))) { #optional property not found
            $ConsoleUri = $null
        } else {
            $ConsoleUri = $JsonParameters.PSobject.Properties["consoleUri"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "customerId"))) { #optional property not found
            $CustomerId = $null
        } else {
            $CustomerId = $JsonParameters.PSobject.Properties["customerId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "displayName"))) { #optional property not found
            $DisplayName = $null
        } else {
            $DisplayName = $JsonParameters.PSobject.Properties["displayName"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "domain"))) { #optional property not found
            $Domain = $null
        } else {
            $Domain = $JsonParameters.PSobject.Properties["domain"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "exportStatus"))) { #optional property not found
            $ExportStatus = $null
        } else {
            $ExportStatus = $JsonParameters.PSobject.Properties["exportStatus"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "generation"))) { #optional property not found
            $Generation = $null
        } else {
            $Generation = $JsonParameters.PSobject.Properties["generation"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) { #optional property not found
            $Id = $null
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "initiators"))) { #optional property not found
            $Initiators = $null
        } else {
            $Initiators = $JsonParameters.PSobject.Properties["initiators"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "isFailoverAllowed"))) { #optional property not found
            $IsFailoverAllowed = $null
        } else {
            $IsFailoverAllowed = $JsonParameters.PSobject.Properties["isFailoverAllowed"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "isOverrideAllowed"))) { #optional property not found
            $IsOverrideAllowed = $null
        } else {
            $IsOverrideAllowed = $JsonParameters.PSobject.Properties["isOverrideAllowed"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "isPrimary"))) { #optional property not found
            $IsPrimary = $null
        } else {
            $IsPrimary = $JsonParameters.PSobject.Properties["isPrimary"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "isSyncAllowed"))) { #optional property not found
            $IsSyncAllowed = $null
        } else {
            $IsSyncAllowed = $JsonParameters.PSobject.Properties["isSyncAllowed"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "kvPairsPresent"))) { #optional property not found
            $KvPairsPresent = $null
        } else {
            $KvPairsPresent = $JsonParameters.PSobject.Properties["kvPairsPresent"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "members"))) { #optional property not found
            $Members = $null
        } else {
            $Members = $JsonParameters.PSobject.Properties["members"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) { #optional property not found
            $Name = $null
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "nonZeroRtoConfig"))) { #optional property not found
            $NonZeroRtoConfig = $null
        } else {
            $NonZeroRtoConfig = $JsonParameters.PSobject.Properties["nonZeroRtoConfig"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "remoteRecoveryPoint"))) { #optional property not found
            $RemoteRecoveryPoint = $null
        } else {
            $RemoteRecoveryPoint = $JsonParameters.PSobject.Properties["remoteRecoveryPoint"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "replicationPartner"))) { #optional property not found
            $ReplicationPartner = $null
        } else {
            $ReplicationPartner = $JsonParameters.PSobject.Properties["replicationPartner"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "replicationState"))) { #optional property not found
            $ReplicationState = $null
        } else {
            $ReplicationState = $JsonParameters.PSobject.Properties["replicationState"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "replicationTraffic"))) { #optional property not found
            $ReplicationTraffic = $null
        } else {
            $ReplicationTraffic = $JsonParameters.PSobject.Properties["replicationTraffic"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "replicationType"))) { #optional property not found
            $ReplicationType = $null
        } else {
            $ReplicationType = $JsonParameters.PSobject.Properties["replicationType"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "requestUri"))) { #optional property not found
            $RequestUri = $null
        } else {
            $RequestUri = $JsonParameters.PSobject.Properties["requestUri"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "serialNumber"))) { #optional property not found
            $SerialNumber = $null
        } else {
            $SerialNumber = $JsonParameters.PSobject.Properties["serialNumber"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "sizeMiB"))) { #optional property not found
            $SizeMiB = $null
        } else {
            $SizeMiB = $JsonParameters.PSobject.Properties["sizeMiB"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "snapSetParentId"))) { #optional property not found
            $SnapSetParentId = $null
        } else {
            $SnapSetParentId = $JsonParameters.PSobject.Properties["snapSetParentId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "snapSetParentName"))) { #optional property not found
            $SnapSetParentName = $null
        } else {
            $SnapSetParentName = $JsonParameters.PSobject.Properties["snapSetParentName"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "systemId"))) { #optional property not found
            $SystemId = $null
        } else {
            $SystemId = $JsonParameters.PSobject.Properties["systemId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "type"))) { #optional property not found
            $Type = $null
        } else {
            $Type = $JsonParameters.PSobject.Properties["type"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "vvSetType"))) { #optional property not found
            $VvSetType = $null
        } else {
            $VvSetType = $JsonParameters.PSobject.Properties["vvSetType"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "zeroRtoConfig"))) { #optional property not found
            $ZeroRtoConfig = $null
        } else {
            $ZeroRtoConfig = $JsonParameters.PSobject.Properties["zeroRtoConfig"].value
        }

        $PSO = [PSCustomObject]@{
            "appSetBusinessUnit" = ${AppSetBusinessUnit}
            "appSetComments" = ${AppSetComments}
            "appSetExcludeAIQoS" = ${AppSetExcludeAIQoS}
            "appSetId" = ${AppSetId}
            "appSetImportance" = ${AppSetImportance}
            "appSetName" = ${AppSetName}
            "appSetType" = ${AppSetType}
            "appSetTypeEnum" = ${AppSetTypeEnum}
            "associatedLinks" = ${AssociatedLinks}
            "comment" = ${Comment}
            "consoleUri" = ${ConsoleUri}
            "customerId" = ${CustomerId}
            "displayName" = ${DisplayName}
            "domain" = ${Domain}
            "exportStatus" = ${ExportStatus}
            "generation" = ${Generation}
            "id" = ${Id}
            "initiators" = ${Initiators}
            "isFailoverAllowed" = ${IsFailoverAllowed}
            "isOverrideAllowed" = ${IsOverrideAllowed}
            "isPrimary" = ${IsPrimary}
            "isSyncAllowed" = ${IsSyncAllowed}
            "kvPairsPresent" = ${KvPairsPresent}
            "members" = ${Members}
            "name" = ${Name}
            "nonZeroRtoConfig" = ${NonZeroRtoConfig}
            "remoteRecoveryPoint" = ${RemoteRecoveryPoint}
            "replicationPartner" = ${ReplicationPartner}
            "replicationState" = ${ReplicationState}
            "replicationTraffic" = ${ReplicationTraffic}
            "replicationType" = ${ReplicationType}
            "requestUri" = ${RequestUri}
            "serialNumber" = ${SerialNumber}
            "sizeMiB" = ${SizeMiB}
            "snapSetParentId" = ${SnapSetParentId}
            "snapSetParentName" = ${SnapSetParentName}
            "systemId" = ${SystemId}
            "type" = ${Type}
            "vvSetType" = ${VvSetType}
            "zeroRtoConfig" = ${ZeroRtoConfig}
        }

        return $PSO
    }

}

