#
# Data Services Cloud Console API
# Data Services Cloud Console API
# Version: 1.3.0
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Fan details

.PARAMETER FanId
Specifies the ID of the fan
.PARAMETER FanLocation
Specifies the name of the fan location
.PARAMETER FanName
Specifies the name of the fan
.PARAMETER FanSpeed
The fan speed
.PARAMETER FanState
The fan state
.PARAMETER FanUuid
Specifies the UUID of the fan
.OUTPUTS

Fan<PSCustomObject>
#>

function Initialize-Fan {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${FanId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${FanLocation},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${FanName},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${FanSpeed},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${FanState},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${FanUuid}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => Fan' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "fanId" = ${FanId}
            "fanLocation" = ${FanLocation}
            "fanName" = ${FanName}
            "fanSpeed" = ${FanSpeed}
            "fanState" = ${FanState}
            "fanUuid" = ${FanUuid}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to Fan<PSCustomObject>

.DESCRIPTION

Convert from JSON to Fan<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

Fan<PSCustomObject>
#>
function ConvertFrom-JsonToFan {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => Fan' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in Fan
        $AllProperties = ("fanId", "fanLocation", "fanName", "fanSpeed", "fanState", "fanUuid")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "fanId"))) { #optional property not found
            $FanId = $null
        } else {
            $FanId = $JsonParameters.PSobject.Properties["fanId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "fanLocation"))) { #optional property not found
            $FanLocation = $null
        } else {
            $FanLocation = $JsonParameters.PSobject.Properties["fanLocation"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "fanName"))) { #optional property not found
            $FanName = $null
        } else {
            $FanName = $JsonParameters.PSobject.Properties["fanName"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "fanSpeed"))) { #optional property not found
            $FanSpeed = $null
        } else {
            $FanSpeed = $JsonParameters.PSobject.Properties["fanSpeed"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "fanState"))) { #optional property not found
            $FanState = $null
        } else {
            $FanState = $JsonParameters.PSobject.Properties["fanState"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "fanUuid"))) { #optional property not found
            $FanUuid = $null
        } else {
            $FanUuid = $JsonParameters.PSobject.Properties["fanUuid"].value
        }

        $PSO = [PSCustomObject]@{
            "fanId" = ${FanId}
            "fanLocation" = ${FanLocation}
            "fanName" = ${FanName}
            "fanSpeed" = ${FanSpeed}
            "fanState" = ${FanState}
            "fanUuid" = ${FanUuid}
        }

        return $PSO
    }

}

