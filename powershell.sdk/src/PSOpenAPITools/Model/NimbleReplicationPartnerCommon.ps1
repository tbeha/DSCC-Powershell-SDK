#
# Data Services Cloud Console API
# Data Services Cloud Console API
# Version: 1.3.0
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Alias
String of up to 63 alphanumeric and can include hyphens characters but cannot start with hyphen.
.PARAMETER AssociatedLinks
Associated Links Details
.PARAMETER ControlPort
Port number of partner control interface. Value -1 for an invalid port or a positive integer value up to 65535 representing the TCP/IP port.
.PARAMETER CustomerId
customerId
.PARAMETER DataPort
Port number of partner data interface. Value -1 for an invalid port or a positive integer value up to 65535 representing the TCP/IP port.
.PARAMETER Description
Description of replication partner. String of up to 255 printable ASCII characters.
.PARAMETER FullName
Fully qualified name of replication partner. String of up to 64 alphanumeric characters, - and . and : are allowed after first character.
.PARAMETER Generation
generation
.PARAMETER LastKeepaliveError
Most recent error while attempting to ping the partner. Plain string.
.PARAMETER LastModified
Time when this replication partner was last modified. Seconds since last epoch i.e. 00:00 January 1, 1970.
.PARAMETER LastSyncError
Most recent error seen while attempting to sync objects to the partner. Plain string.
.PARAMETER MatchFolder
Indicates whether to match the upstream volumes folder on the downstream. Possible values: true, false
.PARAMETER PartnerGroupUid
Replication partner group uid. Unsigned 64-bit integer.
.PARAMETER PortRangeStart
Positive integer value up to 65535 representing TCP/IP port. Example: 1234.
.PARAMETER ProxyHostname
String of up to 64 alphanumeric characters, - and . and : are allowed after first character. Example: 'myobject-5'
.PARAMETER ProxyUser
HTTP proxy server username, string up to 255 characters, special characters ([, ], `, ;, ampersand, tab, space, newline) are not allowed.
.PARAMETER RemotePartnerFolderId
The folder ID where volumes replicated from remote partner will be created. Replica volumes created as clones ignore this parameter and are always created in the same pool as their parent volume. A 42 digit hexadecimal number.
.PARAMETER RemotePartnerFolderName
The folder name where volumes replicated from remote partner will be created. String of up to 64 alphanumeric characters, - and . and : are allowed after first character. Example: 'myobject-5'.
.PARAMETER RemotePartnerId
ID of the remote partner.
.PARAMETER RemotePartnerName
Name of the remote partner. String of up to 64 alphanumeric characters, - and . and : are allowed after first character. Example: 'myobject-5'.
.PARAMETER RemotePartnerPoolId
The pool ID where volumes replicated from remote partner will be created. Replica volumes created as clones ignore this parameter and are always created in the same pool as their parent volume. A 42 digit hexadecimal number.
.PARAMETER RemotePartnerPoolName
The pool name where volumes replicated from remote partner will be created. String of up to 64 alphanumeric characters, - and . and : are allowed after first character. Example: 'myobject-5'.
.PARAMETER RemotePartnerSubnetLabel
Label of the subnet used to replicate to remote partner. String of up to 64 alphanumeric characters, - and . and colon are allowed after first character.
.PARAMETER RemotePartnerSubnetType
Type of the subnet used to replicate to the remote partner. Possible values are 'invalid', 'unconfigured', 'mgmt', 'data', 'mgmt_data'.
.PARAMETER RemotePartnerSystemId
ID of the system to which the remote partner belongs.
.PARAMETER ReplicationDirection
Direction of replication configured with this partner. Possible values: none, downstream, upstream, bi_directional
.PARAMETER SearchName
Name of replication partner used for object search. Alphanumeric string, up to 64 characters including hyphen, period, colon.
.PARAMETER Status
Status of the partner. Failed, Normal, Degraded, Unknown.
.PARAMETER ThrottledBandwidthCurrent
Current bandwidth throttle for this partner, expressed either as megabits per second or as -1 to indicate that there is no throttle. Signed 64-bit integer.
.PARAMETER ThrottledBandwidthCurrentKbps
Current bandwidth throttle for this partner, expressed either as kilobits per second or as -1 to indicate that there is no throttle. Signed 64-bit integer.
.PARAMETER Throttles
Throttles used while replicating from/to this partner. All the throttles for the partner.
.PARAMETER Type
type
.PARAMETER UniqueName
Possible values: 'true', 'false'.
.PARAMETER VolumeCollectionList
List of volume collections that are replicating from/to this partner. List of volume collections.
.PARAMETER Witness
Hostname or ip addresses of witness. Comma separated strings of up to 63 characters of hostname and/or ip addresses. Total length cannot exceed 255 characters.
.OUTPUTS

NimbleReplicationPartnerCommon<PSCustomObject>
#>

function Initialize-NimbleReplicationPartnerCommon {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Alias},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${AssociatedLinks},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${ControlPort},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${CustomerId},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${DataPort},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Description},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${FullName},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Generation},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${LastKeepaliveError},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${LastModified},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${LastSyncError},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${MatchFolder},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${PartnerGroupUid},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${PortRangeStart},
        [Parameter(Position = 14, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ProxyHostname},
        [Parameter(Position = 15, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ProxyUser},
        [Parameter(Position = 16, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${RemotePartnerFolderId},
        [Parameter(Position = 17, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${RemotePartnerFolderName},
        [Parameter(Position = 18, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${RemotePartnerId},
        [Parameter(Position = 19, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${RemotePartnerName},
        [Parameter(Position = 20, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${RemotePartnerPoolId},
        [Parameter(Position = 21, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${RemotePartnerPoolName},
        [Parameter(Position = 22, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${RemotePartnerSubnetLabel},
        [Parameter(Position = 23, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${RemotePartnerSubnetType},
        [Parameter(Position = 24, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${RemotePartnerSystemId},
        [Parameter(Position = 25, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ReplicationDirection},
        [Parameter(Position = 26, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SearchName},
        [Parameter(Position = 27, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Status},
        [Parameter(Position = 28, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${ThrottledBandwidthCurrent},
        [Parameter(Position = 29, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${ThrottledBandwidthCurrentKbps},
        [Parameter(Position = 30, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Throttles},
        [Parameter(Position = 31, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Type},
        [Parameter(Position = 32, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${UniqueName},
        [Parameter(Position = 33, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${VolumeCollectionList},
        [Parameter(Position = 34, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Witness}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => NimbleReplicationPartnerCommon' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "alias" = ${Alias}
            "associated_links" = ${AssociatedLinks}
            "control_port" = ${ControlPort}
            "customerId" = ${CustomerId}
            "data_port" = ${DataPort}
            "description" = ${Description}
            "full_name" = ${FullName}
            "generation" = ${Generation}
            "last_keepalive_error" = ${LastKeepaliveError}
            "last_modified" = ${LastModified}
            "last_sync_error" = ${LastSyncError}
            "match_folder" = ${MatchFolder}
            "partner_group_uid" = ${PartnerGroupUid}
            "port_range_start" = ${PortRangeStart}
            "proxy_hostname" = ${ProxyHostname}
            "proxy_user" = ${ProxyUser}
            "remote_partner_folder_id" = ${RemotePartnerFolderId}
            "remote_partner_folder_name" = ${RemotePartnerFolderName}
            "remote_partner_id" = ${RemotePartnerId}
            "remote_partner_name" = ${RemotePartnerName}
            "remote_partner_pool_id" = ${RemotePartnerPoolId}
            "remote_partner_pool_name" = ${RemotePartnerPoolName}
            "remote_partner_subnet_label" = ${RemotePartnerSubnetLabel}
            "remote_partner_subnet_type" = ${RemotePartnerSubnetType}
            "remote_partner_system_id" = ${RemotePartnerSystemId}
            "replication_direction" = ${ReplicationDirection}
            "search_name" = ${SearchName}
            "status" = ${Status}
            "throttled_bandwidth_current" = ${ThrottledBandwidthCurrent}
            "throttled_bandwidth_current_kbps" = ${ThrottledBandwidthCurrentKbps}
            "throttles" = ${Throttles}
            "type" = ${Type}
            "unique_name" = ${UniqueName}
            "volume_collection_list" = ${VolumeCollectionList}
            "witness" = ${Witness}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to NimbleReplicationPartnerCommon<PSCustomObject>

.DESCRIPTION

Convert from JSON to NimbleReplicationPartnerCommon<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

NimbleReplicationPartnerCommon<PSCustomObject>
#>
function ConvertFrom-JsonToNimbleReplicationPartnerCommon {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => NimbleReplicationPartnerCommon' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in NimbleReplicationPartnerCommon
        $AllProperties = ("alias", "associated_links", "control_port", "customerId", "data_port", "description", "full_name", "generation", "last_keepalive_error", "last_modified", "last_sync_error", "match_folder", "partner_group_uid", "port_range_start", "proxy_hostname", "proxy_user", "remote_partner_folder_id", "remote_partner_folder_name", "remote_partner_id", "remote_partner_name", "remote_partner_pool_id", "remote_partner_pool_name", "remote_partner_subnet_label", "remote_partner_subnet_type", "remote_partner_system_id", "replication_direction", "search_name", "status", "throttled_bandwidth_current", "throttled_bandwidth_current_kbps", "throttles", "type", "unique_name", "volume_collection_list", "witness")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "alias"))) { #optional property not found
            $Alias = $null
        } else {
            $Alias = $JsonParameters.PSobject.Properties["alias"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "associated_links"))) { #optional property not found
            $AssociatedLinks = $null
        } else {
            $AssociatedLinks = $JsonParameters.PSobject.Properties["associated_links"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "control_port"))) { #optional property not found
            $ControlPort = $null
        } else {
            $ControlPort = $JsonParameters.PSobject.Properties["control_port"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "customerId"))) { #optional property not found
            $CustomerId = $null
        } else {
            $CustomerId = $JsonParameters.PSobject.Properties["customerId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "data_port"))) { #optional property not found
            $DataPort = $null
        } else {
            $DataPort = $JsonParameters.PSobject.Properties["data_port"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "description"))) { #optional property not found
            $Description = $null
        } else {
            $Description = $JsonParameters.PSobject.Properties["description"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "full_name"))) { #optional property not found
            $FullName = $null
        } else {
            $FullName = $JsonParameters.PSobject.Properties["full_name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "generation"))) { #optional property not found
            $Generation = $null
        } else {
            $Generation = $JsonParameters.PSobject.Properties["generation"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "last_keepalive_error"))) { #optional property not found
            $LastKeepaliveError = $null
        } else {
            $LastKeepaliveError = $JsonParameters.PSobject.Properties["last_keepalive_error"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "last_modified"))) { #optional property not found
            $LastModified = $null
        } else {
            $LastModified = $JsonParameters.PSobject.Properties["last_modified"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "last_sync_error"))) { #optional property not found
            $LastSyncError = $null
        } else {
            $LastSyncError = $JsonParameters.PSobject.Properties["last_sync_error"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "match_folder"))) { #optional property not found
            $MatchFolder = $null
        } else {
            $MatchFolder = $JsonParameters.PSobject.Properties["match_folder"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "partner_group_uid"))) { #optional property not found
            $PartnerGroupUid = $null
        } else {
            $PartnerGroupUid = $JsonParameters.PSobject.Properties["partner_group_uid"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "port_range_start"))) { #optional property not found
            $PortRangeStart = $null
        } else {
            $PortRangeStart = $JsonParameters.PSobject.Properties["port_range_start"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "proxy_hostname"))) { #optional property not found
            $ProxyHostname = $null
        } else {
            $ProxyHostname = $JsonParameters.PSobject.Properties["proxy_hostname"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "proxy_user"))) { #optional property not found
            $ProxyUser = $null
        } else {
            $ProxyUser = $JsonParameters.PSobject.Properties["proxy_user"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "remote_partner_folder_id"))) { #optional property not found
            $RemotePartnerFolderId = $null
        } else {
            $RemotePartnerFolderId = $JsonParameters.PSobject.Properties["remote_partner_folder_id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "remote_partner_folder_name"))) { #optional property not found
            $RemotePartnerFolderName = $null
        } else {
            $RemotePartnerFolderName = $JsonParameters.PSobject.Properties["remote_partner_folder_name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "remote_partner_id"))) { #optional property not found
            $RemotePartnerId = $null
        } else {
            $RemotePartnerId = $JsonParameters.PSobject.Properties["remote_partner_id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "remote_partner_name"))) { #optional property not found
            $RemotePartnerName = $null
        } else {
            $RemotePartnerName = $JsonParameters.PSobject.Properties["remote_partner_name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "remote_partner_pool_id"))) { #optional property not found
            $RemotePartnerPoolId = $null
        } else {
            $RemotePartnerPoolId = $JsonParameters.PSobject.Properties["remote_partner_pool_id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "remote_partner_pool_name"))) { #optional property not found
            $RemotePartnerPoolName = $null
        } else {
            $RemotePartnerPoolName = $JsonParameters.PSobject.Properties["remote_partner_pool_name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "remote_partner_subnet_label"))) { #optional property not found
            $RemotePartnerSubnetLabel = $null
        } else {
            $RemotePartnerSubnetLabel = $JsonParameters.PSobject.Properties["remote_partner_subnet_label"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "remote_partner_subnet_type"))) { #optional property not found
            $RemotePartnerSubnetType = $null
        } else {
            $RemotePartnerSubnetType = $JsonParameters.PSobject.Properties["remote_partner_subnet_type"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "remote_partner_system_id"))) { #optional property not found
            $RemotePartnerSystemId = $null
        } else {
            $RemotePartnerSystemId = $JsonParameters.PSobject.Properties["remote_partner_system_id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "replication_direction"))) { #optional property not found
            $ReplicationDirection = $null
        } else {
            $ReplicationDirection = $JsonParameters.PSobject.Properties["replication_direction"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "search_name"))) { #optional property not found
            $SearchName = $null
        } else {
            $SearchName = $JsonParameters.PSobject.Properties["search_name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "status"))) { #optional property not found
            $Status = $null
        } else {
            $Status = $JsonParameters.PSobject.Properties["status"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "throttled_bandwidth_current"))) { #optional property not found
            $ThrottledBandwidthCurrent = $null
        } else {
            $ThrottledBandwidthCurrent = $JsonParameters.PSobject.Properties["throttled_bandwidth_current"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "throttled_bandwidth_current_kbps"))) { #optional property not found
            $ThrottledBandwidthCurrentKbps = $null
        } else {
            $ThrottledBandwidthCurrentKbps = $JsonParameters.PSobject.Properties["throttled_bandwidth_current_kbps"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "throttles"))) { #optional property not found
            $Throttles = $null
        } else {
            $Throttles = $JsonParameters.PSobject.Properties["throttles"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "type"))) { #optional property not found
            $Type = $null
        } else {
            $Type = $JsonParameters.PSobject.Properties["type"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "unique_name"))) { #optional property not found
            $UniqueName = $null
        } else {
            $UniqueName = $JsonParameters.PSobject.Properties["unique_name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "volume_collection_list"))) { #optional property not found
            $VolumeCollectionList = $null
        } else {
            $VolumeCollectionList = $JsonParameters.PSobject.Properties["volume_collection_list"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "witness"))) { #optional property not found
            $Witness = $null
        } else {
            $Witness = $JsonParameters.PSobject.Properties["witness"].value
        }

        $PSO = [PSCustomObject]@{
            "alias" = ${Alias}
            "associated_links" = ${AssociatedLinks}
            "control_port" = ${ControlPort}
            "customerId" = ${CustomerId}
            "data_port" = ${DataPort}
            "description" = ${Description}
            "full_name" = ${FullName}
            "generation" = ${Generation}
            "last_keepalive_error" = ${LastKeepaliveError}
            "last_modified" = ${LastModified}
            "last_sync_error" = ${LastSyncError}
            "match_folder" = ${MatchFolder}
            "partner_group_uid" = ${PartnerGroupUid}
            "port_range_start" = ${PortRangeStart}
            "proxy_hostname" = ${ProxyHostname}
            "proxy_user" = ${ProxyUser}
            "remote_partner_folder_id" = ${RemotePartnerFolderId}
            "remote_partner_folder_name" = ${RemotePartnerFolderName}
            "remote_partner_id" = ${RemotePartnerId}
            "remote_partner_name" = ${RemotePartnerName}
            "remote_partner_pool_id" = ${RemotePartnerPoolId}
            "remote_partner_pool_name" = ${RemotePartnerPoolName}
            "remote_partner_subnet_label" = ${RemotePartnerSubnetLabel}
            "remote_partner_subnet_type" = ${RemotePartnerSubnetType}
            "remote_partner_system_id" = ${RemotePartnerSystemId}
            "replication_direction" = ${ReplicationDirection}
            "search_name" = ${SearchName}
            "status" = ${Status}
            "throttled_bandwidth_current" = ${ThrottledBandwidthCurrent}
            "throttled_bandwidth_current_kbps" = ${ThrottledBandwidthCurrentKbps}
            "throttles" = ${Throttles}
            "type" = ${Type}
            "unique_name" = ${UniqueName}
            "volume_collection_list" = ${VolumeCollectionList}
            "witness" = ${Witness}
        }

        return $PSO
    }

}

