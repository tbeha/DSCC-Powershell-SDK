#
# Data Services Cloud Console API
# Data Services Cloud Console API
# Version: 1.3.0
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER FileService
No description available.
.PARAMETER HostDif3par
No description available.
.PARAMETER HostDifStd
No description available.
.PARAMETER NoCache
No description available.
.PARAMETER OneHost
No description available.
.PARAMETER StaleSnapshot
No description available.
.PARAMETER System
No description available.
.PARAMETER ZeroDetect
No description available.
.PARAMETER ZeroFill
No description available.
.OUTPUTS

Policy<PSCustomObject>
#>

function Initialize-Policy {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${FileService},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${HostDif3par},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${HostDifStd},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${NoCache},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${OneHost},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${StaleSnapshot},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${System},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${ZeroDetect},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${ZeroFill}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => Policy' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "fileService" = ${FileService}
            "hostDif3par" = ${HostDif3par}
            "hostDifStd" = ${HostDifStd}
            "noCache" = ${NoCache}
            "oneHost" = ${OneHost}
            "staleSnapshot" = ${StaleSnapshot}
            "system" = ${System}
            "zeroDetect" = ${ZeroDetect}
            "zeroFill" = ${ZeroFill}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to Policy<PSCustomObject>

.DESCRIPTION

Convert from JSON to Policy<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

Policy<PSCustomObject>
#>
function ConvertFrom-JsonToPolicy {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => Policy' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in Policy
        $AllProperties = ("fileService", "hostDif3par", "hostDifStd", "noCache", "oneHost", "staleSnapshot", "system", "zeroDetect", "zeroFill")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "fileService"))) { #optional property not found
            $FileService = $null
        } else {
            $FileService = $JsonParameters.PSobject.Properties["fileService"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "hostDif3par"))) { #optional property not found
            $HostDif3par = $null
        } else {
            $HostDif3par = $JsonParameters.PSobject.Properties["hostDif3par"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "hostDifStd"))) { #optional property not found
            $HostDifStd = $null
        } else {
            $HostDifStd = $JsonParameters.PSobject.Properties["hostDifStd"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "noCache"))) { #optional property not found
            $NoCache = $null
        } else {
            $NoCache = $JsonParameters.PSobject.Properties["noCache"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "oneHost"))) { #optional property not found
            $OneHost = $null
        } else {
            $OneHost = $JsonParameters.PSobject.Properties["oneHost"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "staleSnapshot"))) { #optional property not found
            $StaleSnapshot = $null
        } else {
            $StaleSnapshot = $JsonParameters.PSobject.Properties["staleSnapshot"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "system"))) { #optional property not found
            $System = $null
        } else {
            $System = $JsonParameters.PSobject.Properties["system"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "zeroDetect"))) { #optional property not found
            $ZeroDetect = $null
        } else {
            $ZeroDetect = $JsonParameters.PSobject.Properties["zeroDetect"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "zeroFill"))) { #optional property not found
            $ZeroFill = $null
        } else {
            $ZeroFill = $JsonParameters.PSobject.Properties["zeroFill"].value
        }

        $PSO = [PSCustomObject]@{
            "fileService" = ${FileService}
            "hostDif3par" = ${HostDif3par}
            "hostDifStd" = ${HostDifStd}
            "noCache" = ${NoCache}
            "oneHost" = ${OneHost}
            "staleSnapshot" = ${StaleSnapshot}
            "system" = ${System}
            "zeroDetect" = ${ZeroDetect}
            "zeroFill" = ${ZeroFill}
        }

        return $PSO
    }

}

