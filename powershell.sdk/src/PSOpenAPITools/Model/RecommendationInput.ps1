#
# Data Services Cloud Console API
# Data Services Cloud Console API
# Version: 1.3.0
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Request body for creating provisioning Workflow

.PARAMETER HostGroupId
host group id
.PARAMETER ProductFamily
Storage device type
.PARAMETER SizeMib
volume size requirement
.OUTPUTS

RecommendationInput<PSCustomObject>
#>

function Initialize-RecommendationInput {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${HostGroupId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ProductFamily},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [Int32]
        ${SizeMib}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => RecommendationInput' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $SizeMib) {
            throw "invalid value for 'SizeMib', 'SizeMib' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "hostGroupId" = ${HostGroupId}
            "productFamily" = ${ProductFamily}
            "sizeMib" = ${SizeMib}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to RecommendationInput<PSCustomObject>

.DESCRIPTION

Convert from JSON to RecommendationInput<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

RecommendationInput<PSCustomObject>
#>
function ConvertFrom-JsonToRecommendationInput {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => RecommendationInput' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in RecommendationInput
        $AllProperties = ("hostGroupId", "productFamily", "sizeMib")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'sizeMib' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "sizeMib"))) {
            throw "Error! JSON cannot be serialized due to the required property 'sizeMib' missing."
        } else {
            $SizeMib = $JsonParameters.PSobject.Properties["sizeMib"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "hostGroupId"))) { #optional property not found
            $HostGroupId = $null
        } else {
            $HostGroupId = $JsonParameters.PSobject.Properties["hostGroupId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "productFamily"))) { #optional property not found
            $ProductFamily = $null
        } else {
            $ProductFamily = $JsonParameters.PSobject.Properties["productFamily"].value
        }

        $PSO = [PSCustomObject]@{
            "hostGroupId" = ${HostGroupId}
            "productFamily" = ${ProductFamily}
            "sizeMib" = ${SizeMib}
        }

        return $PSO
    }

}

