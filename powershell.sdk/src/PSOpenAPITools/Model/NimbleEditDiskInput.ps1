#
# Data Services Cloud Console API
# Data Services Cloud Console API
# Version: 1.3.0
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Edit Nimble / Alletra 6K disk.

.PARAMETER DiskOp
The intended operation to be performed on the specified disk. Disk operation. Possible values: 'add', 'remove'.
.PARAMETER Force
Forcibly add a disk. Possible values: 'true', 'false'.
.OUTPUTS

NimbleEditDiskInput<PSCustomObject>
#>

function Initialize-NimbleEditDiskInput {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${DiskOp},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${Force}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => NimbleEditDiskInput' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "disk_op" = ${DiskOp}
            "force" = ${Force}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to NimbleEditDiskInput<PSCustomObject>

.DESCRIPTION

Convert from JSON to NimbleEditDiskInput<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

NimbleEditDiskInput<PSCustomObject>
#>
function ConvertFrom-JsonToNimbleEditDiskInput {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => NimbleEditDiskInput' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in NimbleEditDiskInput
        $AllProperties = ("disk_op", "force")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "disk_op"))) { #optional property not found
            $DiskOp = $null
        } else {
            $DiskOp = $JsonParameters.PSobject.Properties["disk_op"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "force"))) { #optional property not found
            $Force = $null
        } else {
            $Force = $JsonParameters.PSobject.Properties["force"].value
        }

        $PSO = [PSCustomObject]@{
            "disk_op" = ${DiskOp}
            "force" = ${Force}
        }

        return $PSO
    }

}

