#
# Data Services Cloud Console API
# Data Services Cloud Console API
# Version: 1.3.0
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER AllFlash
True if it is an All-Flash array, False otherwise.Possible values : true, false.
.PARAMETER ArrayName
Name of the uninitialized array.String of up to 64 alphanumeric characters, - and . and : are allowed after first character.
.PARAMETER AssociatedLinks
Associated Links Details
.PARAMETER ConsoleUri
consoleUri for detailed storage object
.PARAMETER CountOfFcPorts
Number of Fibre Channel ports of the uninitialized array. Unsigned 64-bit integer.
.PARAMETER CustomerId
customerId
.PARAMETER DedupeConfigurable
True if it is a hybrid array that is capable of updating data deduplication setting, False otherwise.Possible values : true, false.
.PARAMETER Generation
generation
.PARAMETER Id
Identifier for the uninitialized array. A 42 digit hexadecimal number.
.PARAMETER ModelStr
Model description of the uninitialized array.String of up to 64 alphanumeric characters, - and . and : are allowed after first character.
.PARAMETER ResourceUri
Link to the object URI
.PARAMETER Serial
Serial Number of the uninitialized array. A 42 digit hexadecimal number.
.PARAMETER Type
type
.PARAMETER Version
Version of the uninitialized array. String of up to 64 alphanumeric characters, - and . and :are allowed after first character.
.PARAMETER ZconfIpaddrs
List of link local zero conf address of the uninitialized array. List of IP Addresses
.OUTPUTS

UninitializedArrayResponse<PSCustomObject>
#>

function Initialize-UninitializedArrayResponse {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${AllFlash},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ArrayName},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${AssociatedLinks},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ConsoleUri},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${CountOfFcPorts},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${CustomerId},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${DedupeConfigurable},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Generation},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Id},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ModelStr},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ResourceUri},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Serial},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Type},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Version},
        [Parameter(Position = 14, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${ZconfIpaddrs}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => UninitializedArrayResponse' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "all_flash" = ${AllFlash}
            "array_name" = ${ArrayName}
            "associated_links" = ${AssociatedLinks}
            "consoleUri" = ${ConsoleUri}
            "count_of_fc_ports" = ${CountOfFcPorts}
            "customerId" = ${CustomerId}
            "dedupe_configurable" = ${DedupeConfigurable}
            "generation" = ${Generation}
            "id" = ${Id}
            "model_str" = ${ModelStr}
            "resourceUri" = ${ResourceUri}
            "serial" = ${Serial}
            "type" = ${Type}
            "version" = ${Version}
            "zconf_ipaddrs" = ${ZconfIpaddrs}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to UninitializedArrayResponse<PSCustomObject>

.DESCRIPTION

Convert from JSON to UninitializedArrayResponse<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

UninitializedArrayResponse<PSCustomObject>
#>
function ConvertFrom-JsonToUninitializedArrayResponse {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => UninitializedArrayResponse' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in UninitializedArrayResponse
        $AllProperties = ("all_flash", "array_name", "associated_links", "consoleUri", "count_of_fc_ports", "customerId", "dedupe_configurable", "generation", "id", "model_str", "resourceUri", "serial", "type", "version", "zconf_ipaddrs")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "all_flash"))) { #optional property not found
            $AllFlash = $null
        } else {
            $AllFlash = $JsonParameters.PSobject.Properties["all_flash"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "array_name"))) { #optional property not found
            $ArrayName = $null
        } else {
            $ArrayName = $JsonParameters.PSobject.Properties["array_name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "associated_links"))) { #optional property not found
            $AssociatedLinks = $null
        } else {
            $AssociatedLinks = $JsonParameters.PSobject.Properties["associated_links"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "consoleUri"))) { #optional property not found
            $ConsoleUri = $null
        } else {
            $ConsoleUri = $JsonParameters.PSobject.Properties["consoleUri"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "count_of_fc_ports"))) { #optional property not found
            $CountOfFcPorts = $null
        } else {
            $CountOfFcPorts = $JsonParameters.PSobject.Properties["count_of_fc_ports"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "customerId"))) { #optional property not found
            $CustomerId = $null
        } else {
            $CustomerId = $JsonParameters.PSobject.Properties["customerId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "dedupe_configurable"))) { #optional property not found
            $DedupeConfigurable = $null
        } else {
            $DedupeConfigurable = $JsonParameters.PSobject.Properties["dedupe_configurable"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "generation"))) { #optional property not found
            $Generation = $null
        } else {
            $Generation = $JsonParameters.PSobject.Properties["generation"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) { #optional property not found
            $Id = $null
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "model_str"))) { #optional property not found
            $ModelStr = $null
        } else {
            $ModelStr = $JsonParameters.PSobject.Properties["model_str"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "resourceUri"))) { #optional property not found
            $ResourceUri = $null
        } else {
            $ResourceUri = $JsonParameters.PSobject.Properties["resourceUri"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "serial"))) { #optional property not found
            $Serial = $null
        } else {
            $Serial = $JsonParameters.PSobject.Properties["serial"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "type"))) { #optional property not found
            $Type = $null
        } else {
            $Type = $JsonParameters.PSobject.Properties["type"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "version"))) { #optional property not found
            $Version = $null
        } else {
            $Version = $JsonParameters.PSobject.Properties["version"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "zconf_ipaddrs"))) { #optional property not found
            $ZconfIpaddrs = $null
        } else {
            $ZconfIpaddrs = $JsonParameters.PSobject.Properties["zconf_ipaddrs"].value
        }

        $PSO = [PSCustomObject]@{
            "all_flash" = ${AllFlash}
            "array_name" = ${ArrayName}
            "associated_links" = ${AssociatedLinks}
            "consoleUri" = ${ConsoleUri}
            "count_of_fc_ports" = ${CountOfFcPorts}
            "customerId" = ${CustomerId}
            "dedupe_configurable" = ${DedupeConfigurable}
            "generation" = ${Generation}
            "id" = ${Id}
            "model_str" = ${ModelStr}
            "resourceUri" = ${ResourceUri}
            "serial" = ${Serial}
            "type" = ${Type}
            "version" = ${Version}
            "zconf_ipaddrs" = ${ZconfIpaddrs}
        }

        return $PSO
    }

}

