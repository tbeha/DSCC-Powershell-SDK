#
# Data Services Cloud Console API
# Data Services Cloud Console API
# Version: 1.3.0
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Active
Indicates if this is an active VLUN or a template
.PARAMETER ConsoleUri
consoleUri for detailed storage object
.PARAMETER DeviceWWNs
Device WWNs
.PARAMETER DiskPartition
Disk partition of host
.PARAMETER Displayname
SED state
.PARAMETER Domain
SED state
.PARAMETER FailedPathInterval
Monitoring interval in seconds after which the host checks for failed paths
.PARAMETER FailedPathPolicy
Failed path monitoring method
.PARAMETER Id
uid of the vlun
.PARAMETER Initiators
No description available.
.PARAMETER Lun
Exported LUN ID
.PARAMETER MountPoint
Mount points of devices
.PARAMETER MountPointFsau
File system allocation unit in MiB
.PARAMETER MultiPathType
Multi-path method in use
.PARAMETER PortPos
No description available.
.PARAMETER RawVolume
Volume that has not been formatted. Yes if it supports
.PARAMETER RemoteName
Host WWN, iSCSI name, or SAS address; depending on port type
.PARAMETER RequestUri
requestUri for detailed vlun object
.PARAMETER ResourceUri
resourceUri for detailed vlun object
.PARAMETER State
No description available.
.PARAMETER Status
SED state
.PARAMETER SystemId
SED state
.PARAMETER TpgId
SED state
.PARAMETER Type
VLUN type
.PARAMETER UsedSpace
Host devices used space in MiB
.PARAMETER VolumeGroup
Volume group info
.PARAMETER VolumeManager
Volume Manager tool used
.PARAMETER VolumeName
Name of exported virtual volume or volume set name
.PARAMETER VolumeWWN
WWN of exported volume.If a volume set is exported, then this value is null.
.PARAMETER VvReservedUserSpace
Volume user reserved space in MiB
.PARAMETER VvSize
Size of volume in MiB
.OUTPUTS

ArcusvlunsListSingle<PSCustomObject>
#>

function Initialize-ArcusvlunsListSingle {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${Active},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ConsoleUri},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${DeviceWWNs},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${DiskPartition},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Displayname},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Domain},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${FailedPathInterval},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${FailedPathPolicy},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Id},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Initiators},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${Lun},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${MountPoint},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${MountPointFsau},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${MultiPathType},
        [Parameter(Position = 14, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${PortPos},
        [Parameter(Position = 15, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${RawVolume},
        [Parameter(Position = 16, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${RemoteName},
        [Parameter(Position = 17, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${RequestUri},
        [Parameter(Position = 18, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ResourceUri},
        [Parameter(Position = 19, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${State},
        [Parameter(Position = 20, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Status},
        [Parameter(Position = 21, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SystemId},
        [Parameter(Position = 22, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${TpgId},
        [Parameter(Position = 23, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Type},
        [Parameter(Position = 24, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${UsedSpace},
        [Parameter(Position = 25, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${VolumeGroup},
        [Parameter(Position = 26, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${VolumeManager},
        [Parameter(Position = 27, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${VolumeName},
        [Parameter(Position = 28, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${VolumeWWN},
        [Parameter(Position = 29, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${VvReservedUserSpace},
        [Parameter(Position = 30, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${VvSize}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => ArcusvlunsListSingle' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "active" = ${Active}
            "consoleUri" = ${ConsoleUri}
            "deviceWWNs" = ${DeviceWWNs}
            "diskPartition" = ${DiskPartition}
            "displayname" = ${Displayname}
            "domain" = ${Domain}
            "failedPathInterval" = ${FailedPathInterval}
            "failedPathPolicy" = ${FailedPathPolicy}
            "id" = ${Id}
            "initiators" = ${Initiators}
            "lun" = ${Lun}
            "mountPoint" = ${MountPoint}
            "mountPointFsau" = ${MountPointFsau}
            "multiPathType" = ${MultiPathType}
            "portPos" = ${PortPos}
            "rawVolume" = ${RawVolume}
            "remoteName" = ${RemoteName}
            "requestUri" = ${RequestUri}
            "resourceUri" = ${ResourceUri}
            "state" = ${State}
            "status" = ${Status}
            "systemId" = ${SystemId}
            "tpgId" = ${TpgId}
            "type" = ${Type}
            "usedSpace" = ${UsedSpace}
            "volumeGroup" = ${VolumeGroup}
            "volumeManager" = ${VolumeManager}
            "volumeName" = ${VolumeName}
            "volumeWWN" = ${VolumeWWN}
            "vvReservedUserSpace" = ${VvReservedUserSpace}
            "vvSize" = ${VvSize}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to ArcusvlunsListSingle<PSCustomObject>

.DESCRIPTION

Convert from JSON to ArcusvlunsListSingle<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

ArcusvlunsListSingle<PSCustomObject>
#>
function ConvertFrom-JsonToArcusvlunsListSingle {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => ArcusvlunsListSingle' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in ArcusvlunsListSingle
        $AllProperties = ("active", "consoleUri", "deviceWWNs", "diskPartition", "displayname", "domain", "failedPathInterval", "failedPathPolicy", "id", "initiators", "lun", "mountPoint", "mountPointFsau", "multiPathType", "portPos", "rawVolume", "remoteName", "requestUri", "resourceUri", "state", "status", "systemId", "tpgId", "type", "usedSpace", "volumeGroup", "volumeManager", "volumeName", "volumeWWN", "vvReservedUserSpace", "vvSize")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "active"))) { #optional property not found
            $Active = $null
        } else {
            $Active = $JsonParameters.PSobject.Properties["active"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "consoleUri"))) { #optional property not found
            $ConsoleUri = $null
        } else {
            $ConsoleUri = $JsonParameters.PSobject.Properties["consoleUri"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "deviceWWNs"))) { #optional property not found
            $DeviceWWNs = $null
        } else {
            $DeviceWWNs = $JsonParameters.PSobject.Properties["deviceWWNs"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "diskPartition"))) { #optional property not found
            $DiskPartition = $null
        } else {
            $DiskPartition = $JsonParameters.PSobject.Properties["diskPartition"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "displayname"))) { #optional property not found
            $Displayname = $null
        } else {
            $Displayname = $JsonParameters.PSobject.Properties["displayname"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "domain"))) { #optional property not found
            $Domain = $null
        } else {
            $Domain = $JsonParameters.PSobject.Properties["domain"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "failedPathInterval"))) { #optional property not found
            $FailedPathInterval = $null
        } else {
            $FailedPathInterval = $JsonParameters.PSobject.Properties["failedPathInterval"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "failedPathPolicy"))) { #optional property not found
            $FailedPathPolicy = $null
        } else {
            $FailedPathPolicy = $JsonParameters.PSobject.Properties["failedPathPolicy"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) { #optional property not found
            $Id = $null
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "initiators"))) { #optional property not found
            $Initiators = $null
        } else {
            $Initiators = $JsonParameters.PSobject.Properties["initiators"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "lun"))) { #optional property not found
            $Lun = $null
        } else {
            $Lun = $JsonParameters.PSobject.Properties["lun"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "mountPoint"))) { #optional property not found
            $MountPoint = $null
        } else {
            $MountPoint = $JsonParameters.PSobject.Properties["mountPoint"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "mountPointFsau"))) { #optional property not found
            $MountPointFsau = $null
        } else {
            $MountPointFsau = $JsonParameters.PSobject.Properties["mountPointFsau"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "multiPathType"))) { #optional property not found
            $MultiPathType = $null
        } else {
            $MultiPathType = $JsonParameters.PSobject.Properties["multiPathType"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "portPos"))) { #optional property not found
            $PortPos = $null
        } else {
            $PortPos = $JsonParameters.PSobject.Properties["portPos"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "rawVolume"))) { #optional property not found
            $RawVolume = $null
        } else {
            $RawVolume = $JsonParameters.PSobject.Properties["rawVolume"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "remoteName"))) { #optional property not found
            $RemoteName = $null
        } else {
            $RemoteName = $JsonParameters.PSobject.Properties["remoteName"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "requestUri"))) { #optional property not found
            $RequestUri = $null
        } else {
            $RequestUri = $JsonParameters.PSobject.Properties["requestUri"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "resourceUri"))) { #optional property not found
            $ResourceUri = $null
        } else {
            $ResourceUri = $JsonParameters.PSobject.Properties["resourceUri"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "state"))) { #optional property not found
            $State = $null
        } else {
            $State = $JsonParameters.PSobject.Properties["state"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "status"))) { #optional property not found
            $Status = $null
        } else {
            $Status = $JsonParameters.PSobject.Properties["status"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "systemId"))) { #optional property not found
            $SystemId = $null
        } else {
            $SystemId = $JsonParameters.PSobject.Properties["systemId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "tpgId"))) { #optional property not found
            $TpgId = $null
        } else {
            $TpgId = $JsonParameters.PSobject.Properties["tpgId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "type"))) { #optional property not found
            $Type = $null
        } else {
            $Type = $JsonParameters.PSobject.Properties["type"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "usedSpace"))) { #optional property not found
            $UsedSpace = $null
        } else {
            $UsedSpace = $JsonParameters.PSobject.Properties["usedSpace"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "volumeGroup"))) { #optional property not found
            $VolumeGroup = $null
        } else {
            $VolumeGroup = $JsonParameters.PSobject.Properties["volumeGroup"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "volumeManager"))) { #optional property not found
            $VolumeManager = $null
        } else {
            $VolumeManager = $JsonParameters.PSobject.Properties["volumeManager"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "volumeName"))) { #optional property not found
            $VolumeName = $null
        } else {
            $VolumeName = $JsonParameters.PSobject.Properties["volumeName"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "volumeWWN"))) { #optional property not found
            $VolumeWWN = $null
        } else {
            $VolumeWWN = $JsonParameters.PSobject.Properties["volumeWWN"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "vvReservedUserSpace"))) { #optional property not found
            $VvReservedUserSpace = $null
        } else {
            $VvReservedUserSpace = $JsonParameters.PSobject.Properties["vvReservedUserSpace"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "vvSize"))) { #optional property not found
            $VvSize = $null
        } else {
            $VvSize = $JsonParameters.PSobject.Properties["vvSize"].value
        }

        $PSO = [PSCustomObject]@{
            "active" = ${Active}
            "consoleUri" = ${ConsoleUri}
            "deviceWWNs" = ${DeviceWWNs}
            "diskPartition" = ${DiskPartition}
            "displayname" = ${Displayname}
            "domain" = ${Domain}
            "failedPathInterval" = ${FailedPathInterval}
            "failedPathPolicy" = ${FailedPathPolicy}
            "id" = ${Id}
            "initiators" = ${Initiators}
            "lun" = ${Lun}
            "mountPoint" = ${MountPoint}
            "mountPointFsau" = ${MountPointFsau}
            "multiPathType" = ${MultiPathType}
            "portPos" = ${PortPos}
            "rawVolume" = ${RawVolume}
            "remoteName" = ${RemoteName}
            "requestUri" = ${RequestUri}
            "resourceUri" = ${ResourceUri}
            "state" = ${State}
            "status" = ${Status}
            "systemId" = ${SystemId}
            "tpgId" = ${TpgId}
            "type" = ${Type}
            "usedSpace" = ${UsedSpace}
            "volumeGroup" = ${VolumeGroup}
            "volumeManager" = ${VolumeManager}
            "volumeName" = ${VolumeName}
            "volumeWWN" = ${VolumeWWN}
            "vvReservedUserSpace" = ${VvReservedUserSpace}
            "vvSize" = ${VvSize}
        }

        return $PSO
    }

}

