#
# Data Services Cloud Console API
# Data Services Cloud Console API
# Version: 1.3.0
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Request body for removing snapshot collections.

.PARAMETER Force
Force remove.
.PARAMETER SnapshotCollections
List of snapshot collections to be deleted.
.OUTPUTS

RemoveSnapshotCollectionInput<PSCustomObject>
#>

function Initialize-RemoveSnapshotCollectionInput {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${Force},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${SnapshotCollections}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => RemoveSnapshotCollectionInput' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $SnapshotCollections) {
            throw "invalid value for 'SnapshotCollections', 'SnapshotCollections' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "force" = ${Force}
            "snapshot_collections" = ${SnapshotCollections}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to RemoveSnapshotCollectionInput<PSCustomObject>

.DESCRIPTION

Convert from JSON to RemoveSnapshotCollectionInput<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

RemoveSnapshotCollectionInput<PSCustomObject>
#>
function ConvertFrom-JsonToRemoveSnapshotCollectionInput {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => RemoveSnapshotCollectionInput' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in RemoveSnapshotCollectionInput
        $AllProperties = ("force", "snapshot_collections")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'snapshot_collections' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "snapshot_collections"))) {
            throw "Error! JSON cannot be serialized due to the required property 'snapshot_collections' missing."
        } else {
            $SnapshotCollections = $JsonParameters.PSobject.Properties["snapshot_collections"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "force"))) { #optional property not found
            $Force = $null
        } else {
            $Force = $JsonParameters.PSobject.Properties["force"].value
        }

        $PSO = [PSCustomObject]@{
            "force" = ${Force}
            "snapshot_collections" = ${SnapshotCollections}
        }

        return $PSO
    }

}

