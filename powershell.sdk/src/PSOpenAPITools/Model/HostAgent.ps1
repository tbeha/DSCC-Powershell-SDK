#
# Data Services Cloud Console API
# Data Services Cloud Console API
# Version: 1.3.0
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Primera Host Agent

.PARAMETER IPAddr
Ip Address
.PARAMETER Architecture
Architecture Name
.PARAMETER BootFromSan
Boot from SAN
.PARAMETER ClusterID
Cluster ID 
.PARAMETER ClusterName
Cluster Cluster
.PARAMETER ClusterSoftware
Cluster OS
.PARAMETER ClusterVersion
Cluster Version 
.PARAMETER HostApps
Host Applications
.PARAMETER LastUpdated
No description available.
.PARAMETER MultiPathSoftware
Multipath Software
.PARAMETER MultiPathSoftwareVersion
MultiPath Software Version
.PARAMETER Os
Operating System Name
.PARAMETER OsPatch
Os patch
.PARAMETER OsVersion
Os version
.PARAMETER ReportedName
Reported Name
.OUTPUTS

HostAgent<PSCustomObject>
#>

function Initialize-HostAgent {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${IPAddr},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Architecture},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${BootFromSan},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ClusterID},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ClusterName},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ClusterSoftware},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ClusterVersion},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${HostApps},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${LastUpdated},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${MultiPathSoftware},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${MultiPathSoftwareVersion},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Os},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${OsPatch},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${OsVersion},
        [Parameter(Position = 14, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ReportedName}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => HostAgent' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "IPAddr" = ${IPAddr}
            "architecture" = ${Architecture}
            "bootFromSan" = ${BootFromSan}
            "clusterID" = ${ClusterID}
            "clusterName" = ${ClusterName}
            "clusterSoftware" = ${ClusterSoftware}
            "clusterVersion" = ${ClusterVersion}
            "hostApps" = ${HostApps}
            "lastUpdated" = ${LastUpdated}
            "multiPathSoftware" = ${MultiPathSoftware}
            "multiPathSoftwareVersion" = ${MultiPathSoftwareVersion}
            "os" = ${Os}
            "osPatch" = ${OsPatch}
            "osVersion" = ${OsVersion}
            "reportedName" = ${ReportedName}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to HostAgent<PSCustomObject>

.DESCRIPTION

Convert from JSON to HostAgent<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

HostAgent<PSCustomObject>
#>
function ConvertFrom-JsonToHostAgent {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => HostAgent' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in HostAgent
        $AllProperties = ("IPAddr", "architecture", "bootFromSan", "clusterID", "clusterName", "clusterSoftware", "clusterVersion", "hostApps", "lastUpdated", "multiPathSoftware", "multiPathSoftwareVersion", "os", "osPatch", "osVersion", "reportedName")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "IPAddr"))) { #optional property not found
            $IPAddr = $null
        } else {
            $IPAddr = $JsonParameters.PSobject.Properties["IPAddr"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "architecture"))) { #optional property not found
            $Architecture = $null
        } else {
            $Architecture = $JsonParameters.PSobject.Properties["architecture"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "bootFromSan"))) { #optional property not found
            $BootFromSan = $null
        } else {
            $BootFromSan = $JsonParameters.PSobject.Properties["bootFromSan"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "clusterID"))) { #optional property not found
            $ClusterID = $null
        } else {
            $ClusterID = $JsonParameters.PSobject.Properties["clusterID"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "clusterName"))) { #optional property not found
            $ClusterName = $null
        } else {
            $ClusterName = $JsonParameters.PSobject.Properties["clusterName"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "clusterSoftware"))) { #optional property not found
            $ClusterSoftware = $null
        } else {
            $ClusterSoftware = $JsonParameters.PSobject.Properties["clusterSoftware"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "clusterVersion"))) { #optional property not found
            $ClusterVersion = $null
        } else {
            $ClusterVersion = $JsonParameters.PSobject.Properties["clusterVersion"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "hostApps"))) { #optional property not found
            $HostApps = $null
        } else {
            $HostApps = $JsonParameters.PSobject.Properties["hostApps"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "lastUpdated"))) { #optional property not found
            $LastUpdated = $null
        } else {
            $LastUpdated = $JsonParameters.PSobject.Properties["lastUpdated"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "multiPathSoftware"))) { #optional property not found
            $MultiPathSoftware = $null
        } else {
            $MultiPathSoftware = $JsonParameters.PSobject.Properties["multiPathSoftware"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "multiPathSoftwareVersion"))) { #optional property not found
            $MultiPathSoftwareVersion = $null
        } else {
            $MultiPathSoftwareVersion = $JsonParameters.PSobject.Properties["multiPathSoftwareVersion"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "os"))) { #optional property not found
            $Os = $null
        } else {
            $Os = $JsonParameters.PSobject.Properties["os"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "osPatch"))) { #optional property not found
            $OsPatch = $null
        } else {
            $OsPatch = $JsonParameters.PSobject.Properties["osPatch"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "osVersion"))) { #optional property not found
            $OsVersion = $null
        } else {
            $OsVersion = $JsonParameters.PSobject.Properties["osVersion"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "reportedName"))) { #optional property not found
            $ReportedName = $null
        } else {
            $ReportedName = $JsonParameters.PSobject.Properties["reportedName"].value
        }

        $PSO = [PSCustomObject]@{
            "IPAddr" = ${IPAddr}
            "architecture" = ${Architecture}
            "bootFromSan" = ${BootFromSan}
            "clusterID" = ${ClusterID}
            "clusterName" = ${ClusterName}
            "clusterSoftware" = ${ClusterSoftware}
            "clusterVersion" = ${ClusterVersion}
            "hostApps" = ${HostApps}
            "lastUpdated" = ${LastUpdated}
            "multiPathSoftware" = ${MultiPathSoftware}
            "multiPathSoftwareVersion" = ${MultiPathSoftwareVersion}
            "os" = ${Os}
            "osPatch" = ${OsPatch}
            "osVersion" = ${OsVersion}
            "reportedName" = ${ReportedName}
        }

        return $PSO
    }

}

