#
# Data Services Cloud Console API
# Data Services Cloud Console API
# Version: 1.3.0
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Volume latency hotspots response structure

.PARAMETER AssociatedLinks
Associated Links Details
.PARAMETER CustomerId
CustomerId
.PARAMETER EndTime
End time of the interval for which hotspots are calculated
.PARAMETER RequestUri
requestUri for HPE Alletra Storage MP insights volume hotspots
.PARAMETER StartTime
Start time of the interval for which hotspots are calculated
.PARAMETER SystemId
Serial number of the array
.PARAMETER VvLatencyHotspots
No description available.
.OUTPUTS

VolumeHotspots<PSCustomObject>
#>

function Initialize-VolumeHotspots {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${AssociatedLinks},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${CustomerId},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Decimal]]
        ${EndTime},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${RequestUri},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Decimal]]
        ${StartTime},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SystemId},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${VvLatencyHotspots}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => VolumeHotspots' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "associatedLinks" = ${AssociatedLinks}
            "customerId" = ${CustomerId}
            "endTime" = ${EndTime}
            "requestUri" = ${RequestUri}
            "startTime" = ${StartTime}
            "systemId" = ${SystemId}
            "vvLatencyHotspots" = ${VvLatencyHotspots}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to VolumeHotspots<PSCustomObject>

.DESCRIPTION

Convert from JSON to VolumeHotspots<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

VolumeHotspots<PSCustomObject>
#>
function ConvertFrom-JsonToVolumeHotspots {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => VolumeHotspots' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in VolumeHotspots
        $AllProperties = ("associatedLinks", "customerId", "endTime", "requestUri", "startTime", "systemId", "vvLatencyHotspots")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "associatedLinks"))) { #optional property not found
            $AssociatedLinks = $null
        } else {
            $AssociatedLinks = $JsonParameters.PSobject.Properties["associatedLinks"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "customerId"))) { #optional property not found
            $CustomerId = $null
        } else {
            $CustomerId = $JsonParameters.PSobject.Properties["customerId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "endTime"))) { #optional property not found
            $EndTime = $null
        } else {
            $EndTime = $JsonParameters.PSobject.Properties["endTime"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "requestUri"))) { #optional property not found
            $RequestUri = $null
        } else {
            $RequestUri = $JsonParameters.PSobject.Properties["requestUri"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "startTime"))) { #optional property not found
            $StartTime = $null
        } else {
            $StartTime = $JsonParameters.PSobject.Properties["startTime"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "systemId"))) { #optional property not found
            $SystemId = $null
        } else {
            $SystemId = $JsonParameters.PSobject.Properties["systemId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "vvLatencyHotspots"))) { #optional property not found
            $VvLatencyHotspots = $null
        } else {
            $VvLatencyHotspots = $JsonParameters.PSobject.Properties["vvLatencyHotspots"].value
        }

        $PSO = [PSCustomObject]@{
            "associatedLinks" = ${AssociatedLinks}
            "customerId" = ${CustomerId}
            "endTime" = ${EndTime}
            "requestUri" = ${RequestUri}
            "startTime" = ${StartTime}
            "systemId" = ${SystemId}
            "vvLatencyHotspots" = ${VvLatencyHotspots}
        }

        return $PSO
    }

}

