#
# Data Services Cloud Console API
# Data Services Cloud Console API
# Version: 1.3.0
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Comment
Comment
.PARAMETER HostIds
List of host ids of existing hosts
.PARAMETER HostsToCreate
List of hosts to be created and added to this hostGroup
.PARAMETER Name
Name of the host group
.PARAMETER UserCreated
Idicates whether user created host or discovered host
.OUTPUTS

CreateHostGroupInput<PSCustomObject>
#>

function Initialize-CreateHostGroupInput {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Comment},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${HostIds},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${HostsToCreate},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${UserCreated}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => CreateHostGroupInput' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "comment" = ${Comment}
            "hostIds" = ${HostIds}
            "hostsToCreate" = ${HostsToCreate}
            "name" = ${Name}
            "userCreated" = ${UserCreated}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to CreateHostGroupInput<PSCustomObject>

.DESCRIPTION

Convert from JSON to CreateHostGroupInput<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

CreateHostGroupInput<PSCustomObject>
#>
function ConvertFrom-JsonToCreateHostGroupInput {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => CreateHostGroupInput' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in CreateHostGroupInput
        $AllProperties = ("comment", "hostIds", "hostsToCreate", "name", "userCreated")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'name' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) {
            throw "Error! JSON cannot be serialized due to the required property 'name' missing."
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "userCreated"))) {
            throw "Error! JSON cannot be serialized due to the required property 'userCreated' missing."
        } else {
            $UserCreated = $JsonParameters.PSobject.Properties["userCreated"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "comment"))) { #optional property not found
            $Comment = $null
        } else {
            $Comment = $JsonParameters.PSobject.Properties["comment"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "hostIds"))) { #optional property not found
            $HostIds = $null
        } else {
            $HostIds = $JsonParameters.PSobject.Properties["hostIds"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "hostsToCreate"))) { #optional property not found
            $HostsToCreate = $null
        } else {
            $HostsToCreate = $JsonParameters.PSobject.Properties["hostsToCreate"].value
        }

        $PSO = [PSCustomObject]@{
            "comment" = ${Comment}
            "hostIds" = ${HostIds}
            "hostsToCreate" = ${HostsToCreate}
            "name" = ${Name}
            "userCreated" = ${UserCreated}
        }

        return $PSO
    }

}

