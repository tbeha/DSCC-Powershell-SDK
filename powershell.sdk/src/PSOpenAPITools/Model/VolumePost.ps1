#
# Data Services Cloud Console API
# Data Services Cloud Console API
# Version: 1.3.0
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Comment
Comment if any
.PARAMETER CustomName
Name for snapshot
.PARAMETER ExpireSecs
Expiration time in seconds
.PARAMETER NamePattern
No description available.
.PARAMETER ReadOnly
Read only or Read/Write
.PARAMETER RetainSecs
Reatain time in seconds
.OUTPUTS

VolumePost<PSCustomObject>
#>

function Initialize-VolumePost {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Comment},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${CustomName},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${ExpireSecs},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("PARENT_TIMESTAMP", "PARENT_SEC_SINCE_EPOCH", "CUSTOM")]
        [PSCustomObject]
        ${NamePattern},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${ReadOnly},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${RetainSecs}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => VolumePost' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "comment" = ${Comment}
            "customName" = ${CustomName}
            "expireSecs" = ${ExpireSecs}
            "namePattern" = ${NamePattern}
            "readOnly" = ${ReadOnly}
            "retainSecs" = ${RetainSecs}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to VolumePost<PSCustomObject>

.DESCRIPTION

Convert from JSON to VolumePost<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

VolumePost<PSCustomObject>
#>
function ConvertFrom-JsonToVolumePost {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => VolumePost' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in VolumePost
        $AllProperties = ("comment", "customName", "expireSecs", "namePattern", "readOnly", "retainSecs")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'namePattern' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "namePattern"))) {
            throw "Error! JSON cannot be serialized due to the required property 'namePattern' missing."
        } else {
            $NamePattern = $JsonParameters.PSobject.Properties["namePattern"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "comment"))) { #optional property not found
            $Comment = $null
        } else {
            $Comment = $JsonParameters.PSobject.Properties["comment"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "customName"))) { #optional property not found
            $CustomName = $null
        } else {
            $CustomName = $JsonParameters.PSobject.Properties["customName"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "expireSecs"))) { #optional property not found
            $ExpireSecs = $null
        } else {
            $ExpireSecs = $JsonParameters.PSobject.Properties["expireSecs"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "readOnly"))) { #optional property not found
            $ReadOnly = $null
        } else {
            $ReadOnly = $JsonParameters.PSobject.Properties["readOnly"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "retainSecs"))) { #optional property not found
            $RetainSecs = $null
        } else {
            $RetainSecs = $JsonParameters.PSobject.Properties["retainSecs"].value
        }

        $PSO = [PSCustomObject]@{
            "comment" = ${Comment}
            "customName" = ${CustomName}
            "expireSecs" = ${ExpireSecs}
            "namePattern" = ${NamePattern}
            "readOnly" = ${ReadOnly}
            "retainSecs" = ${RetainSecs}
        }

        return $PSO
    }

}

