#
# Data Services Cloud Console API
# Data Services Cloud Console API
# Version: 1.3.0
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Port Management details for a device

.PARAMETER AssociatedLinks
Associated Links Details
.PARAMETER AuthenticationRequired
Is authentication required. Allowed values are enabled or disabled
.PARAMETER ConsoleUri
consoleUri for detailed storage object
.PARAMETER CustomerId
The customer application identifier
.PARAMETER DefaultRouteIPv4
Default IPV4 route address of the network port
.PARAMETER DefaultRouteIPv6
Default IPV6 route address of the network port
.PARAMETER Displayname
Name to be used for display purposes
.PARAMETER DnsServer
DNS Server of the network port
.PARAMETER Domain
Domain that the resource belongs to
.PARAMETER Generation
A monotonically increasing value. This value updates when the resource is updated and can be used as a short way to determine if a resource has changed or which of two different copies of a resource is more up to date.
.PARAMETER Id
Unique Identifier of the resource
.PARAMETER IpV4Data
No description available.
.PARAMETER IpV6Data
No description available.
.PARAMETER NewDefaultRouteIPv4
New default IPV4 route address of the network port
.PARAMETER NewDefaultRouteIPv6
New default IPV6 route address of the network port
.PARAMETER NewIpV4Data
No description available.
.PARAMETER NewIpv6Data
No description available.
.PARAMETER NtpServer
NTP Server of the network port
.PARAMETER ProxyPort
Proxy Server Port. Allowed values are 1-65535
.PARAMETER ProxyProtocol
Supported proxy protocols are HTTP, SOCKS4 and SOCKS5.
.PARAMETER ProxyServer
Proxy server IP address
.PARAMETER ProxyUser
Username for authentication. (Required only if Authentication required is enabled)
.PARAMETER SystemId
Serial Number of the array
.PARAMETER Type
The type of resource.
.OUTPUTS

ArcussysPortManagement<PSCustomObject>
#>

function Initialize-ArcussysPortManagement {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${AssociatedLinks},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${AuthenticationRequired},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ConsoleUri},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${CustomerId},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${DefaultRouteIPv4},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${DefaultRouteIPv6},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Displayname},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${DnsServer},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Domain},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${Generation},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Id},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${IpV4Data},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${IpV6Data},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${NewDefaultRouteIPv4},
        [Parameter(Position = 14, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${NewDefaultRouteIPv6},
        [Parameter(Position = 15, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${NewIpV4Data},
        [Parameter(Position = 16, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${NewIpv6Data},
        [Parameter(Position = 17, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${NtpServer},
        [Parameter(Position = 18, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${ProxyPort},
        [Parameter(Position = 19, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ProxyProtocol},
        [Parameter(Position = 20, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ProxyServer},
        [Parameter(Position = 21, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ProxyUser},
        [Parameter(Position = 22, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SystemId},
        [Parameter(Position = 23, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Type}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => ArcussysPortManagement' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "associatedLinks" = ${AssociatedLinks}
            "authenticationRequired" = ${AuthenticationRequired}
            "consoleUri" = ${ConsoleUri}
            "customerId" = ${CustomerId}
            "defaultRouteIPv4" = ${DefaultRouteIPv4}
            "defaultRouteIPv6" = ${DefaultRouteIPv6}
            "displayname" = ${Displayname}
            "dnsServer" = ${DnsServer}
            "domain" = ${Domain}
            "generation" = ${Generation}
            "id" = ${Id}
            "ipV4Data" = ${IpV4Data}
            "ipV6Data" = ${IpV6Data}
            "newDefaultRouteIPv4" = ${NewDefaultRouteIPv4}
            "newDefaultRouteIPv6" = ${NewDefaultRouteIPv6}
            "newIpV4Data" = ${NewIpV4Data}
            "newIpv6Data" = ${NewIpv6Data}
            "ntpServer" = ${NtpServer}
            "proxyPort" = ${ProxyPort}
            "proxyProtocol" = ${ProxyProtocol}
            "proxyServer" = ${ProxyServer}
            "proxyUser" = ${ProxyUser}
            "systemId" = ${SystemId}
            "type" = ${Type}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to ArcussysPortManagement<PSCustomObject>

.DESCRIPTION

Convert from JSON to ArcussysPortManagement<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

ArcussysPortManagement<PSCustomObject>
#>
function ConvertFrom-JsonToArcussysPortManagement {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => ArcussysPortManagement' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in ArcussysPortManagement
        $AllProperties = ("associatedLinks", "authenticationRequired", "consoleUri", "customerId", "defaultRouteIPv4", "defaultRouteIPv6", "displayname", "dnsServer", "domain", "generation", "id", "ipV4Data", "ipV6Data", "newDefaultRouteIPv4", "newDefaultRouteIPv6", "newIpV4Data", "newIpv6Data", "ntpServer", "proxyPort", "proxyProtocol", "proxyServer", "proxyUser", "systemId", "type")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "associatedLinks"))) { #optional property not found
            $AssociatedLinks = $null
        } else {
            $AssociatedLinks = $JsonParameters.PSobject.Properties["associatedLinks"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "authenticationRequired"))) { #optional property not found
            $AuthenticationRequired = $null
        } else {
            $AuthenticationRequired = $JsonParameters.PSobject.Properties["authenticationRequired"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "consoleUri"))) { #optional property not found
            $ConsoleUri = $null
        } else {
            $ConsoleUri = $JsonParameters.PSobject.Properties["consoleUri"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "customerId"))) { #optional property not found
            $CustomerId = $null
        } else {
            $CustomerId = $JsonParameters.PSobject.Properties["customerId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "defaultRouteIPv4"))) { #optional property not found
            $DefaultRouteIPv4 = $null
        } else {
            $DefaultRouteIPv4 = $JsonParameters.PSobject.Properties["defaultRouteIPv4"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "defaultRouteIPv6"))) { #optional property not found
            $DefaultRouteIPv6 = $null
        } else {
            $DefaultRouteIPv6 = $JsonParameters.PSobject.Properties["defaultRouteIPv6"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "displayname"))) { #optional property not found
            $Displayname = $null
        } else {
            $Displayname = $JsonParameters.PSobject.Properties["displayname"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "dnsServer"))) { #optional property not found
            $DnsServer = $null
        } else {
            $DnsServer = $JsonParameters.PSobject.Properties["dnsServer"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "domain"))) { #optional property not found
            $Domain = $null
        } else {
            $Domain = $JsonParameters.PSobject.Properties["domain"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "generation"))) { #optional property not found
            $Generation = $null
        } else {
            $Generation = $JsonParameters.PSobject.Properties["generation"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) { #optional property not found
            $Id = $null
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ipV4Data"))) { #optional property not found
            $IpV4Data = $null
        } else {
            $IpV4Data = $JsonParameters.PSobject.Properties["ipV4Data"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ipV6Data"))) { #optional property not found
            $IpV6Data = $null
        } else {
            $IpV6Data = $JsonParameters.PSobject.Properties["ipV6Data"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "newDefaultRouteIPv4"))) { #optional property not found
            $NewDefaultRouteIPv4 = $null
        } else {
            $NewDefaultRouteIPv4 = $JsonParameters.PSobject.Properties["newDefaultRouteIPv4"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "newDefaultRouteIPv6"))) { #optional property not found
            $NewDefaultRouteIPv6 = $null
        } else {
            $NewDefaultRouteIPv6 = $JsonParameters.PSobject.Properties["newDefaultRouteIPv6"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "newIpV4Data"))) { #optional property not found
            $NewIpV4Data = $null
        } else {
            $NewIpV4Data = $JsonParameters.PSobject.Properties["newIpV4Data"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "newIpv6Data"))) { #optional property not found
            $NewIpv6Data = $null
        } else {
            $NewIpv6Data = $JsonParameters.PSobject.Properties["newIpv6Data"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ntpServer"))) { #optional property not found
            $NtpServer = $null
        } else {
            $NtpServer = $JsonParameters.PSobject.Properties["ntpServer"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "proxyPort"))) { #optional property not found
            $ProxyPort = $null
        } else {
            $ProxyPort = $JsonParameters.PSobject.Properties["proxyPort"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "proxyProtocol"))) { #optional property not found
            $ProxyProtocol = $null
        } else {
            $ProxyProtocol = $JsonParameters.PSobject.Properties["proxyProtocol"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "proxyServer"))) { #optional property not found
            $ProxyServer = $null
        } else {
            $ProxyServer = $JsonParameters.PSobject.Properties["proxyServer"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "proxyUser"))) { #optional property not found
            $ProxyUser = $null
        } else {
            $ProxyUser = $JsonParameters.PSobject.Properties["proxyUser"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "systemId"))) { #optional property not found
            $SystemId = $null
        } else {
            $SystemId = $JsonParameters.PSobject.Properties["systemId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "type"))) { #optional property not found
            $Type = $null
        } else {
            $Type = $JsonParameters.PSobject.Properties["type"].value
        }

        $PSO = [PSCustomObject]@{
            "associatedLinks" = ${AssociatedLinks}
            "authenticationRequired" = ${AuthenticationRequired}
            "consoleUri" = ${ConsoleUri}
            "customerId" = ${CustomerId}
            "defaultRouteIPv4" = ${DefaultRouteIPv4}
            "defaultRouteIPv6" = ${DefaultRouteIPv6}
            "displayname" = ${Displayname}
            "dnsServer" = ${DnsServer}
            "domain" = ${Domain}
            "generation" = ${Generation}
            "id" = ${Id}
            "ipV4Data" = ${IpV4Data}
            "ipV6Data" = ${IpV6Data}
            "newDefaultRouteIPv4" = ${NewDefaultRouteIPv4}
            "newDefaultRouteIPv6" = ${NewDefaultRouteIPv6}
            "newIpV4Data" = ${NewIpV4Data}
            "newIpv6Data" = ${NewIpv6Data}
            "ntpServer" = ${NtpServer}
            "proxyPort" = ${ProxyPort}
            "proxyProtocol" = ${ProxyProtocol}
            "proxyServer" = ${ProxyServer}
            "proxyUser" = ${ProxyUser}
            "systemId" = ${SystemId}
            "type" = ${Type}
        }

        return $PSO
    }

}

