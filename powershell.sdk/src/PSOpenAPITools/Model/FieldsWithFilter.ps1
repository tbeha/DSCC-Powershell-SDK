#
# Data Services Cloud Console API
# Data Services Cloud Console API
# Version: 1.3.0
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Hostname
Application server hostname. String of alphanumeric characters, valid range is from 2 to 255; Each label must be between 1 and 63 characters long; Hypen and  colon are allowed after the first and before the last character. `Filter, Sort`
.PARAMETER Id
Identifier for the application server. A 42 digit hexadecimal number. `Filter`
.PARAMETER Name
Name of the volume. String of up to 64 alphanumeric, hyphenated, colon, or period-separated characters; but cannot begin with hyphen, colon or period. `Filter, Sort`
.PARAMETER ServerType
Application server type. Possible values: 'vss', 'vmware'. `Filter, Sort`
.OUTPUTS

FieldsWithFilter<PSCustomObject>
#>

function Initialize-FieldsWithFilter {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Hostname},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Id},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ServerType}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => FieldsWithFilter' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "hostname" = ${Hostname}
            "id" = ${Id}
            "name" = ${Name}
            "server_type" = ${ServerType}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to FieldsWithFilter<PSCustomObject>

.DESCRIPTION

Convert from JSON to FieldsWithFilter<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

FieldsWithFilter<PSCustomObject>
#>
function ConvertFrom-JsonToFieldsWithFilter {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => FieldsWithFilter' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in FieldsWithFilter
        $AllProperties = ("hostname", "id", "name", "server_type")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "hostname"))) { #optional property not found
            $Hostname = $null
        } else {
            $Hostname = $JsonParameters.PSobject.Properties["hostname"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) { #optional property not found
            $Id = $null
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) { #optional property not found
            $Name = $null
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "server_type"))) { #optional property not found
            $ServerType = $null
        } else {
            $ServerType = $JsonParameters.PSobject.Properties["server_type"].value
        }

        $PSO = [PSCustomObject]@{
            "hostname" = ${Hostname}
            "id" = ${Id}
            "name" = ${Name}
            "server_type" = ${ServerType}
        }

        return $PSO
    }

}

