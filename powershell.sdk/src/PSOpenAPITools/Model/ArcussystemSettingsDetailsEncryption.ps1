#
# Data Services Cloud Console API
# Data Services Cloud Console API
# Version: 1.3.0
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER BackupSaved
Encryption settings and/or key backed up
.PARAMETER DarState
DAR state
.PARAMETER Enabled
Encryption enabled
.PARAMETER FailedDisks
Number of failed disks
.PARAMETER FipsCompliant
FIPS compliant
.PARAMETER KeyLocation
Location of encyption key Local or External key management
.PARAMETER KmpiProtocols
KMIP protocols set
.PARAMETER Licensed
Encryption licensed
.PARAMETER NotFIPSPD
Number of non FIPS compliant physical disks
.PARAMETER NotNodeSED
Number of non SED node drives
.PARAMETER NotSEDPD
Number of non SED physical disks
.PARAMETER SeqNum
Sequence number
.PARAMETER ServerCount
Count of External Key Management servers
.PARAMETER ServerNames
List of External Key Management servers
.PARAMETER ServerPort
Connection port number for External Key Managers
.PARAMETER ServerUser
Username on External Key Manager
.OUTPUTS

ArcussystemSettingsDetailsEncryption<PSCustomObject>
#>

function Initialize-ArcussystemSettingsDetailsEncryption {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${BackupSaved},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${DarState},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${Enabled},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Decimal]]
        ${FailedDisks},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${FipsCompliant},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${KeyLocation},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${KmpiProtocols},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${Licensed},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Decimal]]
        ${NotFIPSPD},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Decimal]]
        ${NotNodeSED},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Decimal]]
        ${NotSEDPD},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Decimal]]
        ${SeqNum},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Decimal]]
        ${ServerCount},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${ServerNames},
        [Parameter(Position = 14, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Decimal]]
        ${ServerPort},
        [Parameter(Position = 15, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ServerUser}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => ArcussystemSettingsDetailsEncryption' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "backupSaved" = ${BackupSaved}
            "darState" = ${DarState}
            "enabled" = ${Enabled}
            "failedDisks" = ${FailedDisks}
            "fipsCompliant" = ${FipsCompliant}
            "keyLocation" = ${KeyLocation}
            "kmpiProtocols" = ${KmpiProtocols}
            "licensed" = ${Licensed}
            "notFIPSPD" = ${NotFIPSPD}
            "notNodeSED" = ${NotNodeSED}
            "notSEDPD" = ${NotSEDPD}
            "seqNum" = ${SeqNum}
            "serverCount" = ${ServerCount}
            "serverNames" = ${ServerNames}
            "serverPort" = ${ServerPort}
            "serverUser" = ${ServerUser}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to ArcussystemSettingsDetailsEncryption<PSCustomObject>

.DESCRIPTION

Convert from JSON to ArcussystemSettingsDetailsEncryption<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

ArcussystemSettingsDetailsEncryption<PSCustomObject>
#>
function ConvertFrom-JsonToArcussystemSettingsDetailsEncryption {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => ArcussystemSettingsDetailsEncryption' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in ArcussystemSettingsDetailsEncryption
        $AllProperties = ("backupSaved", "darState", "enabled", "failedDisks", "fipsCompliant", "keyLocation", "kmpiProtocols", "licensed", "notFIPSPD", "notNodeSED", "notSEDPD", "seqNum", "serverCount", "serverNames", "serverPort", "serverUser")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "backupSaved"))) { #optional property not found
            $BackupSaved = $null
        } else {
            $BackupSaved = $JsonParameters.PSobject.Properties["backupSaved"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "darState"))) { #optional property not found
            $DarState = $null
        } else {
            $DarState = $JsonParameters.PSobject.Properties["darState"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "enabled"))) { #optional property not found
            $Enabled = $null
        } else {
            $Enabled = $JsonParameters.PSobject.Properties["enabled"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "failedDisks"))) { #optional property not found
            $FailedDisks = $null
        } else {
            $FailedDisks = $JsonParameters.PSobject.Properties["failedDisks"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "fipsCompliant"))) { #optional property not found
            $FipsCompliant = $null
        } else {
            $FipsCompliant = $JsonParameters.PSobject.Properties["fipsCompliant"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "keyLocation"))) { #optional property not found
            $KeyLocation = $null
        } else {
            $KeyLocation = $JsonParameters.PSobject.Properties["keyLocation"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "kmpiProtocols"))) { #optional property not found
            $KmpiProtocols = $null
        } else {
            $KmpiProtocols = $JsonParameters.PSobject.Properties["kmpiProtocols"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "licensed"))) { #optional property not found
            $Licensed = $null
        } else {
            $Licensed = $JsonParameters.PSobject.Properties["licensed"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "notFIPSPD"))) { #optional property not found
            $NotFIPSPD = $null
        } else {
            $NotFIPSPD = $JsonParameters.PSobject.Properties["notFIPSPD"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "notNodeSED"))) { #optional property not found
            $NotNodeSED = $null
        } else {
            $NotNodeSED = $JsonParameters.PSobject.Properties["notNodeSED"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "notSEDPD"))) { #optional property not found
            $NotSEDPD = $null
        } else {
            $NotSEDPD = $JsonParameters.PSobject.Properties["notSEDPD"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "seqNum"))) { #optional property not found
            $SeqNum = $null
        } else {
            $SeqNum = $JsonParameters.PSobject.Properties["seqNum"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "serverCount"))) { #optional property not found
            $ServerCount = $null
        } else {
            $ServerCount = $JsonParameters.PSobject.Properties["serverCount"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "serverNames"))) { #optional property not found
            $ServerNames = $null
        } else {
            $ServerNames = $JsonParameters.PSobject.Properties["serverNames"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "serverPort"))) { #optional property not found
            $ServerPort = $null
        } else {
            $ServerPort = $JsonParameters.PSobject.Properties["serverPort"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "serverUser"))) { #optional property not found
            $ServerUser = $null
        } else {
            $ServerUser = $JsonParameters.PSobject.Properties["serverUser"].value
        }

        $PSO = [PSCustomObject]@{
            "backupSaved" = ${BackupSaved}
            "darState" = ${DarState}
            "enabled" = ${Enabled}
            "failedDisks" = ${FailedDisks}
            "fipsCompliant" = ${FipsCompliant}
            "keyLocation" = ${KeyLocation}
            "kmpiProtocols" = ${KmpiProtocols}
            "licensed" = ${Licensed}
            "notFIPSPD" = ${NotFIPSPD}
            "notNodeSED" = ${NotNodeSED}
            "notSEDPD" = ${NotSEDPD}
            "seqNum" = ${SeqNum}
            "serverCount" = ${ServerCount}
            "serverNames" = ${ServerNames}
            "serverPort" = ${ServerPort}
            "serverUser" = ${ServerUser}
        }

        return $PSO
    }

}

