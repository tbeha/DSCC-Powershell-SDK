#
# Data Services Cloud Console API
# Data Services Cloud Console API
# Version: 1.3.0
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

List of Drive Sets for the respective shelf.

.PARAMETER AcceptDedupeImpact
Accept the reduction or elimination of deduplication capability on the system as a result of activating a shelf that does not meet the necessary deduplication requirements. Possible values: 'true', 'false'.
.PARAMETER AcceptForeign
Accept the removal of data on the shelf disks and activate foreign shelf. Possible values: 'true', 'false'.
.PARAMETER Driveset
Driveset to activate.
.OUTPUTS

NimbleDriveSetDetails<PSCustomObject>
#>

function Initialize-NimbleDriveSetDetails {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [Boolean]
        ${AcceptDedupeImpact},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [Boolean]
        ${AcceptForeign},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [Int64]
        ${Driveset}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => NimbleDriveSetDetails' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $AcceptDedupeImpact) {
            throw "invalid value for 'AcceptDedupeImpact', 'AcceptDedupeImpact' cannot be null."
        }

        if ($null -eq $AcceptForeign) {
            throw "invalid value for 'AcceptForeign', 'AcceptForeign' cannot be null."
        }

        if ($null -eq $Driveset) {
            throw "invalid value for 'Driveset', 'Driveset' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "accept_dedupe_impact" = ${AcceptDedupeImpact}
            "accept_foreign" = ${AcceptForeign}
            "driveset" = ${Driveset}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to NimbleDriveSetDetails<PSCustomObject>

.DESCRIPTION

Convert from JSON to NimbleDriveSetDetails<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

NimbleDriveSetDetails<PSCustomObject>
#>
function ConvertFrom-JsonToNimbleDriveSetDetails {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => NimbleDriveSetDetails' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in NimbleDriveSetDetails
        $AllProperties = ("accept_dedupe_impact", "accept_foreign", "driveset")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'accept_dedupe_impact' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "accept_dedupe_impact"))) {
            throw "Error! JSON cannot be serialized due to the required property 'accept_dedupe_impact' missing."
        } else {
            $AcceptDedupeImpact = $JsonParameters.PSobject.Properties["accept_dedupe_impact"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "accept_foreign"))) {
            throw "Error! JSON cannot be serialized due to the required property 'accept_foreign' missing."
        } else {
            $AcceptForeign = $JsonParameters.PSobject.Properties["accept_foreign"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "driveset"))) {
            throw "Error! JSON cannot be serialized due to the required property 'driveset' missing."
        } else {
            $Driveset = $JsonParameters.PSobject.Properties["driveset"].value
        }

        $PSO = [PSCustomObject]@{
            "accept_dedupe_impact" = ${AcceptDedupeImpact}
            "accept_foreign" = ${AcceptForeign}
            "driveset" = ${Driveset}
        }

        return $PSO
    }

}

