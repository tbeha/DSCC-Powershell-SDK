#
# Data Services Cloud Console API
# Data Services Cloud Console API
# Version: 1.3.0
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

mail-settings input

.PARAMETER SmtpHost
Hostname or IP Address of SMTP Server.
.PARAMETER SmtpPassword
SMTP password
.PARAMETER SmtpPort
Port number of SMTP Server. Positive integer value up to 65535 representing TCP/IP port.
.PARAMETER SmtpUser
SMTP username
.OUTPUTS

GetSystemSettingsResponseSmtpSettings<PSCustomObject>
#>

function Initialize-GetSystemSettingsResponseSmtpSettings {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SmtpHost},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SmtpPassword},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${SmtpPort},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SmtpUser}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => GetSystemSettingsResponseSmtpSettings' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($SmtpPort -and $SmtpPort -gt 65535) {
          throw "invalid value for 'SmtpPort', must be smaller than or equal to 65535."
        }

        if ($SmtpPort -and $SmtpPort -lt 1) {
          throw "invalid value for 'SmtpPort', must be greater than or equal to 1."
        }


        $PSO = [PSCustomObject]@{
            "smtpHost" = ${SmtpHost}
            "smtpPassword" = ${SmtpPassword}
            "smtpPort" = ${SmtpPort}
            "smtpUser" = ${SmtpUser}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to GetSystemSettingsResponseSmtpSettings<PSCustomObject>

.DESCRIPTION

Convert from JSON to GetSystemSettingsResponseSmtpSettings<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

GetSystemSettingsResponseSmtpSettings<PSCustomObject>
#>
function ConvertFrom-JsonToGetSystemSettingsResponseSmtpSettings {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => GetSystemSettingsResponseSmtpSettings' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in GetSystemSettingsResponseSmtpSettings
        $AllProperties = ("smtpHost", "smtpPassword", "smtpPort", "smtpUser")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "smtpHost"))) { #optional property not found
            $SmtpHost = $null
        } else {
            $SmtpHost = $JsonParameters.PSobject.Properties["smtpHost"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "smtpPassword"))) { #optional property not found
            $SmtpPassword = $null
        } else {
            $SmtpPassword = $JsonParameters.PSobject.Properties["smtpPassword"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "smtpPort"))) { #optional property not found
            $SmtpPort = $null
        } else {
            $SmtpPort = $JsonParameters.PSobject.Properties["smtpPort"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "smtpUser"))) { #optional property not found
            $SmtpUser = $null
        } else {
            $SmtpUser = $JsonParameters.PSobject.Properties["smtpUser"].value
        }

        $PSO = [PSCustomObject]@{
            "smtpHost" = ${SmtpHost}
            "smtpPassword" = ${SmtpPassword}
            "smtpPort" = ${SmtpPort}
            "smtpUser" = ${SmtpUser}
        }

        return $PSO
    }

}

