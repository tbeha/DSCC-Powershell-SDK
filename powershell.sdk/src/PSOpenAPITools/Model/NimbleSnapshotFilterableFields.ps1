#
# Data Services Cloud Console API
# Data Services Cloud Console API
# Version: 1.3.0
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
Identifier for the snapshot. A 42 digit hexadecimal number. `Filter`
.PARAMETER Name
Name of snapshot. String of up to 215 alphanumeric, hyphenated, colon, or period-separated characters; but cannot begin with hyphen, colon or period. `Filter, Sort`
.PARAMETER Online
Online state for a snapshot means it could be mounted for data restore. `Filter, Sort`
.PARAMETER PoolName
Name of the pool in which the parent volume belongs to. String of up to 64 alphanumeric characters, - and . and : are allowed after first character. `Filter, Sort`
.PARAMETER ReplicationStatus
Replication status. Possible values: 'complete', 'in_progress', 'pending', 'fail'. `Filter, Sort`
.PARAMETER ScheduleId
Identifier of protection schedule. A 42 digit hexadecimal number. `Filter, Sort`
.PARAMETER ScheduleName
Name of protection schedule. String of up to 64 alphanumeric characters, - and . and : are allowed after first character. `Filter, Sort`
.PARAMETER SerialNumber
Identifier for the SCSI protocol. A 32 digit hexadecimal number. `Filter, Sort`
.PARAMETER Size
Size of volume at time of snapshot (in bytes). `Filter, Sort`
.PARAMETER SnapCollectionId
Identifier of snapshot collection. A 42 digit hexadecimal number. `Filter, Sort`
.PARAMETER SnapCollectionName
Name of snapshot collection. String of up to 215 alphanumeric, hyphenated, colon, or period-separated characters; but cannot begin with hyphen, colon or period. This type is used for object sets containing volumes, snapshots, snapshot collections and protocol endpoints. `Filter, Sort`
.PARAMETER TargetName
The iSCSI Qualified Name (IQN) or the Fibre Channel World Wide Node Name (WWNN) of the target snapshot. The iSCSI Qualified Name (IQN) or the Fibre Channel World Wide Node Name (WWNN) of the target. `Filter, Sort`
.PARAMETER Writable
Whether snapshot is writable or not. Mandatory and must be set to 'true' for VSS application synchronized snapshots. `Filter, Sort`
.OUTPUTS

NimbleSnapshotFilterableFields<PSCustomObject>
#>

function Initialize-NimbleSnapshotFilterableFields {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${Online},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${PoolName},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ReplicationStatus},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ScheduleId},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ScheduleName},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SerialNumber},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${Size},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SnapCollectionId},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SnapCollectionName},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${TargetName},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${Writable}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => NimbleSnapshotFilterableFields' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "name" = ${Name}
            "online" = ${Online}
            "pool_name" = ${PoolName}
            "replication_status" = ${ReplicationStatus}
            "schedule_id" = ${ScheduleId}
            "schedule_name" = ${ScheduleName}
            "serial_number" = ${SerialNumber}
            "size" = ${Size}
            "snap_collection_id" = ${SnapCollectionId}
            "snap_collection_name" = ${SnapCollectionName}
            "target_name" = ${TargetName}
            "writable" = ${Writable}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to NimbleSnapshotFilterableFields<PSCustomObject>

.DESCRIPTION

Convert from JSON to NimbleSnapshotFilterableFields<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

NimbleSnapshotFilterableFields<PSCustomObject>
#>
function ConvertFrom-JsonToNimbleSnapshotFilterableFields {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => NimbleSnapshotFilterableFields' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in NimbleSnapshotFilterableFields
        $AllProperties = ("id", "name", "online", "pool_name", "replication_status", "schedule_id", "schedule_name", "serial_number", "size", "snap_collection_id", "snap_collection_name", "target_name", "writable")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) { #optional property not found
            $Id = $null
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) { #optional property not found
            $Name = $null
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "online"))) { #optional property not found
            $Online = $null
        } else {
            $Online = $JsonParameters.PSobject.Properties["online"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "pool_name"))) { #optional property not found
            $PoolName = $null
        } else {
            $PoolName = $JsonParameters.PSobject.Properties["pool_name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "replication_status"))) { #optional property not found
            $ReplicationStatus = $null
        } else {
            $ReplicationStatus = $JsonParameters.PSobject.Properties["replication_status"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "schedule_id"))) { #optional property not found
            $ScheduleId = $null
        } else {
            $ScheduleId = $JsonParameters.PSobject.Properties["schedule_id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "schedule_name"))) { #optional property not found
            $ScheduleName = $null
        } else {
            $ScheduleName = $JsonParameters.PSobject.Properties["schedule_name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "serial_number"))) { #optional property not found
            $SerialNumber = $null
        } else {
            $SerialNumber = $JsonParameters.PSobject.Properties["serial_number"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "size"))) { #optional property not found
            $Size = $null
        } else {
            $Size = $JsonParameters.PSobject.Properties["size"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "snap_collection_id"))) { #optional property not found
            $SnapCollectionId = $null
        } else {
            $SnapCollectionId = $JsonParameters.PSobject.Properties["snap_collection_id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "snap_collection_name"))) { #optional property not found
            $SnapCollectionName = $null
        } else {
            $SnapCollectionName = $JsonParameters.PSobject.Properties["snap_collection_name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "target_name"))) { #optional property not found
            $TargetName = $null
        } else {
            $TargetName = $JsonParameters.PSobject.Properties["target_name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "writable"))) { #optional property not found
            $Writable = $null
        } else {
            $Writable = $JsonParameters.PSobject.Properties["writable"].value
        }

        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "name" = ${Name}
            "online" = ${Online}
            "pool_name" = ${PoolName}
            "replication_status" = ${ReplicationStatus}
            "schedule_id" = ${ScheduleId}
            "schedule_name" = ${ScheduleName}
            "serial_number" = ${SerialNumber}
            "size" = ${Size}
            "snap_collection_id" = ${SnapCollectionId}
            "snap_collection_name" = ${SnapCollectionName}
            "target_name" = ${TargetName}
            "writable" = ${Writable}
        }

        return $PSO
    }

}

