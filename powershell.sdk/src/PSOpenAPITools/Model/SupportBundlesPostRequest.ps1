#
# Data Services Cloud Console API
# Data Services Cloud Console API
# Version: 1.3.0
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Request Schema

.PARAMETER Aggregated
Saves an aggregated bundle file on the management node (default is false)
.PARAMETER EndTime
Specifies the bundle collection's end time (YYYY-MM-DD HH:MM:SS)
.PARAMETER JbofNodeIds
Specify a comma-separated list of jbofNodeIds to collect data from. By default, all jbofNodes are included. This option cannot be used together with nodesOnly. 
.PARAMETER JbofNodesOnly
Specify this option to collect data from jbofNodes only (default is false)
.PARAMETER MaxSize
Specifies the maximum data limit to apply to the collection of binary trace files, in GB.
.PARAMETER NodeIds
Specify a comma-separated list of nodeIds to collect data from. By default, all Nodes are included. This option cannot be used together with jbofNodesOnly. 
.PARAMETER NodesOnly
Specify this option to collect data from nodes only (default is false)
.PARAMETER Prefix
Specifies the prefix to the bundle name
.PARAMETER Preset
Each preset defines a set of data objects to collect for a different  type of issue (default is standard). 
.PARAMETER StartTime
Specifies the bundle collection's start time (YYYY-MM-DD HH:MM:SS)
.PARAMETER Text
Converts all the bundled objects to text format. Any data that cannot be converted to text is not included in the bundle. (default is false) 
.PARAMETER VippoolIds
Specify a comma-separated list of VIP pools to collect data only from nodes that are included in these VIP pools. 
.OUTPUTS

SupportBundlesPostRequest<PSCustomObject>
#>

function Initialize-SupportBundlesPostRequest {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${Aggregated},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [ValidatePattern("^([12]\d{3}-(0[1-9]|1[0-2])-(0[1-9]|[12]\d|3[01]))\s((0[0-9]|1[0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9])$")]
        [String]
        ${EndTime},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${JbofNodeIds},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${JbofNodesOnly},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${MaxSize},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${NodeIds},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${NodesOnly},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [ValidatePattern("^([A-Za-z0-9-_.]+)$")]
        [String]
        ${Prefix},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("standard", "debug", "mini", "management", "performance", "traces_and_metrics", "nfs", "nfs4", "smb", "raid", "hardware", "permission_issues", "rca", "dr", "metadata")]
        [String]
        ${Preset},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [ValidatePattern("^([12]\d{3}-(0[1-9]|1[0-2])-(0[1-9]|[12]\d|3[01]))\s((0[0-9]|1[0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9])$")]
        [String]
        ${StartTime},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${Text},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${VippoolIds}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => SupportBundlesPostRequest' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $EndTime) {
            throw "invalid value for 'EndTime', 'EndTime' cannot be null."
        }

        if ($MaxSize -and $MaxSize -lt 1) {
          throw "invalid value for 'MaxSize', must be greater than or equal to 1."
        }

        if ($null -eq $Prefix) {
            throw "invalid value for 'Prefix', 'Prefix' cannot be null."
        }

        if ($Prefix.length -gt 64) {
            throw "invalid value for 'Prefix', the character length must be smaller than or equal to 64."
        }

        if ($null -eq $StartTime) {
            throw "invalid value for 'StartTime', 'StartTime' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "aggregated" = ${Aggregated}
            "endTime" = ${EndTime}
            "jbofNodeIds" = ${JbofNodeIds}
            "jbofNodesOnly" = ${JbofNodesOnly}
            "maxSize" = ${MaxSize}
            "nodeIds" = ${NodeIds}
            "nodesOnly" = ${NodesOnly}
            "prefix" = ${Prefix}
            "preset" = ${Preset}
            "startTime" = ${StartTime}
            "text" = ${Text}
            "vippoolIds" = ${VippoolIds}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to SupportBundlesPostRequest<PSCustomObject>

.DESCRIPTION

Convert from JSON to SupportBundlesPostRequest<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

SupportBundlesPostRequest<PSCustomObject>
#>
function ConvertFrom-JsonToSupportBundlesPostRequest {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => SupportBundlesPostRequest' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in SupportBundlesPostRequest
        $AllProperties = ("aggregated", "endTime", "jbofNodeIds", "jbofNodesOnly", "maxSize", "nodeIds", "nodesOnly", "prefix", "preset", "startTime", "text", "vippoolIds")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'endTime' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "endTime"))) {
            throw "Error! JSON cannot be serialized due to the required property 'endTime' missing."
        } else {
            $EndTime = $JsonParameters.PSobject.Properties["endTime"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "prefix"))) {
            throw "Error! JSON cannot be serialized due to the required property 'prefix' missing."
        } else {
            $Prefix = $JsonParameters.PSobject.Properties["prefix"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "startTime"))) {
            throw "Error! JSON cannot be serialized due to the required property 'startTime' missing."
        } else {
            $StartTime = $JsonParameters.PSobject.Properties["startTime"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "aggregated"))) { #optional property not found
            $Aggregated = $null
        } else {
            $Aggregated = $JsonParameters.PSobject.Properties["aggregated"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "jbofNodeIds"))) { #optional property not found
            $JbofNodeIds = $null
        } else {
            $JbofNodeIds = $JsonParameters.PSobject.Properties["jbofNodeIds"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "jbofNodesOnly"))) { #optional property not found
            $JbofNodesOnly = $null
        } else {
            $JbofNodesOnly = $JsonParameters.PSobject.Properties["jbofNodesOnly"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "maxSize"))) { #optional property not found
            $MaxSize = $null
        } else {
            $MaxSize = $JsonParameters.PSobject.Properties["maxSize"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "nodeIds"))) { #optional property not found
            $NodeIds = $null
        } else {
            $NodeIds = $JsonParameters.PSobject.Properties["nodeIds"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "nodesOnly"))) { #optional property not found
            $NodesOnly = $null
        } else {
            $NodesOnly = $JsonParameters.PSobject.Properties["nodesOnly"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "preset"))) { #optional property not found
            $Preset = $null
        } else {
            $Preset = $JsonParameters.PSobject.Properties["preset"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "text"))) { #optional property not found
            $Text = $null
        } else {
            $Text = $JsonParameters.PSobject.Properties["text"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "vippoolIds"))) { #optional property not found
            $VippoolIds = $null
        } else {
            $VippoolIds = $JsonParameters.PSobject.Properties["vippoolIds"].value
        }

        $PSO = [PSCustomObject]@{
            "aggregated" = ${Aggregated}
            "endTime" = ${EndTime}
            "jbofNodeIds" = ${JbofNodeIds}
            "jbofNodesOnly" = ${JbofNodesOnly}
            "maxSize" = ${MaxSize}
            "nodeIds" = ${NodeIds}
            "nodesOnly" = ${NodesOnly}
            "prefix" = ${Prefix}
            "preset" = ${Preset}
            "startTime" = ${StartTime}
            "text" = ${Text}
            "vippoolIds" = ${VippoolIds}
        }

        return $PSO
    }

}

