#
# Data Services Cloud Console API
# Data Services Cloud Console API
# Version: 1.3.0
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Request body for creating volumes

.PARAMETER Comments
test
.PARAMETER Count
Volumes count
.PARAMETER DataReduction
Data Reduction
.PARAMETER Name
Name of the volume
.PARAMETER SizeMib
Size in MB
.PARAMETER SnapshotAllocWarning
Snapshot Alloc Warning
.PARAMETER UserAllocWarning
User Alloc Warning
.PARAMETER UserCpg
User CPG
.OUTPUTS

ArcuscreateVolumeInput<PSCustomObject>
#>

function Initialize-ArcuscreateVolumeInput {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Comments},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Count},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${DataReduction},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [Int32]
        ${SizeMib},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${SnapshotAllocWarning},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${UserAllocWarning},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${UserCpg}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => ArcuscreateVolumeInput' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $Name) {
            throw "invalid value for 'Name', 'Name' cannot be null."
        }

        if ($null -eq $SizeMib) {
            throw "invalid value for 'SizeMib', 'SizeMib' cannot be null."
        }

        if ($null -eq $UserCpg) {
            throw "invalid value for 'UserCpg', 'UserCpg' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "comments" = ${Comments}
            "count" = ${Count}
            "dataReduction" = ${DataReduction}
            "name" = ${Name}
            "sizeMib" = ${SizeMib}
            "snapshotAllocWarning" = ${SnapshotAllocWarning}
            "userAllocWarning" = ${UserAllocWarning}
            "userCpg" = ${UserCpg}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to ArcuscreateVolumeInput<PSCustomObject>

.DESCRIPTION

Convert from JSON to ArcuscreateVolumeInput<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

ArcuscreateVolumeInput<PSCustomObject>
#>
function ConvertFrom-JsonToArcuscreateVolumeInput {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => ArcuscreateVolumeInput' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in ArcuscreateVolumeInput
        $AllProperties = ("comments", "count", "dataReduction", "name", "sizeMib", "snapshotAllocWarning", "userAllocWarning", "userCpg")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'name' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) {
            throw "Error! JSON cannot be serialized due to the required property 'name' missing."
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "sizeMib"))) {
            throw "Error! JSON cannot be serialized due to the required property 'sizeMib' missing."
        } else {
            $SizeMib = $JsonParameters.PSobject.Properties["sizeMib"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "userCpg"))) {
            throw "Error! JSON cannot be serialized due to the required property 'userCpg' missing."
        } else {
            $UserCpg = $JsonParameters.PSobject.Properties["userCpg"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "comments"))) { #optional property not found
            $Comments = $null
        } else {
            $Comments = $JsonParameters.PSobject.Properties["comments"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "count"))) { #optional property not found
            $Count = $null
        } else {
            $Count = $JsonParameters.PSobject.Properties["count"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "dataReduction"))) { #optional property not found
            $DataReduction = $null
        } else {
            $DataReduction = $JsonParameters.PSobject.Properties["dataReduction"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "snapshotAllocWarning"))) { #optional property not found
            $SnapshotAllocWarning = $null
        } else {
            $SnapshotAllocWarning = $JsonParameters.PSobject.Properties["snapshotAllocWarning"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "userAllocWarning"))) { #optional property not found
            $UserAllocWarning = $null
        } else {
            $UserAllocWarning = $JsonParameters.PSobject.Properties["userAllocWarning"].value
        }

        $PSO = [PSCustomObject]@{
            "comments" = ${Comments}
            "count" = ${Count}
            "dataReduction" = ${DataReduction}
            "name" = ${Name}
            "sizeMib" = ${SizeMib}
            "snapshotAllocWarning" = ${SnapshotAllocWarning}
            "userAllocWarning" = ${UserAllocWarning}
            "userCpg" = ${UserCpg}
        }

        return $PSO
    }

}

