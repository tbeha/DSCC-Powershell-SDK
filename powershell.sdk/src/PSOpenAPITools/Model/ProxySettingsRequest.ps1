#
# Data Services Cloud Console API
# Data Services Cloud Console API
# Version: 1.3.0
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Request schema

.PARAMETER AuthenticationRequired
Is authentication required.
.PARAMETER EnableProxy
Specifies whether the proxy is enabled or not
.PARAMETER ProxyPassword
Password for authentication. (Required only if Authentication required is enabled)
.PARAMETER ProxyPort
Proxy server port. Allowed values: 1-65535.
.PARAMETER ProxyProtocol
Supported proxy protocol is HTTP.(Required only if enableProxy is set to true)
.PARAMETER ProxyServer
Proxy server hostname/IP. (Required only if enableProxy is set to true)
.PARAMETER ProxyUser
Username for authentication. (Required only if Authentication required is enabled)
.PARAMETER ProxyUserDomain
User's domain for NTLM authentication (Required only if Authentication required is enabled)
.OUTPUTS

ProxySettingsRequest<PSCustomObject>
#>

function Initialize-ProxySettingsRequest {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${AuthenticationRequired},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [Boolean]
        ${EnableProxy},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ProxyPassword},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${ProxyPort},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("HTTP")]
        [String]
        ${ProxyProtocol},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ProxyServer},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ProxyUser},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ProxyUserDomain}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => ProxySettingsRequest' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $EnableProxy) {
            throw "invalid value for 'EnableProxy', 'EnableProxy' cannot be null."
        }

        if (!$ProxyPassword -and $ProxyPassword.length -gt 32) {
            throw "invalid value for 'ProxyPassword', the character length must be smaller than or equal to 32."
        }

        if ($ProxyPort -and $ProxyPort -gt 65535) {
          throw "invalid value for 'ProxyPort', must be smaller than or equal to 65535."
        }

        if ($ProxyPort -and $ProxyPort -lt 1) {
          throw "invalid value for 'ProxyPort', must be greater than or equal to 1."
        }

        if (!$ProxyServer -and $ProxyServer.length -gt 255) {
            throw "invalid value for 'ProxyServer', the character length must be smaller than or equal to 255."
        }

        if (!$ProxyUser -and $ProxyUser.length -gt 255) {
            throw "invalid value for 'ProxyUser', the character length must be smaller than or equal to 255."
        }


        $PSO = [PSCustomObject]@{
            "authenticationRequired" = ${AuthenticationRequired}
            "enableProxy" = ${EnableProxy}
            "proxyPassword" = ${ProxyPassword}
            "proxyPort" = ${ProxyPort}
            "proxyProtocol" = ${ProxyProtocol}
            "proxyServer" = ${ProxyServer}
            "proxyUser" = ${ProxyUser}
            "proxyUserDomain" = ${ProxyUserDomain}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to ProxySettingsRequest<PSCustomObject>

.DESCRIPTION

Convert from JSON to ProxySettingsRequest<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

ProxySettingsRequest<PSCustomObject>
#>
function ConvertFrom-JsonToProxySettingsRequest {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => ProxySettingsRequest' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in ProxySettingsRequest
        $AllProperties = ("authenticationRequired", "enableProxy", "proxyPassword", "proxyPort", "proxyProtocol", "proxyServer", "proxyUser", "proxyUserDomain")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'enableProxy' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "enableProxy"))) {
            throw "Error! JSON cannot be serialized due to the required property 'enableProxy' missing."
        } else {
            $EnableProxy = $JsonParameters.PSobject.Properties["enableProxy"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "authenticationRequired"))) { #optional property not found
            $AuthenticationRequired = $null
        } else {
            $AuthenticationRequired = $JsonParameters.PSobject.Properties["authenticationRequired"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "proxyPassword"))) { #optional property not found
            $ProxyPassword = $null
        } else {
            $ProxyPassword = $JsonParameters.PSobject.Properties["proxyPassword"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "proxyPort"))) { #optional property not found
            $ProxyPort = $null
        } else {
            $ProxyPort = $JsonParameters.PSobject.Properties["proxyPort"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "proxyProtocol"))) { #optional property not found
            $ProxyProtocol = $null
        } else {
            $ProxyProtocol = $JsonParameters.PSobject.Properties["proxyProtocol"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "proxyServer"))) { #optional property not found
            $ProxyServer = $null
        } else {
            $ProxyServer = $JsonParameters.PSobject.Properties["proxyServer"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "proxyUser"))) { #optional property not found
            $ProxyUser = $null
        } else {
            $ProxyUser = $JsonParameters.PSobject.Properties["proxyUser"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "proxyUserDomain"))) { #optional property not found
            $ProxyUserDomain = $null
        } else {
            $ProxyUserDomain = $JsonParameters.PSobject.Properties["proxyUserDomain"].value
        }

        $PSO = [PSCustomObject]@{
            "authenticationRequired" = ${AuthenticationRequired}
            "enableProxy" = ${EnableProxy}
            "proxyPassword" = ${ProxyPassword}
            "proxyPort" = ${ProxyPort}
            "proxyProtocol" = ${ProxyProtocol}
            "proxyServer" = ${ProxyServer}
            "proxyUser" = ${ProxyUser}
            "proxyUserDomain" = ${ProxyUserDomain}
        }

        return $PSO
    }

}

