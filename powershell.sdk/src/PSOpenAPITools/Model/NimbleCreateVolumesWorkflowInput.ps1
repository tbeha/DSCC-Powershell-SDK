#
# Data Services Cloud Console API
# Data Services Cloud Console API
# Version: 1.3.0
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Request body for create volume workflow

.PARAMETER AgentType
External management agent type. Defaults to 'none'. Possible values: 'none', 'smis', 'vvol', 'openstack', 'openstackv2'
.PARAMETER AppUuid
Application identifier of volume. String of up to 255 alphanumeric characters, hyphen, colon, dot and underscore are allowed. Defaults to the empty string. 
.PARAMETER Count
Number of volumes to be created.
.PARAMETER DedupeEnabled
Indicate whether dedupe is enabled. Defaults to 'false'.
.PARAMETER DownstreamPartner
Name of the downstream partner
.PARAMETER DownstreamPartnerId
ID of the downstream partner
.PARAMETER FolderId
ID of the folder holding this volume. An optional NsObjectID. A 42 digit hexadecimal int64 or the empty string. Defaults to the empty string.
.PARAMETER HostGroups
List of host group details.
.PARAMETER Limit
Limit for the volume as a percentage of volume size. Percentage as integer from 0 to 100. Defaults to the default volume limit set on group, typically 100.
.PARAMETER LimitIops
IOPS limit for this volume. If limit_iops is not specified when a volume is created, or if limit_iops is set to -1, then the volume has no IOPS limit. If limit_iops is not specified while creating a clone, IOPS limit of parent volume will be used as limit. IOPS limit should be in range [256, 4294967294] or -1 for unlimited. If both limit_iops and limit_mbps are specified, limit_mbps must not be hit before limit_iops. In other words, IOPS and MBPS limits should honor limit_iops _ampersand_amp;lt;= ((limit_mbps MB/s * 2^20 B/MB) / block_size B). By default the volume is created with unlimited iops.
.PARAMETER LimitMbps
Throughput limit for this volume in MB/s. If limit_mbps is not specified when a volume is created, or if limit_mbps is set to -1, then the volume has no MBPS limit. MBPS limit should be in range [1, 4294967294] or -1 for unlimited. If both limit_iops and limit_mbps are specified, limit_mbps must not be hit before limit_iops. In other words, IOPS and MBPS limits should honor limit_iops _ampersand_amp;lt;= ((limit_mbps MB/s * 2^20 B/MB) / block_size B). By default, the volume is created with unlimited throughput.
.PARAMETER Name
Name of the volume. String of up to 215 alphanumeric, hyphenated, colon, or period-separated characters; but cannot begin with hyphen, colon or period. This type is used for object sets containing volumes, snapshots, snapshot collections and protocol endpoints.
.PARAMETER Perfpolicy
No description available.
.PARAMETER PerfpolicyId
Identifier of the performance policy. After creating a volume, performance policy for the volume can only be changed to another performance policy with same block size. A 42 digit hexadecimal int64. Defaults to ID of the 'default' performance policy.
.PARAMETER PoolId
Identifier associated with the pool in the storage pool table. A 42 digit hexadecimal int64. Defaults to the ID of the 'default' pool.
.PARAMETER ProtectionPolicyId
Protection policy ID
.PARAMETER ProtectionPolicySchedules
Protection Policy Schedule
.PARAMETER ReplicationStartTime
Remote replication start time which  will be used to offset local snapshot start time
.PARAMETER Size
Volume size in megabytes. Size is required for creating a volume but not for cloning an existing volume.When creating a new volume, size is required. When cloning an existing volume, size defaults to that of the parent volume.
.PARAMETER VolColId
volume collection id
.PARAMETER VolColName
volume collection Name
.PARAMETER WarnLevel
Threshold for available space as a percentage of volume size below which an alert is raised. If this option is not specified, array default volume warn level setting is used to decide the warning level for this volume. Percentage as integer from 0 to 100. Defaults to the default volume warning level set on the group, typically 80.
.OUTPUTS

NimbleCreateVolumesWorkflowInput<PSCustomObject>
#>

function Initialize-NimbleCreateVolumesWorkflowInput {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${AgentType},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${AppUuid},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [Int32]
        ${Count},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${DedupeEnabled},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${DownstreamPartner},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${DownstreamPartnerId},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${FolderId},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${HostGroups},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${Limit},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${LimitIops},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${LimitMbps},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Perfpolicy},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${PerfpolicyId},
        [Parameter(Position = 14, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${PoolId},
        [Parameter(Position = 15, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ProtectionPolicyId},
        [Parameter(Position = 16, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${ProtectionPolicySchedules},
        [Parameter(Position = 17, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${ReplicationStartTime},
        [Parameter(Position = 18, ValueFromPipelineByPropertyName = $true)]
        [Int64]
        ${Size},
        [Parameter(Position = 19, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${VolColId},
        [Parameter(Position = 20, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${VolColName},
        [Parameter(Position = 21, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${WarnLevel}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => NimbleCreateVolumesWorkflowInput' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $Count) {
            throw "invalid value for 'Count', 'Count' cannot be null."
        }

        if ($null -eq $Name) {
            throw "invalid value for 'Name', 'Name' cannot be null."
        }

        if ($null -eq $Size) {
            throw "invalid value for 'Size', 'Size' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "agent_type" = ${AgentType}
            "app_uuid" = ${AppUuid}
            "count" = ${Count}
            "dedupe_enabled" = ${DedupeEnabled}
            "downstreamPartner" = ${DownstreamPartner}
            "downstreamPartnerId" = ${DownstreamPartnerId}
            "folder_id" = ${FolderId}
            "host_groups" = ${HostGroups}
            "limit" = ${Limit}
            "limit_iops" = ${LimitIops}
            "limit_mbps" = ${LimitMbps}
            "name" = ${Name}
            "perfpolicy" = ${Perfpolicy}
            "perfpolicy_id" = ${PerfpolicyId}
            "pool_id" = ${PoolId}
            "protectionPolicyId" = ${ProtectionPolicyId}
            "protectionPolicySchedules" = ${ProtectionPolicySchedules}
            "replicationStartTime" = ${ReplicationStartTime}
            "size" = ${Size}
            "volColId" = ${VolColId}
            "volColName" = ${VolColName}
            "warn_level" = ${WarnLevel}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to NimbleCreateVolumesWorkflowInput<PSCustomObject>

.DESCRIPTION

Convert from JSON to NimbleCreateVolumesWorkflowInput<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

NimbleCreateVolumesWorkflowInput<PSCustomObject>
#>
function ConvertFrom-JsonToNimbleCreateVolumesWorkflowInput {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => NimbleCreateVolumesWorkflowInput' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in NimbleCreateVolumesWorkflowInput
        $AllProperties = ("agent_type", "app_uuid", "count", "dedupe_enabled", "downstreamPartner", "downstreamPartnerId", "folder_id", "host_groups", "limit", "limit_iops", "limit_mbps", "name", "perfpolicy", "perfpolicy_id", "pool_id", "protectionPolicyId", "protectionPolicySchedules", "replicationStartTime", "size", "volColId", "volColName", "warn_level")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'count' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "count"))) {
            throw "Error! JSON cannot be serialized due to the required property 'count' missing."
        } else {
            $Count = $JsonParameters.PSobject.Properties["count"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) {
            throw "Error! JSON cannot be serialized due to the required property 'name' missing."
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "size"))) {
            throw "Error! JSON cannot be serialized due to the required property 'size' missing."
        } else {
            $Size = $JsonParameters.PSobject.Properties["size"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "agent_type"))) { #optional property not found
            $AgentType = $null
        } else {
            $AgentType = $JsonParameters.PSobject.Properties["agent_type"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "app_uuid"))) { #optional property not found
            $AppUuid = $null
        } else {
            $AppUuid = $JsonParameters.PSobject.Properties["app_uuid"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "dedupe_enabled"))) { #optional property not found
            $DedupeEnabled = $null
        } else {
            $DedupeEnabled = $JsonParameters.PSobject.Properties["dedupe_enabled"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "downstreamPartner"))) { #optional property not found
            $DownstreamPartner = $null
        } else {
            $DownstreamPartner = $JsonParameters.PSobject.Properties["downstreamPartner"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "downstreamPartnerId"))) { #optional property not found
            $DownstreamPartnerId = $null
        } else {
            $DownstreamPartnerId = $JsonParameters.PSobject.Properties["downstreamPartnerId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "folder_id"))) { #optional property not found
            $FolderId = $null
        } else {
            $FolderId = $JsonParameters.PSobject.Properties["folder_id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "host_groups"))) { #optional property not found
            $HostGroups = $null
        } else {
            $HostGroups = $JsonParameters.PSobject.Properties["host_groups"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "limit"))) { #optional property not found
            $Limit = $null
        } else {
            $Limit = $JsonParameters.PSobject.Properties["limit"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "limit_iops"))) { #optional property not found
            $LimitIops = $null
        } else {
            $LimitIops = $JsonParameters.PSobject.Properties["limit_iops"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "limit_mbps"))) { #optional property not found
            $LimitMbps = $null
        } else {
            $LimitMbps = $JsonParameters.PSobject.Properties["limit_mbps"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "perfpolicy"))) { #optional property not found
            $Perfpolicy = $null
        } else {
            $Perfpolicy = $JsonParameters.PSobject.Properties["perfpolicy"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "perfpolicy_id"))) { #optional property not found
            $PerfpolicyId = $null
        } else {
            $PerfpolicyId = $JsonParameters.PSobject.Properties["perfpolicy_id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "pool_id"))) { #optional property not found
            $PoolId = $null
        } else {
            $PoolId = $JsonParameters.PSobject.Properties["pool_id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "protectionPolicyId"))) { #optional property not found
            $ProtectionPolicyId = $null
        } else {
            $ProtectionPolicyId = $JsonParameters.PSobject.Properties["protectionPolicyId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "protectionPolicySchedules"))) { #optional property not found
            $ProtectionPolicySchedules = $null
        } else {
            $ProtectionPolicySchedules = $JsonParameters.PSobject.Properties["protectionPolicySchedules"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "replicationStartTime"))) { #optional property not found
            $ReplicationStartTime = $null
        } else {
            $ReplicationStartTime = $JsonParameters.PSobject.Properties["replicationStartTime"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "volColId"))) { #optional property not found
            $VolColId = $null
        } else {
            $VolColId = $JsonParameters.PSobject.Properties["volColId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "volColName"))) { #optional property not found
            $VolColName = $null
        } else {
            $VolColName = $JsonParameters.PSobject.Properties["volColName"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "warn_level"))) { #optional property not found
            $WarnLevel = $null
        } else {
            $WarnLevel = $JsonParameters.PSobject.Properties["warn_level"].value
        }

        $PSO = [PSCustomObject]@{
            "agent_type" = ${AgentType}
            "app_uuid" = ${AppUuid}
            "count" = ${Count}
            "dedupe_enabled" = ${DedupeEnabled}
            "downstreamPartner" = ${DownstreamPartner}
            "downstreamPartnerId" = ${DownstreamPartnerId}
            "folder_id" = ${FolderId}
            "host_groups" = ${HostGroups}
            "limit" = ${Limit}
            "limit_iops" = ${LimitIops}
            "limit_mbps" = ${LimitMbps}
            "name" = ${Name}
            "perfpolicy" = ${Perfpolicy}
            "perfpolicy_id" = ${PerfpolicyId}
            "pool_id" = ${PoolId}
            "protectionPolicyId" = ${ProtectionPolicyId}
            "protectionPolicySchedules" = ${ProtectionPolicySchedules}
            "replicationStartTime" = ${ReplicationStartTime}
            "size" = ${Size}
            "volColId" = ${VolColId}
            "volColName" = ${VolColName}
            "warn_level" = ${WarnLevel}
        }

        return $PSO
    }

}

