#
# Data Services Cloud Console API
# Data Services Cloud Console API
# Version: 1.3.0
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

power supply unit details

.PARAMETER PsuFwVersion
Firmware version of the PSU
.PARAMETER PsuId
Specifies the id of the psu
.PARAMETER PsuLocation
Specifies the name of the PSU location
.PARAMETER PsuName
Specifies the name of the PSU
.PARAMETER PsuState
Health Status of the psu
.PARAMETER PsuUuid
Specifies the uuid of the PSU
.OUTPUTS

PowerSupplyUnit<PSCustomObject>
#>

function Initialize-PowerSupplyUnit {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${PsuFwVersion},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${PsuId},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${PsuLocation},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${PsuName},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${PsuState},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${PsuUuid}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => PowerSupplyUnit' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "psuFwVersion" = ${PsuFwVersion}
            "psuId" = ${PsuId}
            "psuLocation" = ${PsuLocation}
            "psuName" = ${PsuName}
            "psuState" = ${PsuState}
            "psuUuid" = ${PsuUuid}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to PowerSupplyUnit<PSCustomObject>

.DESCRIPTION

Convert from JSON to PowerSupplyUnit<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

PowerSupplyUnit<PSCustomObject>
#>
function ConvertFrom-JsonToPowerSupplyUnit {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => PowerSupplyUnit' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in PowerSupplyUnit
        $AllProperties = ("psuFwVersion", "psuId", "psuLocation", "psuName", "psuState", "psuUuid")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "psuFwVersion"))) { #optional property not found
            $PsuFwVersion = $null
        } else {
            $PsuFwVersion = $JsonParameters.PSobject.Properties["psuFwVersion"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "psuId"))) { #optional property not found
            $PsuId = $null
        } else {
            $PsuId = $JsonParameters.PSobject.Properties["psuId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "psuLocation"))) { #optional property not found
            $PsuLocation = $null
        } else {
            $PsuLocation = $JsonParameters.PSobject.Properties["psuLocation"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "psuName"))) { #optional property not found
            $PsuName = $null
        } else {
            $PsuName = $JsonParameters.PSobject.Properties["psuName"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "psuState"))) { #optional property not found
            $PsuState = $null
        } else {
            $PsuState = $JsonParameters.PSobject.Properties["psuState"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "psuUuid"))) { #optional property not found
            $PsuUuid = $null
        } else {
            $PsuUuid = $JsonParameters.PSobject.Properties["psuUuid"].value
        }

        $PSO = [PSCustomObject]@{
            "psuFwVersion" = ${PsuFwVersion}
            "psuId" = ${PsuId}
            "psuLocation" = ${PsuLocation}
            "psuName" = ${PsuName}
            "psuState" = ${PsuState}
            "psuUuid" = ${PsuUuid}
        }

        return $PSO
    }

}

