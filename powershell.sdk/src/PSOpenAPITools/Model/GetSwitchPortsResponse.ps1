#
# Data Services Cloud Console API
# Data Services Cloud Console API
# Version: 1.3.0
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Response schema

.PARAMETER CustomerId
The customer application identifier
.PARAMETER Generation
This value updates when the resource is updated and  can be used as a short way to determine if a resource has  changed or which of the two different copies of a resource is more up to date. 
.PARAMETER Id
Specifies the id of the switch port
.PARAMETER Model
Model of the switch
.PARAMETER Mtu
Maximum transmission uint (MTU) size
.PARAMETER Name
Specifies the name of the switch port
.PARAMETER ResourceUri
Resource URI of the switch ports
.PARAMETER Speed
Speed of the switch port
.PARAMETER State
State of the switch port
.PARAMETER SwitchName
Name of the switch
.PARAMETER Uuid
Specifies the uuid of the switch port
.OUTPUTS

GetSwitchPortsResponse<PSCustomObject>
#>

function Initialize-GetSwitchPortsResponse {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${CustomerId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${Generation},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Id},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Model},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Mtu},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ResourceUri},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Speed},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${State},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SwitchName},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Uuid}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => GetSwitchPortsResponse' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($Generation -and $Generation -lt 0) {
          throw "invalid value for 'Generation', must be greater than or equal to 0."
        }


        $PSO = [PSCustomObject]@{
            "customerId" = ${CustomerId}
            "generation" = ${Generation}
            "id" = ${Id}
            "model" = ${Model}
            "mtu" = ${Mtu}
            "name" = ${Name}
            "resourceUri" = ${ResourceUri}
            "speed" = ${Speed}
            "state" = ${State}
            "switchName" = ${SwitchName}
            "uuid" = ${Uuid}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to GetSwitchPortsResponse<PSCustomObject>

.DESCRIPTION

Convert from JSON to GetSwitchPortsResponse<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

GetSwitchPortsResponse<PSCustomObject>
#>
function ConvertFrom-JsonToGetSwitchPortsResponse {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => GetSwitchPortsResponse' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in GetSwitchPortsResponse
        $AllProperties = ("customerId", "generation", "id", "model", "mtu", "name", "resourceUri", "speed", "state", "switchName", "uuid")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "customerId"))) { #optional property not found
            $CustomerId = $null
        } else {
            $CustomerId = $JsonParameters.PSobject.Properties["customerId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "generation"))) { #optional property not found
            $Generation = $null
        } else {
            $Generation = $JsonParameters.PSobject.Properties["generation"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) { #optional property not found
            $Id = $null
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "model"))) { #optional property not found
            $Model = $null
        } else {
            $Model = $JsonParameters.PSobject.Properties["model"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "mtu"))) { #optional property not found
            $Mtu = $null
        } else {
            $Mtu = $JsonParameters.PSobject.Properties["mtu"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) { #optional property not found
            $Name = $null
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "resourceUri"))) { #optional property not found
            $ResourceUri = $null
        } else {
            $ResourceUri = $JsonParameters.PSobject.Properties["resourceUri"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "speed"))) { #optional property not found
            $Speed = $null
        } else {
            $Speed = $JsonParameters.PSobject.Properties["speed"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "state"))) { #optional property not found
            $State = $null
        } else {
            $State = $JsonParameters.PSobject.Properties["state"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "switchName"))) { #optional property not found
            $SwitchName = $null
        } else {
            $SwitchName = $JsonParameters.PSobject.Properties["switchName"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "uuid"))) { #optional property not found
            $Uuid = $null
        } else {
            $Uuid = $JsonParameters.PSobject.Properties["uuid"].value
        }

        $PSO = [PSCustomObject]@{
            "customerId" = ${CustomerId}
            "generation" = ${Generation}
            "id" = ${Id}
            "model" = ${Model}
            "mtu" = ${Mtu}
            "name" = ${Name}
            "resourceUri" = ${ResourceUri}
            "speed" = ${Speed}
            "state" = ${State}
            "switchName" = ${SwitchName}
            "uuid" = ${Uuid}
        }

        return $PSO
    }

}

