#
# Data Services Cloud Console API
# Data Services Cloud Console API
# Version: 1.3.0
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Single Node details

.PARAMETER Build
build version
.PARAMETER CustomerId
The customer application identifier
.PARAMETER Enclosure
No description available.
.PARAMETER FileServer
No description available.
.PARAMETER Generation
This value updates when the resource is updated and can be used as a short way to determine if a resource has changed or which of two different copies of a resource is more up to date. 
.PARAMETER Id
Specifies the node id
.PARAMETER Ip
Specifies the Node IP
.PARAMETER IsMgmt
Specifies whether this node hosts the Management server
.PARAMETER Model
Model of the node
.PARAMETER Name
Specifies the name of the node
.PARAMETER OsVersion
Operating system version
.PARAMETER Position
Specifies the position of the node
.PARAMETER ResourceUri
Specifies the node resource Uri of the file server which provides the reference to this resource
.PARAMETER Serial
The serial number of the node
.PARAMETER State
Health Status of the node
.PARAMETER Uuid
Specifies the node uuid
.OUTPUTS

GetNodeResponse<PSCustomObject>
#>

function Initialize-GetNodeResponse {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Build},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${CustomerId},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Enclosure},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${FileServer},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${Generation},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${Id},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Ip},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${IsMgmt},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Model},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${OsVersion},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Position},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ResourceUri},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Serial},
        [Parameter(Position = 14, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("INIT", "ACTIVATING", "ACTIVE", "INACTIVE", "DEACTIVATING", "FAILED", "FAILING", "UNKNOWN", "")]
        [String]
        ${State},
        [Parameter(Position = 15, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Uuid}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => GetNodeResponse' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($Generation -and $Generation -lt 0) {
          throw "invalid value for 'Generation', must be greater than or equal to 0."
        }


        $PSO = [PSCustomObject]@{
            "build" = ${Build}
            "customerId" = ${CustomerId}
            "enclosure" = ${Enclosure}
            "fileServer" = ${FileServer}
            "generation" = ${Generation}
            "id" = ${Id}
            "ip" = ${Ip}
            "isMgmt" = ${IsMgmt}
            "model" = ${Model}
            "name" = ${Name}
            "osVersion" = ${OsVersion}
            "position" = ${Position}
            "resourceUri" = ${ResourceUri}
            "serial" = ${Serial}
            "state" = ${State}
            "uuid" = ${Uuid}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to GetNodeResponse<PSCustomObject>

.DESCRIPTION

Convert from JSON to GetNodeResponse<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

GetNodeResponse<PSCustomObject>
#>
function ConvertFrom-JsonToGetNodeResponse {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => GetNodeResponse' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in GetNodeResponse
        $AllProperties = ("build", "customerId", "enclosure", "fileServer", "generation", "id", "ip", "isMgmt", "model", "name", "osVersion", "position", "resourceUri", "serial", "state", "uuid")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "build"))) { #optional property not found
            $Build = $null
        } else {
            $Build = $JsonParameters.PSobject.Properties["build"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "customerId"))) { #optional property not found
            $CustomerId = $null
        } else {
            $CustomerId = $JsonParameters.PSobject.Properties["customerId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "enclosure"))) { #optional property not found
            $Enclosure = $null
        } else {
            $Enclosure = $JsonParameters.PSobject.Properties["enclosure"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "fileServer"))) { #optional property not found
            $FileServer = $null
        } else {
            $FileServer = $JsonParameters.PSobject.Properties["fileServer"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "generation"))) { #optional property not found
            $Generation = $null
        } else {
            $Generation = $JsonParameters.PSobject.Properties["generation"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) { #optional property not found
            $Id = $null
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ip"))) { #optional property not found
            $Ip = $null
        } else {
            $Ip = $JsonParameters.PSobject.Properties["ip"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "isMgmt"))) { #optional property not found
            $IsMgmt = $null
        } else {
            $IsMgmt = $JsonParameters.PSobject.Properties["isMgmt"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "model"))) { #optional property not found
            $Model = $null
        } else {
            $Model = $JsonParameters.PSobject.Properties["model"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) { #optional property not found
            $Name = $null
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "osVersion"))) { #optional property not found
            $OsVersion = $null
        } else {
            $OsVersion = $JsonParameters.PSobject.Properties["osVersion"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "position"))) { #optional property not found
            $Position = $null
        } else {
            $Position = $JsonParameters.PSobject.Properties["position"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "resourceUri"))) { #optional property not found
            $ResourceUri = $null
        } else {
            $ResourceUri = $JsonParameters.PSobject.Properties["resourceUri"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "serial"))) { #optional property not found
            $Serial = $null
        } else {
            $Serial = $JsonParameters.PSobject.Properties["serial"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "state"))) { #optional property not found
            $State = $null
        } else {
            $State = $JsonParameters.PSobject.Properties["state"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "uuid"))) { #optional property not found
            $Uuid = $null
        } else {
            $Uuid = $JsonParameters.PSobject.Properties["uuid"].value
        }

        $PSO = [PSCustomObject]@{
            "build" = ${Build}
            "customerId" = ${CustomerId}
            "enclosure" = ${Enclosure}
            "fileServer" = ${FileServer}
            "generation" = ${Generation}
            "id" = ${Id}
            "ip" = ${Ip}
            "isMgmt" = ${IsMgmt}
            "model" = ${Model}
            "name" = ${Name}
            "osVersion" = ${OsVersion}
            "position" = ${Position}
            "resourceUri" = ${ResourceUri}
            "serial" = ${Serial}
            "state" = ${State}
            "uuid" = ${Uuid}
        }

        return $PSO
    }

}

