#
# Data Services Cloud Console API
# Data Services Cloud Console API
# Version: 1.4.0
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Create Nimble access-control record input.

.PARAMETER ApplyTo
External management agent type. Possible values:'volume', 'pe', 'vvol_volume', 'vvol_snapshot', 'snapshot', 'both'.
.PARAMETER ChapUserId
Identifier for the CHAP user.
.PARAMETER InitiatorGroupId
Identifier for the initiator group.
.PARAMETER Lun
If this access control record applies to a regular volume, this attribute is the volume's LUN (Logical Unit Number). If the access protocol is iSCSI, the LUN will be 0. However, if the access protocol is Fibre Channel, the LUN will be in the range from 0 to 2047. If this record applies to a Virtual Volume, this attribute is the volume's secondary LUN in the range from 0 to 399999, for both iSCSI and Fibre Channel. If the record applies to a OpenstackV2 volume, the LUN will be in the range from 0 to 2047, for both iSCSI and Fibre Channel. If this record applies to a protocol endpoint or only a snapshot, this attribute is not meaningful and is set to null.
.PARAMETER PeId
Identifier for the protocol endpoint this access control record applies to.
.PARAMETER PeIds
List of candidate protocol endpoints that may be used to access the Virtual Volume. One of them will be selected for the access control record. This field is required only when creating an access control record for a Virtual Volume.
.PARAMETER SnapId
Identifier for the snapshot this access control record applies to.
.PARAMETER SystemUid
Rest ID of the array containing this controller. `Filter, Sort`
.PARAMETER VolId
Identifier for the volume this access control record applies to.
.OUTPUTS

NimbleCreateAccessControlRecordInput<PSCustomObject>
#>

function Initialize-NimbleCreateAccessControlRecordInput {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ApplyTo},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ChapUserId},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${InitiatorGroupId},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${Lun},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${PeId},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${PeIds},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SnapId},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SystemUid},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${VolId}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => NimbleCreateAccessControlRecordInput' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "apply_to" = ${ApplyTo}
            "chap_user_id" = ${ChapUserId}
            "initiator_group_id" = ${InitiatorGroupId}
            "lun" = ${Lun}
            "pe_id" = ${PeId}
            "pe_ids" = ${PeIds}
            "snap_id" = ${SnapId}
            "systemUid" = ${SystemUid}
            "vol_id" = ${VolId}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to NimbleCreateAccessControlRecordInput<PSCustomObject>

.DESCRIPTION

Convert from JSON to NimbleCreateAccessControlRecordInput<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

NimbleCreateAccessControlRecordInput<PSCustomObject>
#>
function ConvertFrom-JsonToNimbleCreateAccessControlRecordInput {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => NimbleCreateAccessControlRecordInput' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in NimbleCreateAccessControlRecordInput
        $AllProperties = ("apply_to", "chap_user_id", "initiator_group_id", "lun", "pe_id", "pe_ids", "snap_id", "systemUid", "vol_id")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "apply_to"))) { #optional property not found
            $ApplyTo = $null
        } else {
            $ApplyTo = $JsonParameters.PSobject.Properties["apply_to"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "chap_user_id"))) { #optional property not found
            $ChapUserId = $null
        } else {
            $ChapUserId = $JsonParameters.PSobject.Properties["chap_user_id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "initiator_group_id"))) { #optional property not found
            $InitiatorGroupId = $null
        } else {
            $InitiatorGroupId = $JsonParameters.PSobject.Properties["initiator_group_id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "lun"))) { #optional property not found
            $Lun = $null
        } else {
            $Lun = $JsonParameters.PSobject.Properties["lun"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "pe_id"))) { #optional property not found
            $PeId = $null
        } else {
            $PeId = $JsonParameters.PSobject.Properties["pe_id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "pe_ids"))) { #optional property not found
            $PeIds = $null
        } else {
            $PeIds = $JsonParameters.PSobject.Properties["pe_ids"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "snap_id"))) { #optional property not found
            $SnapId = $null
        } else {
            $SnapId = $JsonParameters.PSobject.Properties["snap_id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "systemUid"))) { #optional property not found
            $SystemUid = $null
        } else {
            $SystemUid = $JsonParameters.PSobject.Properties["systemUid"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "vol_id"))) { #optional property not found
            $VolId = $null
        } else {
            $VolId = $JsonParameters.PSobject.Properties["vol_id"].value
        }

        $PSO = [PSCustomObject]@{
            "apply_to" = ${ApplyTo}
            "chap_user_id" = ${ChapUserId}
            "initiator_group_id" = ${InitiatorGroupId}
            "lun" = ${Lun}
            "pe_id" = ${PeId}
            "pe_ids" = ${PeIds}
            "snap_id" = ${SnapId}
            "systemUid" = ${SystemUid}
            "vol_id" = ${VolId}
        }

        return $PSO
    }

}

