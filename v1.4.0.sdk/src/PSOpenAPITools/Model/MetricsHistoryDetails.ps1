#
# Data Services Cloud Console API
# Data Services Cloud Console API
# Version: 1.4.0
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Describes each file-server metrics

.PARAMETER NumberOfFilesAndDirectories
Gives the file/directories number on a specific file-server
.PARAMETER ReadIopsPerSec
Gives the read IOPS per sec value on a specific file-server
.PARAMETER ReadLatencyInMillisec
Gives the Read latency (millisecs) value on a specific file-server
.PARAMETER ReadThroughputInMBPerSec
Gives the Read Throughput(in MB) / sec value on a specific file-server
.PARAMETER TimeStamp
epoch timestamp
.PARAMETER TotalCapacityInGiB
Gives Total capacity (GiB) value on a specific file-server
.PARAMETER TotalIopsPerSec
Gives the total IOPS per sec value on a specific file-server
.PARAMETER TotalLatencyInMillisec
Gives the total latency (millisecs) value on a specific file-server
.PARAMETER TotalThroughputInMBPerSec
Gives the Throughput(in MB) / sec value on a specific file-server
.PARAMETER UsedCapacityInGiB
Gives Used capacity (GiB) value on a specific file-server
.PARAMETER UsedCapacityPercentage
Gives used capacity percentage
.PARAMETER WriteIopsPerSec
Gives Write IOPS per sec value on a specific file-server
.PARAMETER WriteLatencyInMillisec
Gives Write Latency in (millisecs) on a specific file-server
.PARAMETER WriteThroughputInMBPerSec
Gives the Write Throughput(in MB) / sec value on a specific file-server
.OUTPUTS

MetricsHistoryDetails<PSCustomObject>
#>

function Initialize-MetricsHistoryDetails {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Double]]
        ${NumberOfFilesAndDirectories},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Double]]
        ${ReadIopsPerSec},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Double]]
        ${ReadLatencyInMillisec},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Double]]
        ${ReadThroughputInMBPerSec},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${TimeStamp},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Double]]
        ${TotalCapacityInGiB},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Double]]
        ${TotalIopsPerSec},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Double]]
        ${TotalLatencyInMillisec},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Double]]
        ${TotalThroughputInMBPerSec},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Double]]
        ${UsedCapacityInGiB},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Double]]
        ${UsedCapacityPercentage},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Double]]
        ${WriteIopsPerSec},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Double]]
        ${WriteLatencyInMillisec},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Double]]
        ${WriteThroughputInMBPerSec}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => MetricsHistoryDetails' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "numberOfFilesAndDirectories" = ${NumberOfFilesAndDirectories}
            "readIopsPerSec" = ${ReadIopsPerSec}
            "readLatencyInMillisec" = ${ReadLatencyInMillisec}
            "readThroughputInMBPerSec" = ${ReadThroughputInMBPerSec}
            "timeStamp" = ${TimeStamp}
            "totalCapacityInGiB" = ${TotalCapacityInGiB}
            "totalIopsPerSec" = ${TotalIopsPerSec}
            "totalLatencyInMillisec" = ${TotalLatencyInMillisec}
            "totalThroughputInMBPerSec" = ${TotalThroughputInMBPerSec}
            "usedCapacityInGiB" = ${UsedCapacityInGiB}
            "usedCapacityPercentage" = ${UsedCapacityPercentage}
            "writeIopsPerSec" = ${WriteIopsPerSec}
            "writeLatencyInMillisec" = ${WriteLatencyInMillisec}
            "writeThroughputInMBPerSec" = ${WriteThroughputInMBPerSec}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to MetricsHistoryDetails<PSCustomObject>

.DESCRIPTION

Convert from JSON to MetricsHistoryDetails<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

MetricsHistoryDetails<PSCustomObject>
#>
function ConvertFrom-JsonToMetricsHistoryDetails {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => MetricsHistoryDetails' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in MetricsHistoryDetails
        $AllProperties = ("numberOfFilesAndDirectories", "readIopsPerSec", "readLatencyInMillisec", "readThroughputInMBPerSec", "timeStamp", "totalCapacityInGiB", "totalIopsPerSec", "totalLatencyInMillisec", "totalThroughputInMBPerSec", "usedCapacityInGiB", "usedCapacityPercentage", "writeIopsPerSec", "writeLatencyInMillisec", "writeThroughputInMBPerSec")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "numberOfFilesAndDirectories"))) { #optional property not found
            $NumberOfFilesAndDirectories = $null
        } else {
            $NumberOfFilesAndDirectories = $JsonParameters.PSobject.Properties["numberOfFilesAndDirectories"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "readIopsPerSec"))) { #optional property not found
            $ReadIopsPerSec = $null
        } else {
            $ReadIopsPerSec = $JsonParameters.PSobject.Properties["readIopsPerSec"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "readLatencyInMillisec"))) { #optional property not found
            $ReadLatencyInMillisec = $null
        } else {
            $ReadLatencyInMillisec = $JsonParameters.PSobject.Properties["readLatencyInMillisec"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "readThroughputInMBPerSec"))) { #optional property not found
            $ReadThroughputInMBPerSec = $null
        } else {
            $ReadThroughputInMBPerSec = $JsonParameters.PSobject.Properties["readThroughputInMBPerSec"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "timeStamp"))) { #optional property not found
            $TimeStamp = $null
        } else {
            $TimeStamp = $JsonParameters.PSobject.Properties["timeStamp"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "totalCapacityInGiB"))) { #optional property not found
            $TotalCapacityInGiB = $null
        } else {
            $TotalCapacityInGiB = $JsonParameters.PSobject.Properties["totalCapacityInGiB"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "totalIopsPerSec"))) { #optional property not found
            $TotalIopsPerSec = $null
        } else {
            $TotalIopsPerSec = $JsonParameters.PSobject.Properties["totalIopsPerSec"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "totalLatencyInMillisec"))) { #optional property not found
            $TotalLatencyInMillisec = $null
        } else {
            $TotalLatencyInMillisec = $JsonParameters.PSobject.Properties["totalLatencyInMillisec"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "totalThroughputInMBPerSec"))) { #optional property not found
            $TotalThroughputInMBPerSec = $null
        } else {
            $TotalThroughputInMBPerSec = $JsonParameters.PSobject.Properties["totalThroughputInMBPerSec"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "usedCapacityInGiB"))) { #optional property not found
            $UsedCapacityInGiB = $null
        } else {
            $UsedCapacityInGiB = $JsonParameters.PSobject.Properties["usedCapacityInGiB"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "usedCapacityPercentage"))) { #optional property not found
            $UsedCapacityPercentage = $null
        } else {
            $UsedCapacityPercentage = $JsonParameters.PSobject.Properties["usedCapacityPercentage"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "writeIopsPerSec"))) { #optional property not found
            $WriteIopsPerSec = $null
        } else {
            $WriteIopsPerSec = $JsonParameters.PSobject.Properties["writeIopsPerSec"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "writeLatencyInMillisec"))) { #optional property not found
            $WriteLatencyInMillisec = $null
        } else {
            $WriteLatencyInMillisec = $JsonParameters.PSobject.Properties["writeLatencyInMillisec"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "writeThroughputInMBPerSec"))) { #optional property not found
            $WriteThroughputInMBPerSec = $null
        } else {
            $WriteThroughputInMBPerSec = $JsonParameters.PSobject.Properties["writeThroughputInMBPerSec"].value
        }

        $PSO = [PSCustomObject]@{
            "numberOfFilesAndDirectories" = ${NumberOfFilesAndDirectories}
            "readIopsPerSec" = ${ReadIopsPerSec}
            "readLatencyInMillisec" = ${ReadLatencyInMillisec}
            "readThroughputInMBPerSec" = ${ReadThroughputInMBPerSec}
            "timeStamp" = ${TimeStamp}
            "totalCapacityInGiB" = ${TotalCapacityInGiB}
            "totalIopsPerSec" = ${TotalIopsPerSec}
            "totalLatencyInMillisec" = ${TotalLatencyInMillisec}
            "totalThroughputInMBPerSec" = ${TotalThroughputInMBPerSec}
            "usedCapacityInGiB" = ${UsedCapacityInGiB}
            "usedCapacityPercentage" = ${UsedCapacityPercentage}
            "writeIopsPerSec" = ${WriteIopsPerSec}
            "writeLatencyInMillisec" = ${WriteLatencyInMillisec}
            "writeThroughputInMBPerSec" = ${WriteThroughputInMBPerSec}
        }

        return $PSO
    }

}

