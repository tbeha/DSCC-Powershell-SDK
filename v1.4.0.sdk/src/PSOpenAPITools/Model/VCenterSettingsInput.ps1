#
# Data Services Cloud Console API
# Data Services Cloud Console API
# Version: 1.4.0
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Request body to add vCenter Settings

.PARAMETER CertChainPem
Certificate chain of the VCenter server as PEM data
.PARAMETER Description
Description of the vCenter setting
.PARAMETER Inetaddress
Host name or IP address of vCenter server
.PARAMETER Name
Name of the vCenter setting
.PARAMETER Password
Password to login to the vCenter server
.PARAMETER Port
Port number of the vCenter server.
.PARAMETER Username
Username to login to the vCenter server
.OUTPUTS

VCenterSettingsInput<PSCustomObject>
#>

function Initialize-VCenterSettingsInput {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${CertChainPem},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Description},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Inetaddress},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Password},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [Int64]
        ${Port},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Username}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => VCenterSettingsInput' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $Inetaddress) {
            throw "invalid value for 'Inetaddress', 'Inetaddress' cannot be null."
        }

        if ($null -eq $Name) {
            throw "invalid value for 'Name', 'Name' cannot be null."
        }

        if ($null -eq $Password) {
            throw "invalid value for 'Password', 'Password' cannot be null."
        }

        if ($null -eq $Port) {
            throw "invalid value for 'Port', 'Port' cannot be null."
        }

        if ($null -eq $Username) {
            throw "invalid value for 'Username', 'Username' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "certChainPem" = ${CertChainPem}
            "description" = ${Description}
            "inetaddress" = ${Inetaddress}
            "name" = ${Name}
            "password" = ${Password}
            "port" = ${Port}
            "username" = ${Username}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to VCenterSettingsInput<PSCustomObject>

.DESCRIPTION

Convert from JSON to VCenterSettingsInput<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

VCenterSettingsInput<PSCustomObject>
#>
function ConvertFrom-JsonToVCenterSettingsInput {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => VCenterSettingsInput' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in VCenterSettingsInput
        $AllProperties = ("certChainPem", "description", "inetaddress", "name", "password", "port", "username")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'inetaddress' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "inetaddress"))) {
            throw "Error! JSON cannot be serialized due to the required property 'inetaddress' missing."
        } else {
            $Inetaddress = $JsonParameters.PSobject.Properties["inetaddress"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) {
            throw "Error! JSON cannot be serialized due to the required property 'name' missing."
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "password"))) {
            throw "Error! JSON cannot be serialized due to the required property 'password' missing."
        } else {
            $Password = $JsonParameters.PSobject.Properties["password"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "port"))) {
            throw "Error! JSON cannot be serialized due to the required property 'port' missing."
        } else {
            $Port = $JsonParameters.PSobject.Properties["port"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "username"))) {
            throw "Error! JSON cannot be serialized due to the required property 'username' missing."
        } else {
            $Username = $JsonParameters.PSobject.Properties["username"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "certChainPem"))) { #optional property not found
            $CertChainPem = $null
        } else {
            $CertChainPem = $JsonParameters.PSobject.Properties["certChainPem"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "description"))) { #optional property not found
            $Description = $null
        } else {
            $Description = $JsonParameters.PSobject.Properties["description"].value
        }

        $PSO = [PSCustomObject]@{
            "certChainPem" = ${CertChainPem}
            "description" = ${Description}
            "inetaddress" = ${Inetaddress}
            "name" = ${Name}
            "password" = ${Password}
            "port" = ${Port}
            "username" = ${Username}
        }

        return $PSO
    }

}

