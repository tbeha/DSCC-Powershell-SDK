#
# Data Services Cloud Console API
# Data Services Cloud Console API
# Version: 1.4.0
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Request body to configure quorum witness

.PARAMETER Parameters
No description available.
.PARAMETER ReplicationPartnerSystemId
SystemId of target replication partner
.PARAMETER SrcReplicationId
Id of source replication partner on which quorum witness is to be configured
.PARAMETER StartQuorumWitness
Specifies start/stop Quorum Witness connectivity on the storage system. If set true, ATF configuration is activated. If set false, ATF configuration is deactivated.
.PARAMETER TargetReplicationId
Id of target replication partner on which quorum witness is to be configured
.OUTPUTS

CreateQuorumWitnessInput<PSCustomObject>
#>

function Initialize-CreateQuorumWitnessInput {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Parameters},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ReplicationPartnerSystemId},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SrcReplicationId},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${StartQuorumWitness},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${TargetReplicationId}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => CreateQuorumWitnessInput' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $Parameters) {
            throw "invalid value for 'Parameters', 'Parameters' cannot be null."
        }

        if ($null -eq $ReplicationPartnerSystemId) {
            throw "invalid value for 'ReplicationPartnerSystemId', 'ReplicationPartnerSystemId' cannot be null."
        }

        if ($null -eq $SrcReplicationId) {
            throw "invalid value for 'SrcReplicationId', 'SrcReplicationId' cannot be null."
        }

        if ($null -eq $TargetReplicationId) {
            throw "invalid value for 'TargetReplicationId', 'TargetReplicationId' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "parameters" = ${Parameters}
            "replicationPartnerSystemId" = ${ReplicationPartnerSystemId}
            "srcReplicationId" = ${SrcReplicationId}
            "startQuorumWitness" = ${StartQuorumWitness}
            "targetReplicationId" = ${TargetReplicationId}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to CreateQuorumWitnessInput<PSCustomObject>

.DESCRIPTION

Convert from JSON to CreateQuorumWitnessInput<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

CreateQuorumWitnessInput<PSCustomObject>
#>
function ConvertFrom-JsonToCreateQuorumWitnessInput {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => CreateQuorumWitnessInput' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in CreateQuorumWitnessInput
        $AllProperties = ("parameters", "replicationPartnerSystemId", "srcReplicationId", "startQuorumWitness", "targetReplicationId")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'parameters' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "parameters"))) {
            throw "Error! JSON cannot be serialized due to the required property 'parameters' missing."
        } else {
            $Parameters = $JsonParameters.PSobject.Properties["parameters"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "replicationPartnerSystemId"))) {
            throw "Error! JSON cannot be serialized due to the required property 'replicationPartnerSystemId' missing."
        } else {
            $ReplicationPartnerSystemId = $JsonParameters.PSobject.Properties["replicationPartnerSystemId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "srcReplicationId"))) {
            throw "Error! JSON cannot be serialized due to the required property 'srcReplicationId' missing."
        } else {
            $SrcReplicationId = $JsonParameters.PSobject.Properties["srcReplicationId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "targetReplicationId"))) {
            throw "Error! JSON cannot be serialized due to the required property 'targetReplicationId' missing."
        } else {
            $TargetReplicationId = $JsonParameters.PSobject.Properties["targetReplicationId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "startQuorumWitness"))) { #optional property not found
            $StartQuorumWitness = $null
        } else {
            $StartQuorumWitness = $JsonParameters.PSobject.Properties["startQuorumWitness"].value
        }

        $PSO = [PSCustomObject]@{
            "parameters" = ${Parameters}
            "replicationPartnerSystemId" = ${ReplicationPartnerSystemId}
            "srcReplicationId" = ${SrcReplicationId}
            "startQuorumWitness" = ${StartQuorumWitness}
            "targetReplicationId" = ${TargetReplicationId}
        }

        return $PSO
    }

}

