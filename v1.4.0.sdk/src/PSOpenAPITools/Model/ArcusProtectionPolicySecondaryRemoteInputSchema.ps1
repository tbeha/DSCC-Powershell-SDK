#
# Data Services Cloud Console API
# Data Services Cloud Console API
# Version: 1.4.0
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER PartnerId
Remote partner ID
.PARAMETER PartnerName
Remote partner name
.PARAMETER ReplicationType
Replication type. Supported type is periodic only. Periodic replication (Asynchronous protection policy) provides protection from array or site failure with the user defined RPO.
.OUTPUTS

ArcusProtectionPolicySecondaryRemoteInputSchema<PSCustomObject>
#>

function Initialize-ArcusProtectionPolicySecondaryRemoteInputSchema {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${PartnerId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${PartnerName},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("periodic")]
        [String]
        ${ReplicationType}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => ArcusProtectionPolicySecondaryRemoteInputSchema' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $PartnerId) {
            throw "invalid value for 'PartnerId', 'PartnerId' cannot be null."
        }

        if ($null -eq $PartnerName) {
            throw "invalid value for 'PartnerName', 'PartnerName' cannot be null."
        }

        if ($null -eq $ReplicationType) {
            throw "invalid value for 'ReplicationType', 'ReplicationType' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "partnerId" = ${PartnerId}
            "partnerName" = ${PartnerName}
            "replicationType" = ${ReplicationType}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to ArcusProtectionPolicySecondaryRemoteInputSchema<PSCustomObject>

.DESCRIPTION

Convert from JSON to ArcusProtectionPolicySecondaryRemoteInputSchema<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

ArcusProtectionPolicySecondaryRemoteInputSchema<PSCustomObject>
#>
function ConvertFrom-JsonToArcusProtectionPolicySecondaryRemoteInputSchema {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => ArcusProtectionPolicySecondaryRemoteInputSchema' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in ArcusProtectionPolicySecondaryRemoteInputSchema
        $AllProperties = ("partnerId", "partnerName", "replicationType")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'partnerId' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "partnerId"))) {
            throw "Error! JSON cannot be serialized due to the required property 'partnerId' missing."
        } else {
            $PartnerId = $JsonParameters.PSobject.Properties["partnerId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "partnerName"))) {
            throw "Error! JSON cannot be serialized due to the required property 'partnerName' missing."
        } else {
            $PartnerName = $JsonParameters.PSobject.Properties["partnerName"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "replicationType"))) {
            throw "Error! JSON cannot be serialized due to the required property 'replicationType' missing."
        } else {
            $ReplicationType = $JsonParameters.PSobject.Properties["replicationType"].value
        }

        $PSO = [PSCustomObject]@{
            "partnerId" = ${PartnerId}
            "partnerName" = ${PartnerName}
            "replicationType" = ${ReplicationType}
        }

        return $PSO
    }

}

