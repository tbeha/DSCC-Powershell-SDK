#
# Data Services Cloud Console API
# Data Services Cloud Console API
# Version: 1.4.0
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER AssociatedLinks
Associated Links Details
.PARAMETER ChargeLevel
Battery charge level.
.PARAMETER ConsoleUri
consoleUri for detailed storage object
.PARAMETER CustomerId
customerId
.PARAMETER DischargeLED
No description available.
.PARAMETER Displayname
Name to be used for display purposes
.PARAMETER Domain
Domain that the resource belongs to
.PARAMETER ExpirationDate
No description available.
.PARAMETER FaultLED
No description available.
.PARAMETER FullyCharged
Indicates if battery is fully charged or not
.PARAMETER Generation
generation
.PARAMETER Id
Unique Identifier of the resource.
.PARAMETER Life
Life of the battery
.PARAMETER LocateEnabled
Indicates if the locate beacon is enabled or not
.PARAMETER Manufacturing
No description available.
.PARAMETER MaxLife
Maximum life of the battery
.PARAMETER Name
Name of the resource.
.PARAMETER NodeBatteryId
Numeric ID of the resource
.PARAMETER PowerSupplyId
Power supply ID for this battery.
.PARAMETER PrimaryNodeId
Primary node ID.
.PARAMETER RequestUri
requestUri for detailed node battery object
.PARAMETER ResourceUri
resourceUri for detailed node battery object
.PARAMETER SafeToRemove
Indicates if the component is safe to remove
.PARAMETER SecondaryNodeId
Secondary node ID
.PARAMETER ServiceLED
No description available.
.PARAMETER State
No description available.
.PARAMETER StatusLED
No description available.
.PARAMETER SystemId
systemId/Serial Number  of the array.
.PARAMETER TestInProgress
Indicates if test is in progress or not
.PARAMETER TimeToCharge
Remaining time to charge
.PARAMETER Type
type
.OUTPUTS

NodeBatteryDetails<PSCustomObject>
#>

function Initialize-NodeBatteryDetails {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${AssociatedLinks},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${ChargeLevel},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ConsoleUri},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${CustomerId},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("LED_UNKNOWN", "LED_OFF", "LED_GREEN", "LED_GREEN_BLNK", "LED_AMBER", "LED_AMBER_BLNK", "LED_BLUE", "LED_BLUE_BLNK", "")]
        [PSCustomObject]
        ${DischargeLED},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Displayname},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Domain},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${ExpirationDate},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("LED_UNKNOWN", "LED_OFF", "LED_GREEN", "LED_GREEN_BLNK", "LED_AMBER", "LED_AMBER_BLNK", "LED_BLUE", "LED_BLUE_BLNK", "")]
        [PSCustomObject]
        ${FaultLED},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${FullyCharged},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Generation},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Id},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${Life},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${LocateEnabled},
        [Parameter(Position = 14, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Manufacturing},
        [Parameter(Position = 15, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${MaxLife},
        [Parameter(Position = 16, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 17, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${NodeBatteryId},
        [Parameter(Position = 18, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${PowerSupplyId},
        [Parameter(Position = 19, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${PrimaryNodeId},
        [Parameter(Position = 20, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${RequestUri},
        [Parameter(Position = 21, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ResourceUri},
        [Parameter(Position = 22, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${SafeToRemove},
        [Parameter(Position = 23, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${SecondaryNodeId},
        [Parameter(Position = 24, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("LED_UNKNOWN", "LED_OFF", "LED_GREEN", "LED_GREEN_BLNK", "LED_AMBER", "LED_AMBER_BLNK", "LED_BLUE", "LED_BLUE_BLNK", "")]
        [PSCustomObject]
        ${ServiceLED},
        [Parameter(Position = 25, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${State},
        [Parameter(Position = 26, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("LED_UNKNOWN", "LED_OFF", "LED_GREEN", "LED_GREEN_BLNK", "LED_AMBER", "LED_AMBER_BLNK", "LED_BLUE", "LED_BLUE_BLNK", "")]
        [PSCustomObject]
        ${StatusLED},
        [Parameter(Position = 27, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SystemId},
        [Parameter(Position = 28, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${TestInProgress},
        [Parameter(Position = 29, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${TimeToCharge},
        [Parameter(Position = 30, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Type}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => NodeBatteryDetails' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "associatedLinks" = ${AssociatedLinks}
            "chargeLevel" = ${ChargeLevel}
            "consoleUri" = ${ConsoleUri}
            "customerId" = ${CustomerId}
            "dischargeLED" = ${DischargeLED}
            "displayname" = ${Displayname}
            "domain" = ${Domain}
            "expirationDate" = ${ExpirationDate}
            "faultLED" = ${FaultLED}
            "fullyCharged" = ${FullyCharged}
            "generation" = ${Generation}
            "id" = ${Id}
            "life" = ${Life}
            "locateEnabled" = ${LocateEnabled}
            "manufacturing" = ${Manufacturing}
            "maxLife" = ${MaxLife}
            "name" = ${Name}
            "nodeBatteryId" = ${NodeBatteryId}
            "powerSupplyId" = ${PowerSupplyId}
            "primaryNodeId" = ${PrimaryNodeId}
            "requestUri" = ${RequestUri}
            "resourceUri" = ${ResourceUri}
            "safeToRemove" = ${SafeToRemove}
            "secondaryNodeId" = ${SecondaryNodeId}
            "serviceLED" = ${ServiceLED}
            "state" = ${State}
            "statusLED" = ${StatusLED}
            "systemId" = ${SystemId}
            "testInProgress" = ${TestInProgress}
            "timeToCharge" = ${TimeToCharge}
            "type" = ${Type}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to NodeBatteryDetails<PSCustomObject>

.DESCRIPTION

Convert from JSON to NodeBatteryDetails<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

NodeBatteryDetails<PSCustomObject>
#>
function ConvertFrom-JsonToNodeBatteryDetails {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => NodeBatteryDetails' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in NodeBatteryDetails
        $AllProperties = ("associatedLinks", "chargeLevel", "consoleUri", "customerId", "dischargeLED", "displayname", "domain", "expirationDate", "faultLED", "fullyCharged", "generation", "id", "life", "locateEnabled", "manufacturing", "maxLife", "name", "nodeBatteryId", "powerSupplyId", "primaryNodeId", "requestUri", "resourceUri", "safeToRemove", "secondaryNodeId", "serviceLED", "state", "statusLED", "systemId", "testInProgress", "timeToCharge", "type")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "associatedLinks"))) { #optional property not found
            $AssociatedLinks = $null
        } else {
            $AssociatedLinks = $JsonParameters.PSobject.Properties["associatedLinks"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "chargeLevel"))) { #optional property not found
            $ChargeLevel = $null
        } else {
            $ChargeLevel = $JsonParameters.PSobject.Properties["chargeLevel"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "consoleUri"))) { #optional property not found
            $ConsoleUri = $null
        } else {
            $ConsoleUri = $JsonParameters.PSobject.Properties["consoleUri"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "customerId"))) { #optional property not found
            $CustomerId = $null
        } else {
            $CustomerId = $JsonParameters.PSobject.Properties["customerId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "dischargeLED"))) { #optional property not found
            $DischargeLED = $null
        } else {
            $DischargeLED = $JsonParameters.PSobject.Properties["dischargeLED"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "displayname"))) { #optional property not found
            $Displayname = $null
        } else {
            $Displayname = $JsonParameters.PSobject.Properties["displayname"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "domain"))) { #optional property not found
            $Domain = $null
        } else {
            $Domain = $JsonParameters.PSobject.Properties["domain"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "expirationDate"))) { #optional property not found
            $ExpirationDate = $null
        } else {
            $ExpirationDate = $JsonParameters.PSobject.Properties["expirationDate"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "faultLED"))) { #optional property not found
            $FaultLED = $null
        } else {
            $FaultLED = $JsonParameters.PSobject.Properties["faultLED"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "fullyCharged"))) { #optional property not found
            $FullyCharged = $null
        } else {
            $FullyCharged = $JsonParameters.PSobject.Properties["fullyCharged"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "generation"))) { #optional property not found
            $Generation = $null
        } else {
            $Generation = $JsonParameters.PSobject.Properties["generation"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) { #optional property not found
            $Id = $null
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "life"))) { #optional property not found
            $Life = $null
        } else {
            $Life = $JsonParameters.PSobject.Properties["life"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "locateEnabled"))) { #optional property not found
            $LocateEnabled = $null
        } else {
            $LocateEnabled = $JsonParameters.PSobject.Properties["locateEnabled"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "manufacturing"))) { #optional property not found
            $Manufacturing = $null
        } else {
            $Manufacturing = $JsonParameters.PSobject.Properties["manufacturing"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "maxLife"))) { #optional property not found
            $MaxLife = $null
        } else {
            $MaxLife = $JsonParameters.PSobject.Properties["maxLife"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) { #optional property not found
            $Name = $null
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "nodeBatteryId"))) { #optional property not found
            $NodeBatteryId = $null
        } else {
            $NodeBatteryId = $JsonParameters.PSobject.Properties["nodeBatteryId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "powerSupplyId"))) { #optional property not found
            $PowerSupplyId = $null
        } else {
            $PowerSupplyId = $JsonParameters.PSobject.Properties["powerSupplyId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "primaryNodeId"))) { #optional property not found
            $PrimaryNodeId = $null
        } else {
            $PrimaryNodeId = $JsonParameters.PSobject.Properties["primaryNodeId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "requestUri"))) { #optional property not found
            $RequestUri = $null
        } else {
            $RequestUri = $JsonParameters.PSobject.Properties["requestUri"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "resourceUri"))) { #optional property not found
            $ResourceUri = $null
        } else {
            $ResourceUri = $JsonParameters.PSobject.Properties["resourceUri"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "safeToRemove"))) { #optional property not found
            $SafeToRemove = $null
        } else {
            $SafeToRemove = $JsonParameters.PSobject.Properties["safeToRemove"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "secondaryNodeId"))) { #optional property not found
            $SecondaryNodeId = $null
        } else {
            $SecondaryNodeId = $JsonParameters.PSobject.Properties["secondaryNodeId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "serviceLED"))) { #optional property not found
            $ServiceLED = $null
        } else {
            $ServiceLED = $JsonParameters.PSobject.Properties["serviceLED"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "state"))) { #optional property not found
            $State = $null
        } else {
            $State = $JsonParameters.PSobject.Properties["state"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "statusLED"))) { #optional property not found
            $StatusLED = $null
        } else {
            $StatusLED = $JsonParameters.PSobject.Properties["statusLED"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "systemId"))) { #optional property not found
            $SystemId = $null
        } else {
            $SystemId = $JsonParameters.PSobject.Properties["systemId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "testInProgress"))) { #optional property not found
            $TestInProgress = $null
        } else {
            $TestInProgress = $JsonParameters.PSobject.Properties["testInProgress"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "timeToCharge"))) { #optional property not found
            $TimeToCharge = $null
        } else {
            $TimeToCharge = $JsonParameters.PSobject.Properties["timeToCharge"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "type"))) { #optional property not found
            $Type = $null
        } else {
            $Type = $JsonParameters.PSobject.Properties["type"].value
        }

        $PSO = [PSCustomObject]@{
            "associatedLinks" = ${AssociatedLinks}
            "chargeLevel" = ${ChargeLevel}
            "consoleUri" = ${ConsoleUri}
            "customerId" = ${CustomerId}
            "dischargeLED" = ${DischargeLED}
            "displayname" = ${Displayname}
            "domain" = ${Domain}
            "expirationDate" = ${ExpirationDate}
            "faultLED" = ${FaultLED}
            "fullyCharged" = ${FullyCharged}
            "generation" = ${Generation}
            "id" = ${Id}
            "life" = ${Life}
            "locateEnabled" = ${LocateEnabled}
            "manufacturing" = ${Manufacturing}
            "maxLife" = ${MaxLife}
            "name" = ${Name}
            "nodeBatteryId" = ${NodeBatteryId}
            "powerSupplyId" = ${PowerSupplyId}
            "primaryNodeId" = ${PrimaryNodeId}
            "requestUri" = ${RequestUri}
            "resourceUri" = ${ResourceUri}
            "safeToRemove" = ${SafeToRemove}
            "secondaryNodeId" = ${SecondaryNodeId}
            "serviceLED" = ${ServiceLED}
            "state" = ${State}
            "statusLED" = ${StatusLED}
            "systemId" = ${SystemId}
            "testInProgress" = ${TestInProgress}
            "timeToCharge" = ${TimeToCharge}
            "type" = ${Type}
        }

        return $PSO
    }

}

