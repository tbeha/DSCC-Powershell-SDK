#
# Data Services Cloud Console API
# Data Services Cloud Console API
# Version: 1.4.0
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER ActiveNode
Active node ID
.PARAMETER AutoSense
Specifies if the autosense is enabled for network port
.PARAMETER FullDuplex
Is network port full duplex
.PARAMETER IpAddress
IP Address of the network port
.PARAMETER NetMask
Net mask of the network port
.PARAMETER Speed
Speed of the network port
.PARAMETER State
No description available.
.PARAMETER Status
Status of the network port
.OUTPUTS

ArcusAddress<PSCustomObject>
#>

function Initialize-ArcusAddress {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${ActiveNode},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${AutoSense},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${FullDuplex},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${IpAddress},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${NetMask},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Speed},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${State},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Status}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => ArcusAddress' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "activeNode" = ${ActiveNode}
            "autoSense" = ${AutoSense}
            "fullDuplex" = ${FullDuplex}
            "ipAddress" = ${IpAddress}
            "netMask" = ${NetMask}
            "speed" = ${Speed}
            "state" = ${State}
            "status" = ${Status}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to ArcusAddress<PSCustomObject>

.DESCRIPTION

Convert from JSON to ArcusAddress<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

ArcusAddress<PSCustomObject>
#>
function ConvertFrom-JsonToArcusAddress {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => ArcusAddress' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in ArcusAddress
        $AllProperties = ("activeNode", "autoSense", "fullDuplex", "ipAddress", "netMask", "speed", "state", "status")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "activeNode"))) { #optional property not found
            $ActiveNode = $null
        } else {
            $ActiveNode = $JsonParameters.PSobject.Properties["activeNode"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "autoSense"))) { #optional property not found
            $AutoSense = $null
        } else {
            $AutoSense = $JsonParameters.PSobject.Properties["autoSense"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "fullDuplex"))) { #optional property not found
            $FullDuplex = $null
        } else {
            $FullDuplex = $JsonParameters.PSobject.Properties["fullDuplex"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ipAddress"))) { #optional property not found
            $IpAddress = $null
        } else {
            $IpAddress = $JsonParameters.PSobject.Properties["ipAddress"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "netMask"))) { #optional property not found
            $NetMask = $null
        } else {
            $NetMask = $JsonParameters.PSobject.Properties["netMask"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "speed"))) { #optional property not found
            $Speed = $null
        } else {
            $Speed = $JsonParameters.PSobject.Properties["speed"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "state"))) { #optional property not found
            $State = $null
        } else {
            $State = $JsonParameters.PSobject.Properties["state"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "status"))) { #optional property not found
            $Status = $null
        } else {
            $Status = $JsonParameters.PSobject.Properties["status"].value
        }

        $PSO = [PSCustomObject]@{
            "activeNode" = ${ActiveNode}
            "autoSense" = ${AutoSense}
            "fullDuplex" = ${FullDuplex}
            "ipAddress" = ${IpAddress}
            "netMask" = ${NetMask}
            "speed" = ${Speed}
            "state" = ${State}
            "status" = ${Status}
        }

        return $PSO
    }

}

