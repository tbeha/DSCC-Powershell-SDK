#
# Data Services Cloud Console API
# Data Services Cloud Console API
# Version: 1.4.0
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER ApplyTo
External management agent type. Possible values:'volume', 'pe', 'vvol_volume', 'vvol_snapshot', 'snapshot', 'both'.
.PARAMETER AssociatedLinks
Associated Links Details
.PARAMETER ConsoleUri
consoleUri for detailed storage object
.PARAMETER CustomerId
customerId
.PARAMETER Generation
generation
.PARAMETER PeIds
List of candidate protocol endpoints that may be used to access the Virtual Volume. One of them will be selected for the access control record. This field is required only when creating an access control record for a Virtual Volume.
.PARAMETER ResourceUri
Link to the object URI
.PARAMETER Snapluns
Information about the snapshot LUNs associated with this access control record. This field is meaningful when the online snapshot can be accessed as a LUN in the group.
.PARAMETER Type
type
.PARAMETER VolAgentType
External management agent type. Possible values:'smis', 'vvol', 'openstack', 'openstackv2', 'none'.
.OUTPUTS

NimbleAccessControlRecordDetails<PSCustomObject>
#>

function Initialize-NimbleAccessControlRecordDetails {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ApplyTo},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${AssociatedLinks},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ConsoleUri},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${CustomerId},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Generation},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${PeIds},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ResourceUri},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Snapluns},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Type},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${VolAgentType}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => NimbleAccessControlRecordDetails' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "apply_to" = ${ApplyTo}
            "associated_links" = ${AssociatedLinks}
            "consoleUri" = ${ConsoleUri}
            "customerId" = ${CustomerId}
            "generation" = ${Generation}
            "pe_ids" = ${PeIds}
            "resourceUri" = ${ResourceUri}
            "snapluns" = ${Snapluns}
            "type" = ${Type}
            "vol_agent_type" = ${VolAgentType}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to NimbleAccessControlRecordDetails<PSCustomObject>

.DESCRIPTION

Convert from JSON to NimbleAccessControlRecordDetails<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

NimbleAccessControlRecordDetails<PSCustomObject>
#>
function ConvertFrom-JsonToNimbleAccessControlRecordDetails {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => NimbleAccessControlRecordDetails' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in NimbleAccessControlRecordDetails
        $AllProperties = ("apply_to", "associated_links", "consoleUri", "customerId", "generation", "pe_ids", "resourceUri", "snapluns", "type", "vol_agent_type")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "apply_to"))) { #optional property not found
            $ApplyTo = $null
        } else {
            $ApplyTo = $JsonParameters.PSobject.Properties["apply_to"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "associated_links"))) { #optional property not found
            $AssociatedLinks = $null
        } else {
            $AssociatedLinks = $JsonParameters.PSobject.Properties["associated_links"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "consoleUri"))) { #optional property not found
            $ConsoleUri = $null
        } else {
            $ConsoleUri = $JsonParameters.PSobject.Properties["consoleUri"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "customerId"))) { #optional property not found
            $CustomerId = $null
        } else {
            $CustomerId = $JsonParameters.PSobject.Properties["customerId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "generation"))) { #optional property not found
            $Generation = $null
        } else {
            $Generation = $JsonParameters.PSobject.Properties["generation"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "pe_ids"))) { #optional property not found
            $PeIds = $null
        } else {
            $PeIds = $JsonParameters.PSobject.Properties["pe_ids"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "resourceUri"))) { #optional property not found
            $ResourceUri = $null
        } else {
            $ResourceUri = $JsonParameters.PSobject.Properties["resourceUri"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "snapluns"))) { #optional property not found
            $Snapluns = $null
        } else {
            $Snapluns = $JsonParameters.PSobject.Properties["snapluns"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "type"))) { #optional property not found
            $Type = $null
        } else {
            $Type = $JsonParameters.PSobject.Properties["type"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "vol_agent_type"))) { #optional property not found
            $VolAgentType = $null
        } else {
            $VolAgentType = $JsonParameters.PSobject.Properties["vol_agent_type"].value
        }

        $PSO = [PSCustomObject]@{
            "apply_to" = ${ApplyTo}
            "associated_links" = ${AssociatedLinks}
            "consoleUri" = ${ConsoleUri}
            "customerId" = ${CustomerId}
            "generation" = ${Generation}
            "pe_ids" = ${PeIds}
            "resourceUri" = ${ResourceUri}
            "snapluns" = ${Snapluns}
            "type" = ${Type}
            "vol_agent_type" = ${VolAgentType}
        }

        return $PSO
    }

}

