#
# Data Services Cloud Console API
# Data Services Cloud Console API
# Version: 1.4.0
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Create Nimble array input

.PARAMETER AllowLowerLimits
Whether to create associated pool during array create. Possible values: 'true', 'false'.
.PARAMETER CreatePool
Whether to create associated pool during array create. Possible values: 'true', 'false'.
.PARAMETER CtrlrASupportIp
Controller A Support IP address.
.PARAMETER CtrlrBSupportIp
Controller B Support IP address.
.PARAMETER DedupeDisabled
Is data deduplication disabled for this array. Possible values: 'true', 'false'.
.PARAMETER Name
The user provided name of the array. It is also the array's hostname. String of up to 63 alphanumeric and can include hyphens characters but cannot start with hyphen.
.PARAMETER NicList
List of NICs information. Used while creating an array.
.PARAMETER PoolDescription
Text description of the pool to be created during array creation. String of up to 255 printable ASCII characters.
.PARAMETER PoolName
Name of pool to which this is a member. String of up to 64 alphanumeric characters, - and . and : are allowed after first character.
.PARAMETER SecondaryMgmtIp
Secondary management IP address for the Group.
.PARAMETER Serial
Serial number of the array.
.OUTPUTS

NimbleCreateArrayInput<PSCustomObject>
#>

function Initialize-NimbleCreateArrayInput {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${AllowLowerLimits},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${CreatePool},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${CtrlrASupportIp},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${CtrlrBSupportIp},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${DedupeDisabled},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${NicList},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${PoolDescription},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${PoolName},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SecondaryMgmtIp},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Serial}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => NimbleCreateArrayInput' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $CtrlrASupportIp) {
            throw "invalid value for 'CtrlrASupportIp', 'CtrlrASupportIp' cannot be null."
        }

        if ($null -eq $CtrlrBSupportIp) {
            throw "invalid value for 'CtrlrBSupportIp', 'CtrlrBSupportIp' cannot be null."
        }

        if ($null -eq $Name) {
            throw "invalid value for 'Name', 'Name' cannot be null."
        }

        if ($null -eq $NicList) {
            throw "invalid value for 'NicList', 'NicList' cannot be null."
        }

        if ($null -eq $PoolName) {
            throw "invalid value for 'PoolName', 'PoolName' cannot be null."
        }

        if ($null -eq $Serial) {
            throw "invalid value for 'Serial', 'Serial' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "allow_lower_limits" = ${AllowLowerLimits}
            "create_pool" = ${CreatePool}
            "ctrlr_a_support_ip" = ${CtrlrASupportIp}
            "ctrlr_b_support_ip" = ${CtrlrBSupportIp}
            "dedupe_disabled" = ${DedupeDisabled}
            "name" = ${Name}
            "nic_list" = ${NicList}
            "pool_description" = ${PoolDescription}
            "pool_name" = ${PoolName}
            "secondary_mgmt_ip" = ${SecondaryMgmtIp}
            "serial" = ${Serial}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to NimbleCreateArrayInput<PSCustomObject>

.DESCRIPTION

Convert from JSON to NimbleCreateArrayInput<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

NimbleCreateArrayInput<PSCustomObject>
#>
function ConvertFrom-JsonToNimbleCreateArrayInput {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => NimbleCreateArrayInput' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in NimbleCreateArrayInput
        $AllProperties = ("allow_lower_limits", "create_pool", "ctrlr_a_support_ip", "ctrlr_b_support_ip", "dedupe_disabled", "name", "nic_list", "pool_description", "pool_name", "secondary_mgmt_ip", "serial")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'ctrlr_a_support_ip' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ctrlr_a_support_ip"))) {
            throw "Error! JSON cannot be serialized due to the required property 'ctrlr_a_support_ip' missing."
        } else {
            $CtrlrASupportIp = $JsonParameters.PSobject.Properties["ctrlr_a_support_ip"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ctrlr_b_support_ip"))) {
            throw "Error! JSON cannot be serialized due to the required property 'ctrlr_b_support_ip' missing."
        } else {
            $CtrlrBSupportIp = $JsonParameters.PSobject.Properties["ctrlr_b_support_ip"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) {
            throw "Error! JSON cannot be serialized due to the required property 'name' missing."
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "nic_list"))) {
            throw "Error! JSON cannot be serialized due to the required property 'nic_list' missing."
        } else {
            $NicList = $JsonParameters.PSobject.Properties["nic_list"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "pool_name"))) {
            throw "Error! JSON cannot be serialized due to the required property 'pool_name' missing."
        } else {
            $PoolName = $JsonParameters.PSobject.Properties["pool_name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "serial"))) {
            throw "Error! JSON cannot be serialized due to the required property 'serial' missing."
        } else {
            $Serial = $JsonParameters.PSobject.Properties["serial"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "allow_lower_limits"))) { #optional property not found
            $AllowLowerLimits = $null
        } else {
            $AllowLowerLimits = $JsonParameters.PSobject.Properties["allow_lower_limits"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "create_pool"))) { #optional property not found
            $CreatePool = $null
        } else {
            $CreatePool = $JsonParameters.PSobject.Properties["create_pool"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "dedupe_disabled"))) { #optional property not found
            $DedupeDisabled = $null
        } else {
            $DedupeDisabled = $JsonParameters.PSobject.Properties["dedupe_disabled"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "pool_description"))) { #optional property not found
            $PoolDescription = $null
        } else {
            $PoolDescription = $JsonParameters.PSobject.Properties["pool_description"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "secondary_mgmt_ip"))) { #optional property not found
            $SecondaryMgmtIp = $null
        } else {
            $SecondaryMgmtIp = $JsonParameters.PSobject.Properties["secondary_mgmt_ip"].value
        }

        $PSO = [PSCustomObject]@{
            "allow_lower_limits" = ${AllowLowerLimits}
            "create_pool" = ${CreatePool}
            "ctrlr_a_support_ip" = ${CtrlrASupportIp}
            "ctrlr_b_support_ip" = ${CtrlrBSupportIp}
            "dedupe_disabled" = ${DedupeDisabled}
            "name" = ${Name}
            "nic_list" = ${NicList}
            "pool_description" = ${PoolDescription}
            "pool_name" = ${PoolName}
            "secondary_mgmt_ip" = ${SecondaryMgmtIp}
            "serial" = ${Serial}
        }

        return $PSO
    }

}

