#
# Data Services Cloud Console API
# Data Services Cloud Console API
# Version: 1.4.0
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER ExpiryTime
Unix timestamp indicating that the snapshot is considered expired by Snapshot Time-to-live(TTL). A value of 0 indicates that snapshot never expires. Seconds since last epoch i.e. 00:00 January 1, 1970.
.PARAMETER Id
Identifier for the snapshot. A 42 digit hexadecimal number.
.PARAMETER Name
Name of snapshot. String of up to 215 alphanumeric, hyphenated, colon, or period-separated characters; but cannot begin with hyphen, colon or period.
.PARAMETER ScheduleId
Identifier of protection schedule. A 42 digit hexadecimal number.
.PARAMETER ScheduleName
Name of protection schedule. String of up to 64 alphanumeric characters, - and . and : are allowed after first character.
.PARAMETER SnapCollectionId
Identifier of snapshot collection. A 42 digit hexadecimal number.
.PARAMETER SnapCollectionName
Name of snapshot collection. String of up to 215 alphanumeric, hyphenated, colon, or period-separated characters; but cannot begin with hyphen, colon or period. This type is used for object sets containing volumes, snapshots, snapshot collections and protocol endpoints.
.PARAMETER VolId
Parent volume ID. A 42 digit hexadecimal number.
.PARAMETER VolName
Name of the parent volume in which the snapshot belongs to. String of up to 215 alphanumeric, hyphenated, colon, or period-separated characters; but cannot begin with hyphen, colon or period. This type is used for object sets containing volumes, snapshots, snapshot collections and protocol endpoints.
.OUTPUTS

NimbleSnapCollSnapshot<PSCustomObject>
#>

function Initialize-NimbleSnapCollSnapshot {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${ExpiryTime},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Id},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ScheduleId},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ScheduleName},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SnapCollectionId},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SnapCollectionName},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${VolId},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${VolName}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => NimbleSnapCollSnapshot' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "expiry_time" = ${ExpiryTime}
            "id" = ${Id}
            "name" = ${Name}
            "schedule_id" = ${ScheduleId}
            "schedule_name" = ${ScheduleName}
            "snap_collection_id" = ${SnapCollectionId}
            "snap_collection_name" = ${SnapCollectionName}
            "vol_id" = ${VolId}
            "vol_name" = ${VolName}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to NimbleSnapCollSnapshot<PSCustomObject>

.DESCRIPTION

Convert from JSON to NimbleSnapCollSnapshot<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

NimbleSnapCollSnapshot<PSCustomObject>
#>
function ConvertFrom-JsonToNimbleSnapCollSnapshot {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => NimbleSnapCollSnapshot' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in NimbleSnapCollSnapshot
        $AllProperties = ("expiry_time", "id", "name", "schedule_id", "schedule_name", "snap_collection_id", "snap_collection_name", "vol_id", "vol_name")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "expiry_time"))) { #optional property not found
            $ExpiryTime = $null
        } else {
            $ExpiryTime = $JsonParameters.PSobject.Properties["expiry_time"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) { #optional property not found
            $Id = $null
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) { #optional property not found
            $Name = $null
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "schedule_id"))) { #optional property not found
            $ScheduleId = $null
        } else {
            $ScheduleId = $JsonParameters.PSobject.Properties["schedule_id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "schedule_name"))) { #optional property not found
            $ScheduleName = $null
        } else {
            $ScheduleName = $JsonParameters.PSobject.Properties["schedule_name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "snap_collection_id"))) { #optional property not found
            $SnapCollectionId = $null
        } else {
            $SnapCollectionId = $JsonParameters.PSobject.Properties["snap_collection_id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "snap_collection_name"))) { #optional property not found
            $SnapCollectionName = $null
        } else {
            $SnapCollectionName = $JsonParameters.PSobject.Properties["snap_collection_name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "vol_id"))) { #optional property not found
            $VolId = $null
        } else {
            $VolId = $JsonParameters.PSobject.Properties["vol_id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "vol_name"))) { #optional property not found
            $VolName = $null
        } else {
            $VolName = $JsonParameters.PSobject.Properties["vol_name"].value
        }

        $PSO = [PSCustomObject]@{
            "expiry_time" = ${ExpiryTime}
            "id" = ${Id}
            "name" = ${Name}
            "schedule_id" = ${ScheduleId}
            "schedule_name" = ${ScheduleName}
            "snap_collection_id" = ${SnapCollectionId}
            "snap_collection_name" = ${SnapCollectionName}
            "vol_id" = ${VolId}
            "vol_name" = ${VolName}
        }

        return $PSO
    }

}

