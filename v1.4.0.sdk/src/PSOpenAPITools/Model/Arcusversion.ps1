#
# Data Services Cloud Console API
# Data Services Cloud Console API
# Version: 1.4.0
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Base
Base version
.PARAMETER Display
Display name
.PARAMETER Full
Full version
.PARAMETER FullWithoutPatches
Base version without patches
.OUTPUTS

Arcusversion<PSCustomObject>
#>

function Initialize-Arcusversion {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Base},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Display},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Full},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${FullWithoutPatches}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => Arcusversion' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "base" = ${Base}
            "display" = ${Display}
            "full" = ${Full}
            "fullWithoutPatches" = ${FullWithoutPatches}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to Arcusversion<PSCustomObject>

.DESCRIPTION

Convert from JSON to Arcusversion<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

Arcusversion<PSCustomObject>
#>
function ConvertFrom-JsonToArcusversion {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => Arcusversion' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in Arcusversion
        $AllProperties = ("base", "display", "full", "fullWithoutPatches")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "base"))) { #optional property not found
            $Base = $null
        } else {
            $Base = $JsonParameters.PSobject.Properties["base"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "display"))) { #optional property not found
            $Display = $null
        } else {
            $Display = $JsonParameters.PSobject.Properties["display"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "full"))) { #optional property not found
            $Full = $null
        } else {
            $Full = $JsonParameters.PSobject.Properties["full"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "fullWithoutPatches"))) { #optional property not found
            $FullWithoutPatches = $null
        } else {
            $FullWithoutPatches = $JsonParameters.PSobject.Properties["fullWithoutPatches"].value
        }

        $PSO = [PSCustomObject]@{
            "base" = ${Base}
            "display" = ${Display}
            "full" = ${Full}
            "fullWithoutPatches" = ${FullWithoutPatches}
        }

        return $PSO
    }

}

