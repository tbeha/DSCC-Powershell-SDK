#
# Data Services Cloud Console API
# Data Services Cloud Console API
# Version: 1.4.0
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Active
Indicates if the external key manager is active or not
.PARAMETER ConsoleUri
consoleUri for detailed storage object
.PARAMETER Description
String of up to 255 printable ASCII characters. Example: '99.9999% availability'.
.PARAMETER Hostname
Hostname of the external key manager
.PARAMETER Port
Positive integer value up to 65535 representing External key manager port.
.PARAMETER Protocol
Possible values: 'KMIP1_0', 'KMIP1_1', 'KMIP1_2', 'KMIP1_3'.
.PARAMETER ResourceUri
Link to the object URI
.PARAMETER Status
status
.PARAMETER Username
External key manager username. String of up to 255 printable ASCII characters.
.OUTPUTS

ExternalKeyManagerCommonFields<PSCustomObject>
#>

function Initialize-ExternalKeyManagerCommonFields {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${Active},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ConsoleUri},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Description},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Hostname},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Port},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Protocol},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ResourceUri},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Status},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Username}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => ExternalKeyManagerCommonFields' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "active" = ${Active}
            "consoleUri" = ${ConsoleUri}
            "description" = ${Description}
            "hostname" = ${Hostname}
            "port" = ${Port}
            "protocol" = ${Protocol}
            "resourceUri" = ${ResourceUri}
            "status" = ${Status}
            "username" = ${Username}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to ExternalKeyManagerCommonFields<PSCustomObject>

.DESCRIPTION

Convert from JSON to ExternalKeyManagerCommonFields<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

ExternalKeyManagerCommonFields<PSCustomObject>
#>
function ConvertFrom-JsonToExternalKeyManagerCommonFields {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => ExternalKeyManagerCommonFields' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in ExternalKeyManagerCommonFields
        $AllProperties = ("active", "consoleUri", "description", "hostname", "port", "protocol", "resourceUri", "status", "username")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "active"))) { #optional property not found
            $Active = $null
        } else {
            $Active = $JsonParameters.PSobject.Properties["active"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "consoleUri"))) { #optional property not found
            $ConsoleUri = $null
        } else {
            $ConsoleUri = $JsonParameters.PSobject.Properties["consoleUri"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "description"))) { #optional property not found
            $Description = $null
        } else {
            $Description = $JsonParameters.PSobject.Properties["description"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "hostname"))) { #optional property not found
            $Hostname = $null
        } else {
            $Hostname = $JsonParameters.PSobject.Properties["hostname"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "port"))) { #optional property not found
            $Port = $null
        } else {
            $Port = $JsonParameters.PSobject.Properties["port"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "protocol"))) { #optional property not found
            $Protocol = $null
        } else {
            $Protocol = $JsonParameters.PSobject.Properties["protocol"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "resourceUri"))) { #optional property not found
            $ResourceUri = $null
        } else {
            $ResourceUri = $JsonParameters.PSobject.Properties["resourceUri"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "status"))) { #optional property not found
            $Status = $null
        } else {
            $Status = $JsonParameters.PSobject.Properties["status"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "username"))) { #optional property not found
            $Username = $null
        } else {
            $Username = $JsonParameters.PSobject.Properties["username"].value
        }

        $PSO = [PSCustomObject]@{
            "active" = ${Active}
            "consoleUri" = ${ConsoleUri}
            "description" = ${Description}
            "hostname" = ${Hostname}
            "port" = ${Port}
            "protocol" = ${Protocol}
            "resourceUri" = ${ResourceUri}
            "status" = ${Status}
            "username" = ${Username}
        }

        return $PSO
    }

}

