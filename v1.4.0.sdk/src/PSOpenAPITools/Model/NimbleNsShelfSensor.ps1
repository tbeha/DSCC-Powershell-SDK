#
# Data Services Cloud Console API
# Data Services Cloud Console API
# Version: 1.4.0
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Cid
Which controller this sensor applies to. Possible values:'A', 'B', 'unknown'.
.PARAMETER DisplayName
Name for display purpose.
.PARAMETER Location
Location of the sensor.
.PARAMETER Name
Internal name of the sensor.
.PARAMETER Status
Sensor status. Possible values:'Missing', 'Failed', 'OK', 'Alerted'.
.PARAMETER Type
Type of the sensor. Possible values:'fan', 'nvram', 'temperature', 'power supply'.
.PARAMETER Value
Value of the sensor reading.
.OUTPUTS

NimbleNsShelfSensor<PSCustomObject>
#>

function Initialize-NimbleNsShelfSensor {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Cid},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${DisplayName},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Location},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Status},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Type},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${Value}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => NimbleNsShelfSensor' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "cid" = ${Cid}
            "display_name" = ${DisplayName}
            "location" = ${Location}
            "name" = ${Name}
            "status" = ${Status}
            "type" = ${Type}
            "value" = ${Value}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to NimbleNsShelfSensor<PSCustomObject>

.DESCRIPTION

Convert from JSON to NimbleNsShelfSensor<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

NimbleNsShelfSensor<PSCustomObject>
#>
function ConvertFrom-JsonToNimbleNsShelfSensor {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => NimbleNsShelfSensor' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in NimbleNsShelfSensor
        $AllProperties = ("cid", "display_name", "location", "name", "status", "type", "value")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "cid"))) { #optional property not found
            $Cid = $null
        } else {
            $Cid = $JsonParameters.PSobject.Properties["cid"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "display_name"))) { #optional property not found
            $DisplayName = $null
        } else {
            $DisplayName = $JsonParameters.PSobject.Properties["display_name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "location"))) { #optional property not found
            $Location = $null
        } else {
            $Location = $JsonParameters.PSobject.Properties["location"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) { #optional property not found
            $Name = $null
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "status"))) { #optional property not found
            $Status = $null
        } else {
            $Status = $JsonParameters.PSobject.Properties["status"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "type"))) { #optional property not found
            $Type = $null
        } else {
            $Type = $JsonParameters.PSobject.Properties["type"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "value"))) { #optional property not found
            $Value = $null
        } else {
            $Value = $JsonParameters.PSobject.Properties["value"].value
        }

        $PSO = [PSCustomObject]@{
            "cid" = ${Cid}
            "display_name" = ${DisplayName}
            "location" = ${Location}
            "name" = ${Name}
            "status" = ${Status}
            "type" = ${Type}
            "value" = ${Value}
        }

        return $PSO
    }

}

