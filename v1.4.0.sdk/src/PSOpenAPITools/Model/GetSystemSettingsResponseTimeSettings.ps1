#
# Data Services Cloud Console API
# Data Services Cloud Console API
# Version: 1.4.0
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

time settings

.PARAMETER Nodes
Specifies the node name and status of NTP settings on that node.
.PARAMETER NtpServer1
The NTP server1 the system should use to synchronize its clocks
.PARAMETER NtpServer2
The NTP server2 the system should use to synchronize its clocks
.PARAMETER NtpServer3
The NTP server3 the system should use to synchronize its clocks
.PARAMETER Timezone
New system timezone on all nodes
.OUTPUTS

GetSystemSettingsResponseTimeSettings<PSCustomObject>
#>

function Initialize-GetSystemSettingsResponseTimeSettings {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Nodes},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${NtpServer1},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${NtpServer2},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${NtpServer3},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Timezone}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => GetSystemSettingsResponseTimeSettings' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "nodes" = ${Nodes}
            "ntpServer1" = ${NtpServer1}
            "ntpServer2" = ${NtpServer2}
            "ntpServer3" = ${NtpServer3}
            "timezone" = ${Timezone}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to GetSystemSettingsResponseTimeSettings<PSCustomObject>

.DESCRIPTION

Convert from JSON to GetSystemSettingsResponseTimeSettings<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

GetSystemSettingsResponseTimeSettings<PSCustomObject>
#>
function ConvertFrom-JsonToGetSystemSettingsResponseTimeSettings {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => GetSystemSettingsResponseTimeSettings' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in GetSystemSettingsResponseTimeSettings
        $AllProperties = ("nodes", "ntpServer1", "ntpServer2", "ntpServer3", "timezone")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "nodes"))) { #optional property not found
            $Nodes = $null
        } else {
            $Nodes = $JsonParameters.PSobject.Properties["nodes"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ntpServer1"))) { #optional property not found
            $NtpServer1 = $null
        } else {
            $NtpServer1 = $JsonParameters.PSobject.Properties["ntpServer1"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ntpServer2"))) { #optional property not found
            $NtpServer2 = $null
        } else {
            $NtpServer2 = $JsonParameters.PSobject.Properties["ntpServer2"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ntpServer3"))) { #optional property not found
            $NtpServer3 = $null
        } else {
            $NtpServer3 = $JsonParameters.PSobject.Properties["ntpServer3"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "timezone"))) { #optional property not found
            $Timezone = $null
        } else {
            $Timezone = $JsonParameters.PSobject.Properties["timezone"].value
        }

        $PSO = [PSCustomObject]@{
            "nodes" = ${Nodes}
            "ntpServer1" = ${NtpServer1}
            "ntpServer2" = ${NtpServer2}
            "ntpServer3" = ${NtpServer3}
            "timezone" = ${Timezone}
        }

        return $PSO
    }

}

