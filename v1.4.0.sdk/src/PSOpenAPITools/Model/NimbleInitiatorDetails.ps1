#
# Data Services Cloud Console API
# Data Services Cloud Console API
# Version: 1.4.0
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER AccessProtocol
Access protocol used by the initiator. Possible values: 'iscsi', 'fc'.
.PARAMETER Alias
Alias of the Fibre Channel initiator. Maximum alias length is 32 characters. Each initiator alias must have an associated WWPN specified using the 'wwpn' attribute.You can choose not to enter the WWPN for an initiator when using previously saved initiator alias.String of up to 32 alphanumeric characters, or one of $^-_.: cannot begin with non-alphanumeric character.
.PARAMETER AssociatedLinks
Associated Links Details
.PARAMETER ChapuserId
Identifier for the CHAP user.
.PARAMETER CreationTime
Time when this initiator group was created. Seconds since last epoch i.e. 00:00 January 1, 1970.
.PARAMETER Id
Identifier for initiator. A 42 digit hexadecimal number.
.PARAMETER InitiatorGroupId
Identifier of the initiator group that this initiator is assigned to. A 42 digit hexadecimal number.
.PARAMETER InitiatorGroupName
Name of the initiator group that this initiator is assigned to. String of up to 64 alphanumeric characters, - and . and : are allowed after first character
.PARAMETER IpAddress
IP address of the iSCSI initiator. Each initiator IP address must have an associated name specified using 'name' attribute.You can choose not to enter the name for an initiator if you prefer not to authenticate using both name and IP address, in this case the IQN name will be returned as '*'. Alphanumeric, hyphenated, colon or period separated string of up to 255 characters or '*'
.PARAMETER Iqn
IQN name of the iSCSI initiator. Each initiator IQN name must have an associated IP address specified using the 'ip_address' attribute.You can choose not to enter the IP address for an initiator if you prefer not to authenticate using both name and IP address,in this case the IP address will be returned as '*'.
.PARAMETER Label
Unique Identifier of the iSCSI initiator. Label is required when creating iSCSI initiator. String of up to 64 alphanumeric characters, - and . and : are allowed after first character.
.PARAMETER LastModified
Time when this initiator group was last modified.Seconds since last epoch i.e. 00:00 January 1, 1970.
.PARAMETER OverrideExistingAlias
Forcibly add Fibre Channel initiator to initiator group by updating or removing conflicting Fibre Channel initiator aliases.
.PARAMETER RequestUri
requestUri for detailed initiators object
.PARAMETER Wwpn
WWPN (World Wide Port Name) of the Fibre Channel initiator. WWPN is required when creating a Fibre Channel initiator. Each initiator WWPN can have an associated alias specified using the 'alias' attribute. You can choose not to enter the alias for an initiator if you prefer not to assign an initiator alias. Eight bytes expressed in hex separated by colons.
.OUTPUTS

NimbleInitiatorDetails<PSCustomObject>
#>

function Initialize-NimbleInitiatorDetails {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${AccessProtocol},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Alias},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${AssociatedLinks},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ChapuserId},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${CreationTime},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Id},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${InitiatorGroupId},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${InitiatorGroupName},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${IpAddress},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Iqn},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Label},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${LastModified},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${OverrideExistingAlias},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${RequestUri},
        [Parameter(Position = 14, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Wwpn}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => NimbleInitiatorDetails' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "access_protocol" = ${AccessProtocol}
            "alias" = ${Alias}
            "associated_links" = ${AssociatedLinks}
            "chapuser_id" = ${ChapuserId}
            "creation_time" = ${CreationTime}
            "id" = ${Id}
            "initiator_group_id" = ${InitiatorGroupId}
            "initiator_group_name" = ${InitiatorGroupName}
            "ip_address" = ${IpAddress}
            "iqn" = ${Iqn}
            "label" = ${Label}
            "last_modified" = ${LastModified}
            "override_existing_alias" = ${OverrideExistingAlias}
            "requestUri" = ${RequestUri}
            "wwpn" = ${Wwpn}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to NimbleInitiatorDetails<PSCustomObject>

.DESCRIPTION

Convert from JSON to NimbleInitiatorDetails<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

NimbleInitiatorDetails<PSCustomObject>
#>
function ConvertFrom-JsonToNimbleInitiatorDetails {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => NimbleInitiatorDetails' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in NimbleInitiatorDetails
        $AllProperties = ("access_protocol", "alias", "associated_links", "chapuser_id", "creation_time", "id", "initiator_group_id", "initiator_group_name", "ip_address", "iqn", "label", "last_modified", "override_existing_alias", "requestUri", "wwpn")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "access_protocol"))) { #optional property not found
            $AccessProtocol = $null
        } else {
            $AccessProtocol = $JsonParameters.PSobject.Properties["access_protocol"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "alias"))) { #optional property not found
            $Alias = $null
        } else {
            $Alias = $JsonParameters.PSobject.Properties["alias"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "associated_links"))) { #optional property not found
            $AssociatedLinks = $null
        } else {
            $AssociatedLinks = $JsonParameters.PSobject.Properties["associated_links"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "chapuser_id"))) { #optional property not found
            $ChapuserId = $null
        } else {
            $ChapuserId = $JsonParameters.PSobject.Properties["chapuser_id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "creation_time"))) { #optional property not found
            $CreationTime = $null
        } else {
            $CreationTime = $JsonParameters.PSobject.Properties["creation_time"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) { #optional property not found
            $Id = $null
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "initiator_group_id"))) { #optional property not found
            $InitiatorGroupId = $null
        } else {
            $InitiatorGroupId = $JsonParameters.PSobject.Properties["initiator_group_id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "initiator_group_name"))) { #optional property not found
            $InitiatorGroupName = $null
        } else {
            $InitiatorGroupName = $JsonParameters.PSobject.Properties["initiator_group_name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ip_address"))) { #optional property not found
            $IpAddress = $null
        } else {
            $IpAddress = $JsonParameters.PSobject.Properties["ip_address"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "iqn"))) { #optional property not found
            $Iqn = $null
        } else {
            $Iqn = $JsonParameters.PSobject.Properties["iqn"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "label"))) { #optional property not found
            $Label = $null
        } else {
            $Label = $JsonParameters.PSobject.Properties["label"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "last_modified"))) { #optional property not found
            $LastModified = $null
        } else {
            $LastModified = $JsonParameters.PSobject.Properties["last_modified"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "override_existing_alias"))) { #optional property not found
            $OverrideExistingAlias = $null
        } else {
            $OverrideExistingAlias = $JsonParameters.PSobject.Properties["override_existing_alias"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "requestUri"))) { #optional property not found
            $RequestUri = $null
        } else {
            $RequestUri = $JsonParameters.PSobject.Properties["requestUri"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "wwpn"))) { #optional property not found
            $Wwpn = $null
        } else {
            $Wwpn = $JsonParameters.PSobject.Properties["wwpn"].value
        }

        $PSO = [PSCustomObject]@{
            "access_protocol" = ${AccessProtocol}
            "alias" = ${Alias}
            "associated_links" = ${AssociatedLinks}
            "chapuser_id" = ${ChapuserId}
            "creation_time" = ${CreationTime}
            "id" = ${Id}
            "initiator_group_id" = ${InitiatorGroupId}
            "initiator_group_name" = ${InitiatorGroupName}
            "ip_address" = ${IpAddress}
            "iqn" = ${Iqn}
            "label" = ${Label}
            "last_modified" = ${LastModified}
            "override_existing_alias" = ${OverrideExistingAlias}
            "requestUri" = ${RequestUri}
            "wwpn" = ${Wwpn}
        }

        return $PSO
    }

}

