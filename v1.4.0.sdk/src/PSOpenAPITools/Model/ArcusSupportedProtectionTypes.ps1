#
# Data Services Cloud Console API
# Data Services Cloud Console API
# Version: 1.4.0
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Response body for supported protection types on an application set

.PARAMETER AsyncPartners
List of potential replication partners that can be part of asynchronous protection policy
.PARAMETER CustomerId
customerId
.PARAMETER Generation
generation
.PARAMETER IsSLDSupported
Shows if SLD is supported or not
.PARAMETER ProtectionTypes
List of protection policies types that can be configured on the application set Possible values: schedule, async, sync
.PARAMETER RequestUri
requestUri for supported protection types
.PARAMETER SyncPartners
List of potential replication partners that can be part of synchronous protection policy
.OUTPUTS

ArcusSupportedProtectionTypes<PSCustomObject>
#>

function Initialize-ArcusSupportedProtectionTypes {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${AsyncPartners},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${CustomerId},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Generation},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${IsSLDSupported},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${ProtectionTypes},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${RequestUri},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${SyncPartners}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => ArcusSupportedProtectionTypes' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "asyncPartners" = ${AsyncPartners}
            "customerId" = ${CustomerId}
            "generation" = ${Generation}
            "isSLDSupported" = ${IsSLDSupported}
            "protectionTypes" = ${ProtectionTypes}
            "requestUri" = ${RequestUri}
            "syncPartners" = ${SyncPartners}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to ArcusSupportedProtectionTypes<PSCustomObject>

.DESCRIPTION

Convert from JSON to ArcusSupportedProtectionTypes<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

ArcusSupportedProtectionTypes<PSCustomObject>
#>
function ConvertFrom-JsonToArcusSupportedProtectionTypes {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => ArcusSupportedProtectionTypes' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in ArcusSupportedProtectionTypes
        $AllProperties = ("asyncPartners", "customerId", "generation", "isSLDSupported", "protectionTypes", "requestUri", "syncPartners")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "asyncPartners"))) { #optional property not found
            $AsyncPartners = $null
        } else {
            $AsyncPartners = $JsonParameters.PSobject.Properties["asyncPartners"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "customerId"))) { #optional property not found
            $CustomerId = $null
        } else {
            $CustomerId = $JsonParameters.PSobject.Properties["customerId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "generation"))) { #optional property not found
            $Generation = $null
        } else {
            $Generation = $JsonParameters.PSobject.Properties["generation"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "isSLDSupported"))) { #optional property not found
            $IsSLDSupported = $null
        } else {
            $IsSLDSupported = $JsonParameters.PSobject.Properties["isSLDSupported"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "protectionTypes"))) { #optional property not found
            $ProtectionTypes = $null
        } else {
            $ProtectionTypes = $JsonParameters.PSobject.Properties["protectionTypes"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "requestUri"))) { #optional property not found
            $RequestUri = $null
        } else {
            $RequestUri = $JsonParameters.PSobject.Properties["requestUri"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "syncPartners"))) { #optional property not found
            $SyncPartners = $null
        } else {
            $SyncPartners = $JsonParameters.PSobject.Properties["syncPartners"].value
        }

        $PSO = [PSCustomObject]@{
            "asyncPartners" = ${AsyncPartners}
            "customerId" = ${CustomerId}
            "generation" = ${Generation}
            "isSLDSupported" = ${IsSLDSupported}
            "protectionTypes" = ${ProtectionTypes}
            "requestUri" = ${RequestUri}
            "syncPartners" = ${SyncPartners}
        }

        return $PSO
    }

}

