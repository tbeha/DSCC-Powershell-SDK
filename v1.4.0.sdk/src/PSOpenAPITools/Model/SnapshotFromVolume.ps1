#
# Data Services Cloud Console API
# Data Services Cloud Console API
# Version: 1.4.0
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Snapshots as presented to volumes in volume-sets

.PARAMETER Id
ID of snapshot.
.PARAMETER Name
Snapshot name.
.PARAMETER SnapId
ID of snapshot.
.PARAMETER SnapName
Snapshot name.
.OUTPUTS

SnapshotFromVolume<PSCustomObject>
#>

function Initialize-SnapshotFromVolume {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SnapId},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SnapName}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => SnapshotFromVolume' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "name" = ${Name}
            "snap_id" = ${SnapId}
            "snap_name" = ${SnapName}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to SnapshotFromVolume<PSCustomObject>

.DESCRIPTION

Convert from JSON to SnapshotFromVolume<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

SnapshotFromVolume<PSCustomObject>
#>
function ConvertFrom-JsonToSnapshotFromVolume {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => SnapshotFromVolume' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in SnapshotFromVolume
        $AllProperties = ("id", "name", "snap_id", "snap_name")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) { #optional property not found
            $Id = $null
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) { #optional property not found
            $Name = $null
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "snap_id"))) { #optional property not found
            $SnapId = $null
        } else {
            $SnapId = $JsonParameters.PSobject.Properties["snap_id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "snap_name"))) { #optional property not found
            $SnapName = $null
        } else {
            $SnapName = $JsonParameters.PSobject.Properties["snap_name"].value
        }

        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "name" = ${Name}
            "snap_id" = ${SnapId}
            "snap_name" = ${SnapName}
        }

        return $PSO
    }

}

