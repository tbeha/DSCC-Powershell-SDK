#
# Data Services Cloud Console API
# Data Services Cloud Console API
# Version: 1.4.0
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER AssociatedResource
No description available.
.PARAMETER Code
Unique code that describes the type of audit event that occurred
.PARAMETER ContextId
Unique id used to track a request across services
.PARAMETER CustomerId
Application Customer ID associated with this event
.PARAMETER Id
Required: Unique ID for this audit event message, for example a GUID
.PARAMETER Message
Required: Human readable message string that describes the action that occurred
.PARAMETER OccurredAt
Required: UTC timestamp when the event occurred
.PARAMETER Permission
Which privilege was used to grant/deny the action. E.g. controller.edit.
.PARAMETER Scope
Provides additional limits on the authorization of the request.
.PARAMETER Source
Which service/device is responsible for sending this event
.PARAMETER SourceIpAddress
IP address from where the request originated
.PARAMETER State
Required: Enum that identifies whether the action was successful or not: Success, Failure, PermissionDenied, Initiated
.PARAMETER TaskId
Identifier linking asynchronous operations allowing initiation and completion of operations to be linked
.PARAMETER UniqueId
Unique identifier generated internally
.PARAMETER UserEmail
User who is associated with this event
.PARAMETER Version
Required: Version of the event structure, allowing for changes in the future
.OUTPUTS

AuditData<PSCustomObject>
#>

function Initialize-AuditData {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${AssociatedResource},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Code},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ContextId},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${CustomerId},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Id},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Message},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${OccurredAt},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Permission},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Scope},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Source},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SourceIpAddress},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${State},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${TaskId},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${UniqueId},
        [Parameter(Position = 14, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${UserEmail},
        [Parameter(Position = 15, ValueFromPipelineByPropertyName = $true)]
        [Int32]
        ${Version}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => AuditData' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $Id) {
            throw "invalid value for 'Id', 'Id' cannot be null."
        }

        if ($null -eq $Message) {
            throw "invalid value for 'Message', 'Message' cannot be null."
        }

        if ($null -eq $OccurredAt) {
            throw "invalid value for 'OccurredAt', 'OccurredAt' cannot be null."
        }

        if ($null -eq $State) {
            throw "invalid value for 'State', 'State' cannot be null."
        }

        if ($null -eq $Version) {
            throw "invalid value for 'Version', 'Version' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "associatedResource" = ${AssociatedResource}
            "code" = ${Code}
            "contextId" = ${ContextId}
            "customerId" = ${CustomerId}
            "id" = ${Id}
            "message" = ${Message}
            "occurredAt" = ${OccurredAt}
            "permission" = ${Permission}
            "scope" = ${Scope}
            "source" = ${Source}
            "sourceIpAddress" = ${SourceIpAddress}
            "state" = ${State}
            "taskId" = ${TaskId}
            "uniqueId" = ${UniqueId}
            "userEmail" = ${UserEmail}
            "version" = ${Version}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to AuditData<PSCustomObject>

.DESCRIPTION

Convert from JSON to AuditData<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

AuditData<PSCustomObject>
#>
function ConvertFrom-JsonToAuditData {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => AuditData' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in AuditData
        $AllProperties = ("associatedResource", "code", "contextId", "customerId", "id", "message", "occurredAt", "permission", "scope", "source", "sourceIpAddress", "state", "taskId", "uniqueId", "userEmail", "version")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'id' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) {
            throw "Error! JSON cannot be serialized due to the required property 'id' missing."
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "message"))) {
            throw "Error! JSON cannot be serialized due to the required property 'message' missing."
        } else {
            $Message = $JsonParameters.PSobject.Properties["message"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "occurredAt"))) {
            throw "Error! JSON cannot be serialized due to the required property 'occurredAt' missing."
        } else {
            $OccurredAt = $JsonParameters.PSobject.Properties["occurredAt"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "state"))) {
            throw "Error! JSON cannot be serialized due to the required property 'state' missing."
        } else {
            $State = $JsonParameters.PSobject.Properties["state"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "version"))) {
            throw "Error! JSON cannot be serialized due to the required property 'version' missing."
        } else {
            $Version = $JsonParameters.PSobject.Properties["version"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "associatedResource"))) { #optional property not found
            $AssociatedResource = $null
        } else {
            $AssociatedResource = $JsonParameters.PSobject.Properties["associatedResource"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "code"))) { #optional property not found
            $Code = $null
        } else {
            $Code = $JsonParameters.PSobject.Properties["code"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "contextId"))) { #optional property not found
            $ContextId = $null
        } else {
            $ContextId = $JsonParameters.PSobject.Properties["contextId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "customerId"))) { #optional property not found
            $CustomerId = $null
        } else {
            $CustomerId = $JsonParameters.PSobject.Properties["customerId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "permission"))) { #optional property not found
            $Permission = $null
        } else {
            $Permission = $JsonParameters.PSobject.Properties["permission"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "scope"))) { #optional property not found
            $Scope = $null
        } else {
            $Scope = $JsonParameters.PSobject.Properties["scope"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "source"))) { #optional property not found
            $Source = $null
        } else {
            $Source = $JsonParameters.PSobject.Properties["source"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "sourceIpAddress"))) { #optional property not found
            $SourceIpAddress = $null
        } else {
            $SourceIpAddress = $JsonParameters.PSobject.Properties["sourceIpAddress"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "taskId"))) { #optional property not found
            $TaskId = $null
        } else {
            $TaskId = $JsonParameters.PSobject.Properties["taskId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "uniqueId"))) { #optional property not found
            $UniqueId = $null
        } else {
            $UniqueId = $JsonParameters.PSobject.Properties["uniqueId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "userEmail"))) { #optional property not found
            $UserEmail = $null
        } else {
            $UserEmail = $JsonParameters.PSobject.Properties["userEmail"].value
        }

        $PSO = [PSCustomObject]@{
            "associatedResource" = ${AssociatedResource}
            "code" = ${Code}
            "contextId" = ${ContextId}
            "customerId" = ${CustomerId}
            "id" = ${Id}
            "message" = ${Message}
            "occurredAt" = ${OccurredAt}
            "permission" = ${Permission}
            "scope" = ${Scope}
            "source" = ${Source}
            "sourceIpAddress" = ${SourceIpAddress}
            "state" = ${State}
            "taskId" = ${TaskId}
            "uniqueId" = ${UniqueId}
            "userEmail" = ${UserEmail}
            "version" = ${Version}
        }

        return $PSO
    }

}

