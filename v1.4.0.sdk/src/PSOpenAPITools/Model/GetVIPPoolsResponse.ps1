#
# Data Services Cloud Console API
# Data Services Cloud Console API
# Version: 1.4.0
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Single VIP Pool details

.PARAMETER CustomerId
The customer application identifier
.PARAMETER FileServer
No description available.
.PARAMETER Gateway
Specifies the gateway
.PARAMETER Generation
This value updates when the resource is updated and can be used as a short way to determine if a resource has changed or which of two different copies of a resource is more up to date. 
.PARAMETER Id
Specifies the vip pool id
.PARAMETER IpRanges
Specifies the ip ranges that belong to this vip pool
.PARAMETER Name
Specifies the name of the vip pool
.PARAMETER Nodes
Specifies the node id and name which can use this vip pool
.PARAMETER ResourceUri
Specifies the vip pool resource Uri of the file server which provides the reference to this resource 
.PARAMETER Role
Specifies the role of the vippool
.PARAMETER SubnetCidr
Specifies the subnet cidr
.PARAMETER Uuid
Specifies the vip pool uuid
.PARAMETER VipPoolDomainName
Specifies the domain name
.PARAMETER Vlan
Specifies the vlan number
.OUTPUTS

GetVIPPoolsResponse<PSCustomObject>
#>

function Initialize-GetVIPPoolsResponse {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${CustomerId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${FileServer},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Gateway},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${Generation},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${Id},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${IpRanges},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Nodes},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ResourceUri},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("PROTOCOLS", "REPLICATION", "")]
        [String]
        ${Role},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${SubnetCidr},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Uuid},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${VipPoolDomainName},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Vlan}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => GetVIPPoolsResponse' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($Generation -and $Generation -lt 0) {
          throw "invalid value for 'Generation', must be greater than or equal to 0."
        }


        $PSO = [PSCustomObject]@{
            "customerId" = ${CustomerId}
            "fileServer" = ${FileServer}
            "gateway" = ${Gateway}
            "generation" = ${Generation}
            "id" = ${Id}
            "ipRanges" = ${IpRanges}
            "name" = ${Name}
            "nodes" = ${Nodes}
            "resourceUri" = ${ResourceUri}
            "role" = ${Role}
            "subnetCidr" = ${SubnetCidr}
            "uuid" = ${Uuid}
            "vipPoolDomainName" = ${VipPoolDomainName}
            "vlan" = ${Vlan}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to GetVIPPoolsResponse<PSCustomObject>

.DESCRIPTION

Convert from JSON to GetVIPPoolsResponse<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

GetVIPPoolsResponse<PSCustomObject>
#>
function ConvertFrom-JsonToGetVIPPoolsResponse {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => GetVIPPoolsResponse' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in GetVIPPoolsResponse
        $AllProperties = ("customerId", "fileServer", "gateway", "generation", "id", "ipRanges", "name", "nodes", "resourceUri", "role", "subnetCidr", "uuid", "vipPoolDomainName", "vlan")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "customerId"))) { #optional property not found
            $CustomerId = $null
        } else {
            $CustomerId = $JsonParameters.PSobject.Properties["customerId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "fileServer"))) { #optional property not found
            $FileServer = $null
        } else {
            $FileServer = $JsonParameters.PSobject.Properties["fileServer"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "gateway"))) { #optional property not found
            $Gateway = $null
        } else {
            $Gateway = $JsonParameters.PSobject.Properties["gateway"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "generation"))) { #optional property not found
            $Generation = $null
        } else {
            $Generation = $JsonParameters.PSobject.Properties["generation"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) { #optional property not found
            $Id = $null
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ipRanges"))) { #optional property not found
            $IpRanges = $null
        } else {
            $IpRanges = $JsonParameters.PSobject.Properties["ipRanges"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) { #optional property not found
            $Name = $null
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "nodes"))) { #optional property not found
            $Nodes = $null
        } else {
            $Nodes = $JsonParameters.PSobject.Properties["nodes"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "resourceUri"))) { #optional property not found
            $ResourceUri = $null
        } else {
            $ResourceUri = $JsonParameters.PSobject.Properties["resourceUri"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "role"))) { #optional property not found
            $Role = $null
        } else {
            $Role = $JsonParameters.PSobject.Properties["role"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "subnetCidr"))) { #optional property not found
            $SubnetCidr = $null
        } else {
            $SubnetCidr = $JsonParameters.PSobject.Properties["subnetCidr"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "uuid"))) { #optional property not found
            $Uuid = $null
        } else {
            $Uuid = $JsonParameters.PSobject.Properties["uuid"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "vipPoolDomainName"))) { #optional property not found
            $VipPoolDomainName = $null
        } else {
            $VipPoolDomainName = $JsonParameters.PSobject.Properties["vipPoolDomainName"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "vlan"))) { #optional property not found
            $Vlan = $null
        } else {
            $Vlan = $JsonParameters.PSobject.Properties["vlan"].value
        }

        $PSO = [PSCustomObject]@{
            "customerId" = ${CustomerId}
            "fileServer" = ${FileServer}
            "gateway" = ${Gateway}
            "generation" = ${Generation}
            "id" = ${Id}
            "ipRanges" = ${IpRanges}
            "name" = ${Name}
            "nodes" = ${Nodes}
            "resourceUri" = ${ResourceUri}
            "role" = ${Role}
            "subnetCidr" = ${SubnetCidr}
            "uuid" = ${Uuid}
            "vipPoolDomainName" = ${VipPoolDomainName}
            "vlan" = ${Vlan}
        }

        return $PSO
    }

}

