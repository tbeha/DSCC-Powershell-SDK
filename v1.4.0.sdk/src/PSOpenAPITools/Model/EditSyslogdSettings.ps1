#
# Data Services Cloud Console API
# Data Services Cloud Console API
# Version: 1.4.0
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER SyslogdEnabled
Enable or disable syslogd in system
.PARAMETER SyslogdPort
Port number for syslogd server. Positive integer value up to 65535 representing TCP/IP port.
.PARAMETER SyslogdServer
Hostname of the syslogd server. String of alphanumeric characters, valid range is from 2 to 255; Each label must be between 1 and 63 characters long; - and . are allowed after the first and before the last character.
.PARAMETER SyslogdServers
syslogd server info.
.OUTPUTS

EditSyslogdSettings<PSCustomObject>
#>

function Initialize-EditSyslogdSettings {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${SyslogdEnabled},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${SyslogdPort},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SyslogdServer},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${SyslogdServers}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => EditSyslogdSettings' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "syslogd_enabled" = ${SyslogdEnabled}
            "syslogd_port" = ${SyslogdPort}
            "syslogd_server" = ${SyslogdServer}
            "syslogd_servers" = ${SyslogdServers}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to EditSyslogdSettings<PSCustomObject>

.DESCRIPTION

Convert from JSON to EditSyslogdSettings<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

EditSyslogdSettings<PSCustomObject>
#>
function ConvertFrom-JsonToEditSyslogdSettings {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => EditSyslogdSettings' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in EditSyslogdSettings
        $AllProperties = ("syslogd_enabled", "syslogd_port", "syslogd_server", "syslogd_servers")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "syslogd_enabled"))) { #optional property not found
            $SyslogdEnabled = $null
        } else {
            $SyslogdEnabled = $JsonParameters.PSobject.Properties["syslogd_enabled"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "syslogd_port"))) { #optional property not found
            $SyslogdPort = $null
        } else {
            $SyslogdPort = $JsonParameters.PSobject.Properties["syslogd_port"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "syslogd_server"))) { #optional property not found
            $SyslogdServer = $null
        } else {
            $SyslogdServer = $JsonParameters.PSobject.Properties["syslogd_server"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "syslogd_servers"))) { #optional property not found
            $SyslogdServers = $null
        } else {
            $SyslogdServers = $JsonParameters.PSobject.Properties["syslogd_servers"].value
        }

        $PSO = [PSCustomObject]@{
            "syslogd_enabled" = ${SyslogdEnabled}
            "syslogd_port" = ${SyslogdPort}
            "syslogd_server" = ${SyslogdServer}
            "syslogd_servers" = ${SyslogdServers}
        }

        return $PSO
    }

}

