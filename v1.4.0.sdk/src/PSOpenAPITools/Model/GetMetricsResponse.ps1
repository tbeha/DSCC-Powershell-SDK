#
# Data Services Cloud Console API
# Data Services Cloud Console API
# Version: 1.4.0
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

file-server metrics history for given granularity and timerange

.PARAMETER Count
Count of series data
.PARAMETER CustomerId
The customer application identifier
.PARAMETER EndTime
End time used for the query
.PARAMETER Generation
This value updates when the resource is updated and can be used as a short way to determine if a resource has changed or which of two different copies of a resource is more up to date. 
.PARAMETER HistoryData
No description available.
.PARAMETER StartTime
Start time used for the query
.OUTPUTS

GetMetricsResponse<PSCustomObject>
#>

function Initialize-GetMetricsResponse {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${Count},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${CustomerId},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${EndTime},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${Generation},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${HistoryData},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${StartTime}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => GetMetricsResponse' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($Count -and $Count -lt 0) {
          throw "invalid value for 'Count', must be greater than or equal to 0."
        }

        if ($EndTime -and $EndTime -lt 0) {
          throw "invalid value for 'EndTime', must be greater than or equal to 0."
        }

        if ($Generation -and $Generation -lt 0) {
          throw "invalid value for 'Generation', must be greater than or equal to 0."
        }

        if ($StartTime -and $StartTime -lt 0) {
          throw "invalid value for 'StartTime', must be greater than or equal to 0."
        }


        $PSO = [PSCustomObject]@{
            "count" = ${Count}
            "customerId" = ${CustomerId}
            "endTime" = ${EndTime}
            "generation" = ${Generation}
            "historyData" = ${HistoryData}
            "startTime" = ${StartTime}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to GetMetricsResponse<PSCustomObject>

.DESCRIPTION

Convert from JSON to GetMetricsResponse<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

GetMetricsResponse<PSCustomObject>
#>
function ConvertFrom-JsonToGetMetricsResponse {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => GetMetricsResponse' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in GetMetricsResponse
        $AllProperties = ("count", "customerId", "endTime", "generation", "historyData", "startTime")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "count"))) { #optional property not found
            $Count = $null
        } else {
            $Count = $JsonParameters.PSobject.Properties["count"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "customerId"))) { #optional property not found
            $CustomerId = $null
        } else {
            $CustomerId = $JsonParameters.PSobject.Properties["customerId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "endTime"))) { #optional property not found
            $EndTime = $null
        } else {
            $EndTime = $JsonParameters.PSobject.Properties["endTime"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "generation"))) { #optional property not found
            $Generation = $null
        } else {
            $Generation = $JsonParameters.PSobject.Properties["generation"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "historyData"))) { #optional property not found
            $HistoryData = $null
        } else {
            $HistoryData = $JsonParameters.PSobject.Properties["historyData"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "startTime"))) { #optional property not found
            $StartTime = $null
        } else {
            $StartTime = $JsonParameters.PSobject.Properties["startTime"].value
        }

        $PSO = [PSCustomObject]@{
            "count" = ${Count}
            "customerId" = ${CustomerId}
            "endTime" = ${EndTime}
            "generation" = ${Generation}
            "historyData" = ${HistoryData}
            "startTime" = ${StartTime}
        }

        return $PSO
    }

}

