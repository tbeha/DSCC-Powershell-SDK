#
# Data Services Cloud Console API
# Data Services Cloud Console API
# Version: 1.4.0
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER ApplicationSetType
Name of the application
.PARAMETER TotalSizeMiB
The total volume size in MiB of the application
.PARAMETER TotalUsedSizeMiB
The total used size in Mib of the application
.PARAMETER VolumesCount
The number of volumes in an application
.OUTPUTS

Applications<PSCustomObject>
#>

function Initialize-Applications {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ApplicationSetType},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Decimal]]
        ${TotalSizeMiB},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Decimal]]
        ${TotalUsedSizeMiB},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${VolumesCount}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => Applications' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "applicationSetType" = ${ApplicationSetType}
            "totalSizeMiB" = ${TotalSizeMiB}
            "totalUsedSizeMiB" = ${TotalUsedSizeMiB}
            "volumesCount" = ${VolumesCount}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to Applications<PSCustomObject>

.DESCRIPTION

Convert from JSON to Applications<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

Applications<PSCustomObject>
#>
function ConvertFrom-JsonToApplications {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => Applications' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in Applications
        $AllProperties = ("applicationSetType", "totalSizeMiB", "totalUsedSizeMiB", "volumesCount")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "applicationSetType"))) { #optional property not found
            $ApplicationSetType = $null
        } else {
            $ApplicationSetType = $JsonParameters.PSobject.Properties["applicationSetType"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "totalSizeMiB"))) { #optional property not found
            $TotalSizeMiB = $null
        } else {
            $TotalSizeMiB = $JsonParameters.PSobject.Properties["totalSizeMiB"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "totalUsedSizeMiB"))) { #optional property not found
            $TotalUsedSizeMiB = $null
        } else {
            $TotalUsedSizeMiB = $JsonParameters.PSobject.Properties["totalUsedSizeMiB"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "volumesCount"))) { #optional property not found
            $VolumesCount = $null
        } else {
            $VolumesCount = $JsonParameters.PSobject.Properties["volumesCount"].value
        }

        $PSO = [PSCustomObject]@{
            "applicationSetType" = ${ApplicationSetType}
            "totalSizeMiB" = ${TotalSizeMiB}
            "totalUsedSizeMiB" = ${TotalUsedSizeMiB}
            "volumesCount" = ${VolumesCount}
        }

        return $PSO
    }

}

