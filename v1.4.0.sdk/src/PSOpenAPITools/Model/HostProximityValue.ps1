#
# Data Services Cloud Console API
# Data Services Cloud Console API
# Version: 1.4.0
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER GroupName
Replication Group Name
.PARAMETER GroupUid
Replication Group ID
.PARAMETER HostId
Host ID
.PARAMETER HostName
Host name
.PARAMETER ProximitySystemName
Host proximity value
.PARAMETER SystemName
Source system name
.PARAMETER SystemUid
Source system serial number
.PARAMETER TargetName
Target system name
.PARAMETER TargetSystemId
Target system serial number
.OUTPUTS

HostProximityValue<PSCustomObject>
#>

function Initialize-HostProximityValue {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${GroupName},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${GroupUid},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${HostId},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${HostName},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ProximitySystemName},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SystemName},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SystemUid},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${TargetName},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${TargetSystemId}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => HostProximityValue' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "groupName" = ${GroupName}
            "groupUid" = ${GroupUid}
            "hostId" = ${HostId}
            "hostName" = ${HostName}
            "proximitySystemName" = ${ProximitySystemName}
            "systemName" = ${SystemName}
            "systemUid" = ${SystemUid}
            "targetName" = ${TargetName}
            "targetSystemId" = ${TargetSystemId}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to HostProximityValue<PSCustomObject>

.DESCRIPTION

Convert from JSON to HostProximityValue<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

HostProximityValue<PSCustomObject>
#>
function ConvertFrom-JsonToHostProximityValue {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => HostProximityValue' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in HostProximityValue
        $AllProperties = ("groupName", "groupUid", "hostId", "hostName", "proximitySystemName", "systemName", "systemUid", "targetName", "targetSystemId")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "groupName"))) { #optional property not found
            $GroupName = $null
        } else {
            $GroupName = $JsonParameters.PSobject.Properties["groupName"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "groupUid"))) { #optional property not found
            $GroupUid = $null
        } else {
            $GroupUid = $JsonParameters.PSobject.Properties["groupUid"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "hostId"))) { #optional property not found
            $HostId = $null
        } else {
            $HostId = $JsonParameters.PSobject.Properties["hostId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "hostName"))) { #optional property not found
            $HostName = $null
        } else {
            $HostName = $JsonParameters.PSobject.Properties["hostName"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "proximitySystemName"))) { #optional property not found
            $ProximitySystemName = $null
        } else {
            $ProximitySystemName = $JsonParameters.PSobject.Properties["proximitySystemName"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "systemName"))) { #optional property not found
            $SystemName = $null
        } else {
            $SystemName = $JsonParameters.PSobject.Properties["systemName"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "systemUid"))) { #optional property not found
            $SystemUid = $null
        } else {
            $SystemUid = $JsonParameters.PSobject.Properties["systemUid"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "targetName"))) { #optional property not found
            $TargetName = $null
        } else {
            $TargetName = $JsonParameters.PSobject.Properties["targetName"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "targetSystemId"))) { #optional property not found
            $TargetSystemId = $null
        } else {
            $TargetSystemId = $JsonParameters.PSobject.Properties["targetSystemId"].value
        }

        $PSO = [PSCustomObject]@{
            "groupName" = ${GroupName}
            "groupUid" = ${GroupUid}
            "hostId" = ${HostId}
            "hostName" = ${HostName}
            "proximitySystemName" = ${ProximitySystemName}
            "systemName" = ${SystemName}
            "systemUid" = ${SystemUid}
            "targetName" = ${TargetName}
            "targetSystemId" = ${TargetSystemId}
        }

        return $PSO
    }

}

