#
# Data Services Cloud Console API
# Data Services Cloud Console API
# Version: 1.4.0
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER AdditionalDetails
No description available.
.PARAMETER AssociatedResources
Resources that are associated with the task. These may be created by the task or other resources that are involved in the task.
.PARAMETER ChildTasks
A list of sub-tasks that were initiated by this task.
.PARAMETER CreatedAt
The time this task was created.
.PARAMETER DisplayName
The displayed name for the task.
.PARAMETER EndedAt
The time this task completed.
.PARAMETER VarError
No description available.
.PARAMETER EstimatedRunningDurationMinutes
An estimate of how long the task will run before completing.
.PARAMETER HealthStatus
The health status indicates if any errors or problems have been encountered during the processing of the task.  Expected values are OK, ERROR, WARNING, UNKNOWN, and UNSPECIFIED. 
.PARAMETER LogMessages
Time stamped messages that record the progress of the task.
.PARAMETER ParentTask
No description available.
.PARAMETER ProgressPercent
A percentage representation of progress to completion.
.PARAMETER Recommendations
Recommendations on how to fix failing tasks.
.PARAMETER SourceResource
No description available.
.PARAMETER StartedAt
The time this task was started.
.PARAMETER State
A message to indicate the current state of the task, for example the current step in a workflow. Expected values are INITIALIZED, RUNNING, FAILED, SUCCEEDED, TIMEDOUT, PAUSED, and UNSPECIFIED. 
.PARAMETER SuggestedPollingIntervalSeconds
This attribute suggests a suitable interval to use when polling for progress. Where specified this will be based on the frequency with which the task is likely to be updated.
.PARAMETER UpdatedAt
The time this task was last updated.
.PARAMETER UserId
The ID or email address of the user that initiated the task.
.OUTPUTS

TaskProperties<PSCustomObject>
#>

function Initialize-TaskProperties {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${AdditionalDetails},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${AssociatedResources},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${ChildTasks},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${CreatedAt},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${DisplayName},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${EndedAt},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${VarError},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${EstimatedRunningDurationMinutes},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${HealthStatus},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${LogMessages},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${ParentTask},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${ProgressPercent},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Recommendations},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${SourceResource},
        [Parameter(Position = 14, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${StartedAt},
        [Parameter(Position = 15, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${State},
        [Parameter(Position = 16, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${SuggestedPollingIntervalSeconds},
        [Parameter(Position = 17, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${UpdatedAt},
        [Parameter(Position = 18, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${UserId}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => TaskProperties' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($ProgressPercent -and $ProgressPercent -gt 100) {
          throw "invalid value for 'ProgressPercent', must be smaller than or equal to 100."
        }

        if ($ProgressPercent -and $ProgressPercent -lt 0) {
          throw "invalid value for 'ProgressPercent', must be greater than or equal to 0."
        }


        $PSO = [PSCustomObject]@{
            "additionalDetails" = ${AdditionalDetails}
            "associatedResources" = ${AssociatedResources}
            "childTasks" = ${ChildTasks}
            "createdAt" = ${CreatedAt}
            "displayName" = ${DisplayName}
            "endedAt" = ${EndedAt}
            "error" = ${VarError}
            "estimatedRunningDurationMinutes" = ${EstimatedRunningDurationMinutes}
            "healthStatus" = ${HealthStatus}
            "logMessages" = ${LogMessages}
            "parentTask" = ${ParentTask}
            "progressPercent" = ${ProgressPercent}
            "recommendations" = ${Recommendations}
            "sourceResource" = ${SourceResource}
            "startedAt" = ${StartedAt}
            "state" = ${State}
            "suggestedPollingIntervalSeconds" = ${SuggestedPollingIntervalSeconds}
            "updatedAt" = ${UpdatedAt}
            "userId" = ${UserId}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to TaskProperties<PSCustomObject>

.DESCRIPTION

Convert from JSON to TaskProperties<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

TaskProperties<PSCustomObject>
#>
function ConvertFrom-JsonToTaskProperties {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => TaskProperties' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in TaskProperties
        $AllProperties = ("additionalDetails", "associatedResources", "childTasks", "createdAt", "displayName", "endedAt", "error", "estimatedRunningDurationMinutes", "healthStatus", "logMessages", "parentTask", "progressPercent", "recommendations", "sourceResource", "startedAt", "state", "suggestedPollingIntervalSeconds", "updatedAt", "userId")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "additionalDetails"))) { #optional property not found
            $AdditionalDetails = $null
        } else {
            $AdditionalDetails = $JsonParameters.PSobject.Properties["additionalDetails"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "associatedResources"))) { #optional property not found
            $AssociatedResources = $null
        } else {
            $AssociatedResources = $JsonParameters.PSobject.Properties["associatedResources"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "childTasks"))) { #optional property not found
            $ChildTasks = $null
        } else {
            $ChildTasks = $JsonParameters.PSobject.Properties["childTasks"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "createdAt"))) { #optional property not found
            $CreatedAt = $null
        } else {
            $CreatedAt = $JsonParameters.PSobject.Properties["createdAt"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "displayName"))) { #optional property not found
            $DisplayName = $null
        } else {
            $DisplayName = $JsonParameters.PSobject.Properties["displayName"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "endedAt"))) { #optional property not found
            $EndedAt = $null
        } else {
            $EndedAt = $JsonParameters.PSobject.Properties["endedAt"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "error"))) { #optional property not found
            $VarError = $null
        } else {
            $VarError = $JsonParameters.PSobject.Properties["error"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "estimatedRunningDurationMinutes"))) { #optional property not found
            $EstimatedRunningDurationMinutes = $null
        } else {
            $EstimatedRunningDurationMinutes = $JsonParameters.PSobject.Properties["estimatedRunningDurationMinutes"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "healthStatus"))) { #optional property not found
            $HealthStatus = $null
        } else {
            $HealthStatus = $JsonParameters.PSobject.Properties["healthStatus"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "logMessages"))) { #optional property not found
            $LogMessages = $null
        } else {
            $LogMessages = $JsonParameters.PSobject.Properties["logMessages"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "parentTask"))) { #optional property not found
            $ParentTask = $null
        } else {
            $ParentTask = $JsonParameters.PSobject.Properties["parentTask"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "progressPercent"))) { #optional property not found
            $ProgressPercent = $null
        } else {
            $ProgressPercent = $JsonParameters.PSobject.Properties["progressPercent"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "recommendations"))) { #optional property not found
            $Recommendations = $null
        } else {
            $Recommendations = $JsonParameters.PSobject.Properties["recommendations"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "sourceResource"))) { #optional property not found
            $SourceResource = $null
        } else {
            $SourceResource = $JsonParameters.PSobject.Properties["sourceResource"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "startedAt"))) { #optional property not found
            $StartedAt = $null
        } else {
            $StartedAt = $JsonParameters.PSobject.Properties["startedAt"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "state"))) { #optional property not found
            $State = $null
        } else {
            $State = $JsonParameters.PSobject.Properties["state"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "suggestedPollingIntervalSeconds"))) { #optional property not found
            $SuggestedPollingIntervalSeconds = $null
        } else {
            $SuggestedPollingIntervalSeconds = $JsonParameters.PSobject.Properties["suggestedPollingIntervalSeconds"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "updatedAt"))) { #optional property not found
            $UpdatedAt = $null
        } else {
            $UpdatedAt = $JsonParameters.PSobject.Properties["updatedAt"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "userId"))) { #optional property not found
            $UserId = $null
        } else {
            $UserId = $JsonParameters.PSobject.Properties["userId"].value
        }

        $PSO = [PSCustomObject]@{
            "additionalDetails" = ${AdditionalDetails}
            "associatedResources" = ${AssociatedResources}
            "childTasks" = ${ChildTasks}
            "createdAt" = ${CreatedAt}
            "displayName" = ${DisplayName}
            "endedAt" = ${EndedAt}
            "error" = ${VarError}
            "estimatedRunningDurationMinutes" = ${EstimatedRunningDurationMinutes}
            "healthStatus" = ${HealthStatus}
            "logMessages" = ${LogMessages}
            "parentTask" = ${ParentTask}
            "progressPercent" = ${ProgressPercent}
            "recommendations" = ${Recommendations}
            "sourceResource" = ${SourceResource}
            "startedAt" = ${StartedAt}
            "state" = ${State}
            "suggestedPollingIntervalSeconds" = ${SuggestedPollingIntervalSeconds}
            "updatedAt" = ${UpdatedAt}
            "userId" = ${UserId}
        }

        return $PSO
    }

}

