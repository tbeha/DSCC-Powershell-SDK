#
# Data Services Cloud Console API
# Data Services Cloud Console API
# Version: 1.4.0
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER ElementName
Name of the element
.PARAMETER ErrorList
List of health check errors for this element.
.PARAMETER Messages
List of error or info messages.
.OUTPUTS

NimbleHCFResult<PSCustomObject>
#>

function Initialize-NimbleHCFResult {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ElementName},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${ErrorList},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Messages}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => NimbleHCFResult' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "element_name" = ${ElementName}
            "error_list" = ${ErrorList}
            "messages" = ${Messages}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to NimbleHCFResult<PSCustomObject>

.DESCRIPTION

Convert from JSON to NimbleHCFResult<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

NimbleHCFResult<PSCustomObject>
#>
function ConvertFrom-JsonToNimbleHCFResult {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => NimbleHCFResult' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in NimbleHCFResult
        $AllProperties = ("element_name", "error_list", "messages")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "element_name"))) { #optional property not found
            $ElementName = $null
        } else {
            $ElementName = $JsonParameters.PSobject.Properties["element_name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "error_list"))) { #optional property not found
            $ErrorList = $null
        } else {
            $ErrorList = $JsonParameters.PSobject.Properties["error_list"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "messages"))) { #optional property not found
            $Messages = $null
        } else {
            $Messages = $JsonParameters.PSobject.Properties["messages"].value
        }

        $PSO = [PSCustomObject]@{
            "element_name" = ${ElementName}
            "error_list" = ${ErrorList}
            "messages" = ${Messages}
        }

        return $PSO
    }

}

