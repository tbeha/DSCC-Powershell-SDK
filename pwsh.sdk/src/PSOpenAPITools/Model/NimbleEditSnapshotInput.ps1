#
# Data Services Cloud Console API
# Data Services Cloud Console API
# Version: 1.4.0
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Edit Nimble snapshot input. Edit a snapshot with the given attributes.

.PARAMETER AppUuid
Application identifier of snapshots. String of up to 255 alphanumeric characters, hyphen, colon, dot and underscore are allowed. Defaults to empty string.
.PARAMETER Description
Text description of snapshot. String of up to 255 printable ASCII characters. Defaults to the empty string.
.PARAMETER Id
Identifier for the snapshot. A 42 digit hexadecimal number.
.PARAMETER Metadata
Key-value pairs that augment a volume's attributes. List of key-value pairs. Keys must be unique and non-empty. When creating an object, values must be non-empty. When updating an object, an empty value causes the corresponding key to be removed. Defaults to an empty array.
.PARAMETER Online
Online state for a snapshot means it could be mounted for data restore. Defaults to 'false'.
.OUTPUTS

NimbleEditSnapshotInput<PSCustomObject>
#>

function Initialize-NimbleEditSnapshotInput {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${AppUuid},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Description},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Id},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Metadata},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${Online}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => NimbleEditSnapshotInput' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "app_uuid" = ${AppUuid}
            "description" = ${Description}
            "id" = ${Id}
            "metadata" = ${Metadata}
            "online" = ${Online}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to NimbleEditSnapshotInput<PSCustomObject>

.DESCRIPTION

Convert from JSON to NimbleEditSnapshotInput<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

NimbleEditSnapshotInput<PSCustomObject>
#>
function ConvertFrom-JsonToNimbleEditSnapshotInput {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => NimbleEditSnapshotInput' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in NimbleEditSnapshotInput
        $AllProperties = ("app_uuid", "description", "id", "metadata", "online")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'id' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) {
            throw "Error! JSON cannot be serialized due to the required property 'id' missing."
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "app_uuid"))) { #optional property not found
            $AppUuid = $null
        } else {
            $AppUuid = $JsonParameters.PSobject.Properties["app_uuid"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "description"))) { #optional property not found
            $Description = $null
        } else {
            $Description = $JsonParameters.PSobject.Properties["description"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "metadata"))) { #optional property not found
            $Metadata = $null
        } else {
            $Metadata = $JsonParameters.PSobject.Properties["metadata"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "online"))) { #optional property not found
            $Online = $null
        } else {
            $Online = $JsonParameters.PSobject.Properties["online"].value
        }

        $PSO = [PSCustomObject]@{
            "app_uuid" = ${AppUuid}
            "description" = ${Description}
            "id" = ${Id}
            "metadata" = ${Metadata}
            "online" = ${Online}
        }

        return $PSO
    }

}

