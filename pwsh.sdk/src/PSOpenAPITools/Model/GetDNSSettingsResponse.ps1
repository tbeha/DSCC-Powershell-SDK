#
# Data Services Cloud Console API
# Data Services Cloud Console API
# Version: 1.4.0
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Get system DNS configuration.

.PARAMETER CustomerId
The customer application identifier
.PARAMETER DnsServer1
DNS Server IP
.PARAMETER DnsServer2
DNS Server IP
.PARAMETER DnsServer3
DNS Server IP
.PARAMETER Nodes
Specifies the node name and status of DNS settings on that node.
.PARAMETER RequestUri
Request URI of the resource
.PARAMETER SearchDomain
Specifies the search domain, the search list is limited to 6 domains with a total of 256 characters
.OUTPUTS

GetDNSSettingsResponse<PSCustomObject>
#>

function Initialize-GetDNSSettingsResponse {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${CustomerId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${DnsServer1},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${DnsServer2},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${DnsServer3},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Nodes},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${RequestUri},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SearchDomain}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => GetDNSSettingsResponse' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if (!$SearchDomain -and $SearchDomain.length -gt 256) {
            throw "invalid value for 'SearchDomain', the character length must be smaller than or equal to 256."
        }


        $PSO = [PSCustomObject]@{
            "customerId" = ${CustomerId}
            "dnsServer1" = ${DnsServer1}
            "dnsServer2" = ${DnsServer2}
            "dnsServer3" = ${DnsServer3}
            "nodes" = ${Nodes}
            "requestUri" = ${RequestUri}
            "searchDomain" = ${SearchDomain}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to GetDNSSettingsResponse<PSCustomObject>

.DESCRIPTION

Convert from JSON to GetDNSSettingsResponse<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

GetDNSSettingsResponse<PSCustomObject>
#>
function ConvertFrom-JsonToGetDNSSettingsResponse {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => GetDNSSettingsResponse' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in GetDNSSettingsResponse
        $AllProperties = ("customerId", "dnsServer1", "dnsServer2", "dnsServer3", "nodes", "requestUri", "searchDomain")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "customerId"))) { #optional property not found
            $CustomerId = $null
        } else {
            $CustomerId = $JsonParameters.PSobject.Properties["customerId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "dnsServer1"))) { #optional property not found
            $DnsServer1 = $null
        } else {
            $DnsServer1 = $JsonParameters.PSobject.Properties["dnsServer1"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "dnsServer2"))) { #optional property not found
            $DnsServer2 = $null
        } else {
            $DnsServer2 = $JsonParameters.PSobject.Properties["dnsServer2"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "dnsServer3"))) { #optional property not found
            $DnsServer3 = $null
        } else {
            $DnsServer3 = $JsonParameters.PSobject.Properties["dnsServer3"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "nodes"))) { #optional property not found
            $Nodes = $null
        } else {
            $Nodes = $JsonParameters.PSobject.Properties["nodes"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "requestUri"))) { #optional property not found
            $RequestUri = $null
        } else {
            $RequestUri = $JsonParameters.PSobject.Properties["requestUri"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "searchDomain"))) { #optional property not found
            $SearchDomain = $null
        } else {
            $SearchDomain = $JsonParameters.PSobject.Properties["searchDomain"].value
        }

        $PSO = [PSCustomObject]@{
            "customerId" = ${CustomerId}
            "dnsServer1" = ${DnsServer1}
            "dnsServer2" = ${DnsServer2}
            "dnsServer3" = ${DnsServer3}
            "nodes" = ${Nodes}
            "requestUri" = ${RequestUri}
            "searchDomain" = ${SearchDomain}
        }

        return $PSO
    }

}

