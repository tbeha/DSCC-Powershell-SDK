#
# Data Services Cloud Console API
# Data Services Cloud Console API
# Version: 1.4.0
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Information about the Fibre Channel initiator.

.PARAMETER InitiatorAlias
Alias of the Fibre Channel initiator.
.PARAMETER InitiatorFcid
FCID assigned to the Fibre Channel initiator.
.PARAMETER InitiatorSwitchName
Name of the switch used by the Fibre Channel initiator.
.PARAMETER InitiatorSwitchPort
Port on the switch used by the Fibre Channel initiator.
.PARAMETER InitiatorSymbolicNodename
Symbolic node name associated with the Fibre Channel initiator.
.PARAMETER InitiatorSymbolicPortname
Symbolic port name associated with the Fibre Channel initiator.
.PARAMETER InitiatorWwpn
WWPN (World Wide Port Name) of the Fibre Channel initiator.
.OUTPUTS

NimbleFCInitiatorInfo<PSCustomObject>
#>

function Initialize-NimbleFCInitiatorInfo {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${InitiatorAlias},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${InitiatorFcid},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${InitiatorSwitchName},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${InitiatorSwitchPort},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${InitiatorSymbolicNodename},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${InitiatorSymbolicPortname},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${InitiatorWwpn}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => NimbleFCInitiatorInfo' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "initiator_alias" = ${InitiatorAlias}
            "initiator_fcid" = ${InitiatorFcid}
            "initiator_switch_name" = ${InitiatorSwitchName}
            "initiator_switch_port" = ${InitiatorSwitchPort}
            "initiator_symbolic_nodename" = ${InitiatorSymbolicNodename}
            "initiator_symbolic_portname" = ${InitiatorSymbolicPortname}
            "initiator_wwpn" = ${InitiatorWwpn}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to NimbleFCInitiatorInfo<PSCustomObject>

.DESCRIPTION

Convert from JSON to NimbleFCInitiatorInfo<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

NimbleFCInitiatorInfo<PSCustomObject>
#>
function ConvertFrom-JsonToNimbleFCInitiatorInfo {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => NimbleFCInitiatorInfo' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in NimbleFCInitiatorInfo
        $AllProperties = ("initiator_alias", "initiator_fcid", "initiator_switch_name", "initiator_switch_port", "initiator_symbolic_nodename", "initiator_symbolic_portname", "initiator_wwpn")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "initiator_alias"))) { #optional property not found
            $InitiatorAlias = $null
        } else {
            $InitiatorAlias = $JsonParameters.PSobject.Properties["initiator_alias"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "initiator_fcid"))) { #optional property not found
            $InitiatorFcid = $null
        } else {
            $InitiatorFcid = $JsonParameters.PSobject.Properties["initiator_fcid"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "initiator_switch_name"))) { #optional property not found
            $InitiatorSwitchName = $null
        } else {
            $InitiatorSwitchName = $JsonParameters.PSobject.Properties["initiator_switch_name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "initiator_switch_port"))) { #optional property not found
            $InitiatorSwitchPort = $null
        } else {
            $InitiatorSwitchPort = $JsonParameters.PSobject.Properties["initiator_switch_port"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "initiator_symbolic_nodename"))) { #optional property not found
            $InitiatorSymbolicNodename = $null
        } else {
            $InitiatorSymbolicNodename = $JsonParameters.PSobject.Properties["initiator_symbolic_nodename"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "initiator_symbolic_portname"))) { #optional property not found
            $InitiatorSymbolicPortname = $null
        } else {
            $InitiatorSymbolicPortname = $JsonParameters.PSobject.Properties["initiator_symbolic_portname"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "initiator_wwpn"))) { #optional property not found
            $InitiatorWwpn = $null
        } else {
            $InitiatorWwpn = $JsonParameters.PSobject.Properties["initiator_wwpn"].value
        }

        $PSO = [PSCustomObject]@{
            "initiator_alias" = ${InitiatorAlias}
            "initiator_fcid" = ${InitiatorFcid}
            "initiator_switch_name" = ${InitiatorSwitchName}
            "initiator_switch_port" = ${InitiatorSwitchPort}
            "initiator_symbolic_nodename" = ${InitiatorSymbolicNodename}
            "initiator_symbolic_portname" = ${InitiatorSymbolicPortname}
            "initiator_wwpn" = ${InitiatorWwpn}
        }

        return $PSO
    }

}

