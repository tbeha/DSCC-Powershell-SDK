#
# Data Services Cloud Console API
# Data Services Cloud Console API
# Version: 1.4.0
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Request body for creating physical copy of a snapshot.

.PARAMETER AutoLun
Secify to use auto lun number.
.PARAMETER DestinationCpg
Name of the User CPG
.PARAMETER DestinationVolume
Name of the destination volume.
.PARAMETER HostGroupId
Unique identifier of host group.
.PARAMETER Lun
LUN of volume.
.PARAMETER Priority
Priority of the task for clone of a snashot. Defualts to MEDIUM.
.OUTPUTS

ArcusCreateCloneSnapshotInput<PSCustomObject>
#>

function Initialize-ArcusCreateCloneSnapshotInput {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${AutoLun},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${DestinationCpg},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${DestinationVolume},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${HostGroupId},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${Lun},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("PRIORITYTYPE_HIGH", "PRIORITYTYPE_MED", "PRIORITYTYPE_LOW")]
        [String]
        ${Priority}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => ArcusCreateCloneSnapshotInput' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $DestinationVolume) {
            throw "invalid value for 'DestinationVolume', 'DestinationVolume' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "autoLun" = ${AutoLun}
            "destinationCpg" = ${DestinationCpg}
            "destinationVolume" = ${DestinationVolume}
            "hostGroupId" = ${HostGroupId}
            "lun" = ${Lun}
            "priority" = ${Priority}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to ArcusCreateCloneSnapshotInput<PSCustomObject>

.DESCRIPTION

Convert from JSON to ArcusCreateCloneSnapshotInput<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

ArcusCreateCloneSnapshotInput<PSCustomObject>
#>
function ConvertFrom-JsonToArcusCreateCloneSnapshotInput {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => ArcusCreateCloneSnapshotInput' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in ArcusCreateCloneSnapshotInput
        $AllProperties = ("autoLun", "destinationCpg", "destinationVolume", "hostGroupId", "lun", "priority")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'destinationVolume' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "destinationVolume"))) {
            throw "Error! JSON cannot be serialized due to the required property 'destinationVolume' missing."
        } else {
            $DestinationVolume = $JsonParameters.PSobject.Properties["destinationVolume"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "autoLun"))) { #optional property not found
            $AutoLun = $null
        } else {
            $AutoLun = $JsonParameters.PSobject.Properties["autoLun"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "destinationCpg"))) { #optional property not found
            $DestinationCpg = $null
        } else {
            $DestinationCpg = $JsonParameters.PSobject.Properties["destinationCpg"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "hostGroupId"))) { #optional property not found
            $HostGroupId = $null
        } else {
            $HostGroupId = $JsonParameters.PSobject.Properties["hostGroupId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "lun"))) { #optional property not found
            $Lun = $null
        } else {
            $Lun = $JsonParameters.PSobject.Properties["lun"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "priority"))) { #optional property not found
            $Priority = $null
        } else {
            $Priority = $JsonParameters.PSobject.Properties["priority"].value
        }

        $PSO = [PSCustomObject]@{
            "autoLun" = ${AutoLun}
            "destinationCpg" = ${DestinationCpg}
            "destinationVolume" = ${DestinationVolume}
            "hostGroupId" = ${HostGroupId}
            "lun" = ${Lun}
            "priority" = ${Priority}
        }

        return $PSO
    }

}

