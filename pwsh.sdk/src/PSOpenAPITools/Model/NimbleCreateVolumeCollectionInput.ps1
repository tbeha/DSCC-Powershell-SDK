#
# Data Services Cloud Console API
# Data Services Cloud Console API
# Version: 1.4.0
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Create Nimble volume-collection input.

.PARAMETER AgentHostname
Generic backup agent hostname. Custom port number can be specified with agent hostname using \\"":\\"". String of up to 64 alphanumeric characters, - and . and : are allowed after first character.
.PARAMETER AgentUsername
Generic backup agent username. String of up to 64 alphanumeric characters, - and . and : are allowed after first character.
.PARAMETER AppClusterName
If the application is running within a Windows cluster environment, this is the cluster name. String of up to 64 alphanumeric characters, - and . and : are allowed after first character.
.PARAMETER AppId
Application ID running on the server. Application ID can only be specified if application synchronization is \\""vss\\"". Possible values: 'inval', 'exchange', 'exchange_dag', 'hyperv', 'sql2005', 'sql2008', 'sql2012', 'sql2014', 'sql2016', 'sql2017'.
.PARAMETER AppServer
Application server hostname. String of up to 64 alphanumeric characters, - and . and : are allowed after first character.
.PARAMETER AppServiceName
If the application is running within a Windows cluster environment then this is the instance name of the service running within the cluster environment. String of up to 64 alphanumeric characters, - and . and : are allowed after first character.
.PARAMETER AppSync
Application Synchronization. Possible values: 'none', 'vss', 'vmware', 'generic'.
.PARAMETER Description
Text description of volume collection. String of up to 255 printable ASCII characters.
.PARAMETER IsStandaloneVolcoll
Indicates whether this is a standalone volume collection. Possible values: 'true', 'false'.
.PARAMETER Metadata
Key-value pairs that augment a volume collection's attributes. List of key-value pairs. Keys must be unique and non-empty. When creating an object, values must be non-empty. When updating an object, an empty value causes the corresponding key to be removed.
.PARAMETER Name
Name of volume collection. String of up to 64 alphanumeric characters, - and . and : are allowed after first character.
.PARAMETER ProttmplId
Identifier of the protection template whose attributes will be used to create this volume collection. This attribute is only used for input when creating a volume collection and is not outputed. A 42 digit hexadecimal number.
.PARAMETER ReplicationType
Type of replication configured for the volume collection. Possible values are periodic snapshot and synchronous. Default value is periodic_snapshot.
.PARAMETER VcenterHostname
VMware vCenter hostname. Custom port number can be specified with vCenter hostname using \\"":\\"". String of up to 64 alphanumeric characters, - and . and : are allowed after first character.
.PARAMETER VcenterUsername
Application VMware vCenter username. String of up to 80 alphanumeric characters, beginning with a letter. It can include ampersand (@), backslash (\), dash (-), period (.), and underscore (_).
.PARAMETER VolumeList
List of volume id's that need to be added to the volume collection.
.OUTPUTS

NimbleCreateVolumeCollectionInput<PSCustomObject>
#>

function Initialize-NimbleCreateVolumeCollectionInput {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${AgentHostname},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${AgentUsername},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${AppClusterName},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${AppId},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${AppServer},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${AppServiceName},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${AppSync},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Description},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${IsStandaloneVolcoll},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Metadata},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ProttmplId},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ReplicationType},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${VcenterHostname},
        [Parameter(Position = 14, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${VcenterUsername},
        [Parameter(Position = 15, ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${VolumeList}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => NimbleCreateVolumeCollectionInput' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $Name) {
            throw "invalid value for 'Name', 'Name' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "agent_hostname" = ${AgentHostname}
            "agent_username" = ${AgentUsername}
            "app_cluster_name" = ${AppClusterName}
            "app_id" = ${AppId}
            "app_server" = ${AppServer}
            "app_service_name" = ${AppServiceName}
            "app_sync" = ${AppSync}
            "description" = ${Description}
            "is_standalone_volcoll" = ${IsStandaloneVolcoll}
            "metadata" = ${Metadata}
            "name" = ${Name}
            "prottmpl_id" = ${ProttmplId}
            "replication_type" = ${ReplicationType}
            "vcenter_hostname" = ${VcenterHostname}
            "vcenter_username" = ${VcenterUsername}
            "volume_list" = ${VolumeList}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to NimbleCreateVolumeCollectionInput<PSCustomObject>

.DESCRIPTION

Convert from JSON to NimbleCreateVolumeCollectionInput<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

NimbleCreateVolumeCollectionInput<PSCustomObject>
#>
function ConvertFrom-JsonToNimbleCreateVolumeCollectionInput {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => NimbleCreateVolumeCollectionInput' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in NimbleCreateVolumeCollectionInput
        $AllProperties = ("agent_hostname", "agent_username", "app_cluster_name", "app_id", "app_server", "app_service_name", "app_sync", "description", "is_standalone_volcoll", "metadata", "name", "prottmpl_id", "replication_type", "vcenter_hostname", "vcenter_username", "volume_list")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'name' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) {
            throw "Error! JSON cannot be serialized due to the required property 'name' missing."
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "agent_hostname"))) { #optional property not found
            $AgentHostname = $null
        } else {
            $AgentHostname = $JsonParameters.PSobject.Properties["agent_hostname"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "agent_username"))) { #optional property not found
            $AgentUsername = $null
        } else {
            $AgentUsername = $JsonParameters.PSobject.Properties["agent_username"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "app_cluster_name"))) { #optional property not found
            $AppClusterName = $null
        } else {
            $AppClusterName = $JsonParameters.PSobject.Properties["app_cluster_name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "app_id"))) { #optional property not found
            $AppId = $null
        } else {
            $AppId = $JsonParameters.PSobject.Properties["app_id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "app_server"))) { #optional property not found
            $AppServer = $null
        } else {
            $AppServer = $JsonParameters.PSobject.Properties["app_server"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "app_service_name"))) { #optional property not found
            $AppServiceName = $null
        } else {
            $AppServiceName = $JsonParameters.PSobject.Properties["app_service_name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "app_sync"))) { #optional property not found
            $AppSync = $null
        } else {
            $AppSync = $JsonParameters.PSobject.Properties["app_sync"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "description"))) { #optional property not found
            $Description = $null
        } else {
            $Description = $JsonParameters.PSobject.Properties["description"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "is_standalone_volcoll"))) { #optional property not found
            $IsStandaloneVolcoll = $null
        } else {
            $IsStandaloneVolcoll = $JsonParameters.PSobject.Properties["is_standalone_volcoll"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "metadata"))) { #optional property not found
            $Metadata = $null
        } else {
            $Metadata = $JsonParameters.PSobject.Properties["metadata"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "prottmpl_id"))) { #optional property not found
            $ProttmplId = $null
        } else {
            $ProttmplId = $JsonParameters.PSobject.Properties["prottmpl_id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "replication_type"))) { #optional property not found
            $ReplicationType = $null
        } else {
            $ReplicationType = $JsonParameters.PSobject.Properties["replication_type"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "vcenter_hostname"))) { #optional property not found
            $VcenterHostname = $null
        } else {
            $VcenterHostname = $JsonParameters.PSobject.Properties["vcenter_hostname"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "vcenter_username"))) { #optional property not found
            $VcenterUsername = $null
        } else {
            $VcenterUsername = $JsonParameters.PSobject.Properties["vcenter_username"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "volume_list"))) { #optional property not found
            $VolumeList = $null
        } else {
            $VolumeList = $JsonParameters.PSobject.Properties["volume_list"].value
        }

        $PSO = [PSCustomObject]@{
            "agent_hostname" = ${AgentHostname}
            "agent_username" = ${AgentUsername}
            "app_cluster_name" = ${AppClusterName}
            "app_id" = ${AppId}
            "app_server" = ${AppServer}
            "app_service_name" = ${AppServiceName}
            "app_sync" = ${AppSync}
            "description" = ${Description}
            "is_standalone_volcoll" = ${IsStandaloneVolcoll}
            "metadata" = ${Metadata}
            "name" = ${Name}
            "prottmpl_id" = ${ProttmplId}
            "replication_type" = ${ReplicationType}
            "vcenter_hostname" = ${VcenterHostname}
            "vcenter_username" = ${VcenterUsername}
            "volume_list" = ${VolumeList}
        }

        return $PSO
    }

}

