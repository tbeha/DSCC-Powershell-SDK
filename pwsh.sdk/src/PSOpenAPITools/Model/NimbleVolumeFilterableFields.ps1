#
# Data Services Cloud Console API
# Data Services Cloud Console API
# Version: 1.4.0
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER BaseSnapId
Base snapshot ID. This attribute is required together with name and clone when cloning a volume with the create operation. A 42 digit hexadecimal number. `Filter, Sort`
.PARAMETER BaseSnapName
Name of base snapshot. String of up to 215 alphanumeric, hyphenated, colon, or period-separated characters; but cannot begin with hyphen, colon or period. This type is used for object sets containing volumes, snapshots, snapshot collections and protocol endpoints. `Filter, Sort`
.PARAMETER Clone
Whether this volume is a clone. Use this attribute in combination with name and base_snap_id to create a clone by setting clone = true. `Filter, Sort`
.PARAMETER DestPoolId
ID of the destination pool where the volume is moving to. A 42 digit hexadecimal number. `Filter, Sort`
.PARAMETER DestPoolName
Name of the destination pool where the volume is moving to. String of up to 64 alphanumeric characters, - and . and : are allowed after first character. `Filter, Sort`
.PARAMETER FolderId
ID of the folder holding this volume. An optional NsObjectID. A 42 digit hexadecimal number or the empty string. `Filter, Sort`
.PARAMETER FolderName
Name of the folder holding this volume. It can be empty. String of up to 64 alphanumeric characters, - and . and : are allowed after first character. `Filter, Sort`
.PARAMETER Id
Identifier for the volume. A 42 digit hexadecimal number. `Filter`
.PARAMETER Name
Name of the volume. String of up to 215 alphanumeric, hyphenated, colon, or period-separated characters; but cannot begin with hyphen, colon or period. `Filter, Sort`
.PARAMETER Online
Online state of volume, available for host initiators to establish connections. `Filter, Sort`
.PARAMETER OwnedByGroup
Name of group that currently owns the volume. String of up to 64 alphanumeric characters, - and . and : are allowed after first character. `Filter, Sort`
.PARAMETER OwnedByGroupId
ID of group that currently owns the volume. A 42 digit hexadecimal number. `Filter, Sort`
.PARAMETER ParentVolId
Parent volume ID. A 42 digit hexadecimal number. `Filter, Sort`
.PARAMETER ParentVolName
Name of parent volume. String of up to 215 alphanumeric, hyphenated, colon, or period-separated characters; but cannot begin with hyphen, colon or period. This type is used for object sets containing volumes, snapshots, snapshot collections and protocol endpoints. `Filter, Sort`
.PARAMETER PerfpolicyId
Identifier of the performance policy. After creating a volume, performance policy for the volume can only be changed to another performance policy with same block size. A 42 digit hexadecimal number. `Filter, Sort`
.PARAMETER PerfpolicyName
Name of performance policy. String of up to 64 alphanumeric characters, - and . and : are allowed after first character. `Filter, Sort`
.PARAMETER PoolId
Identifier associated with the pool in the storage pool table. A 42 digit hexadecimal number. `Filter, Sort`
.PARAMETER PoolName
Name of the pool where the volume resides. Volume data will be distributed across arrays over which specified pool is defined. If pool option is not specified, volume is assigned to the default pool. String of up to 64 alphanumeric characters, - and . and : are allowed after first character. `Filter, Sort`
.PARAMETER ReadOnly
Volume is read-only. `Filter, Sort`
.PARAMETER ReplicationRole
Replication role that this volume performs. Possible values: 'periodic_snapshot_downstream', 'synchronous_upstream', 'synchronous_downstream', 'no_replication', 'periodic_snapshot_upstream'. `Filter, Sort`
.PARAMETER SecondarySerialNumber
Secondary identifier associated with the volume for the SCSI protocol. `Filter, Sort`
.PARAMETER SerialNumber
Identifier associated with the volume for the SCSI protocol. A 32 digit hexadecimal number. `Filter, Sort`
.PARAMETER Size
Volume size in megabytes. Size is required for creating a volume but not for cloning an existing volume. `Filter, Sort`
.PARAMETER TargetName
The iSCSI Qualified Name (IQN) or the Fibre Channel World Wide Node Name (WWNN) of the target volume. The iSCSI Qualified Name (IQN) or the Fibre Channel World Wide Node Name (WWNN) of the target. `Filter, Sort`
.PARAMETER VolcollId
ID of volume collection of which this volume is a member. Use this attribute in update operation to associate or dissociate volumes with or from volume collections. When associating, set this attribute to the ID of the volume collection. When dissociating, set this attribute to empty string. An optional NsObjectID. A 42 digit hexadecimal number or the empty string. `Filter, Sort`
.PARAMETER VolcollName
Name of volume collection of which this volume is a member. String of up to 64 alphanumeric characters, - and . and : are allowed after first character. `Filter, Sort`
.OUTPUTS

NimbleVolumeFilterableFields<PSCustomObject>
#>

function Initialize-NimbleVolumeFilterableFields {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${BaseSnapId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${BaseSnapName},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${Clone},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${DestPoolId},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${DestPoolName},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${FolderId},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${FolderName},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Id},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${Online},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${OwnedByGroup},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${OwnedByGroupId},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ParentVolId},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ParentVolName},
        [Parameter(Position = 14, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${PerfpolicyId},
        [Parameter(Position = 15, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${PerfpolicyName},
        [Parameter(Position = 16, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${PoolId},
        [Parameter(Position = 17, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${PoolName},
        [Parameter(Position = 18, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${ReadOnly},
        [Parameter(Position = 19, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ReplicationRole},
        [Parameter(Position = 20, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SecondarySerialNumber},
        [Parameter(Position = 21, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SerialNumber},
        [Parameter(Position = 22, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${Size},
        [Parameter(Position = 23, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${TargetName},
        [Parameter(Position = 24, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${VolcollId},
        [Parameter(Position = 25, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${VolcollName}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => NimbleVolumeFilterableFields' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "base_snap_id" = ${BaseSnapId}
            "base_snap_name" = ${BaseSnapName}
            "clone" = ${Clone}
            "dest_pool_id" = ${DestPoolId}
            "dest_pool_name" = ${DestPoolName}
            "folder_id" = ${FolderId}
            "folder_name" = ${FolderName}
            "id" = ${Id}
            "name" = ${Name}
            "online" = ${Online}
            "owned_by_group" = ${OwnedByGroup}
            "owned_by_group_id" = ${OwnedByGroupId}
            "parent_vol_id" = ${ParentVolId}
            "parent_vol_name" = ${ParentVolName}
            "perfpolicy_id" = ${PerfpolicyId}
            "perfpolicy_name" = ${PerfpolicyName}
            "pool_id" = ${PoolId}
            "pool_name" = ${PoolName}
            "read_only" = ${ReadOnly}
            "replication_role" = ${ReplicationRole}
            "secondary_serial_number" = ${SecondarySerialNumber}
            "serial_number" = ${SerialNumber}
            "size" = ${Size}
            "target_name" = ${TargetName}
            "volcoll_id" = ${VolcollId}
            "volcoll_name" = ${VolcollName}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to NimbleVolumeFilterableFields<PSCustomObject>

.DESCRIPTION

Convert from JSON to NimbleVolumeFilterableFields<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

NimbleVolumeFilterableFields<PSCustomObject>
#>
function ConvertFrom-JsonToNimbleVolumeFilterableFields {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => NimbleVolumeFilterableFields' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in NimbleVolumeFilterableFields
        $AllProperties = ("base_snap_id", "base_snap_name", "clone", "dest_pool_id", "dest_pool_name", "folder_id", "folder_name", "id", "name", "online", "owned_by_group", "owned_by_group_id", "parent_vol_id", "parent_vol_name", "perfpolicy_id", "perfpolicy_name", "pool_id", "pool_name", "read_only", "replication_role", "secondary_serial_number", "serial_number", "size", "target_name", "volcoll_id", "volcoll_name")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "base_snap_id"))) { #optional property not found
            $BaseSnapId = $null
        } else {
            $BaseSnapId = $JsonParameters.PSobject.Properties["base_snap_id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "base_snap_name"))) { #optional property not found
            $BaseSnapName = $null
        } else {
            $BaseSnapName = $JsonParameters.PSobject.Properties["base_snap_name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "clone"))) { #optional property not found
            $Clone = $null
        } else {
            $Clone = $JsonParameters.PSobject.Properties["clone"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "dest_pool_id"))) { #optional property not found
            $DestPoolId = $null
        } else {
            $DestPoolId = $JsonParameters.PSobject.Properties["dest_pool_id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "dest_pool_name"))) { #optional property not found
            $DestPoolName = $null
        } else {
            $DestPoolName = $JsonParameters.PSobject.Properties["dest_pool_name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "folder_id"))) { #optional property not found
            $FolderId = $null
        } else {
            $FolderId = $JsonParameters.PSobject.Properties["folder_id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "folder_name"))) { #optional property not found
            $FolderName = $null
        } else {
            $FolderName = $JsonParameters.PSobject.Properties["folder_name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) { #optional property not found
            $Id = $null
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) { #optional property not found
            $Name = $null
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "online"))) { #optional property not found
            $Online = $null
        } else {
            $Online = $JsonParameters.PSobject.Properties["online"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "owned_by_group"))) { #optional property not found
            $OwnedByGroup = $null
        } else {
            $OwnedByGroup = $JsonParameters.PSobject.Properties["owned_by_group"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "owned_by_group_id"))) { #optional property not found
            $OwnedByGroupId = $null
        } else {
            $OwnedByGroupId = $JsonParameters.PSobject.Properties["owned_by_group_id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "parent_vol_id"))) { #optional property not found
            $ParentVolId = $null
        } else {
            $ParentVolId = $JsonParameters.PSobject.Properties["parent_vol_id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "parent_vol_name"))) { #optional property not found
            $ParentVolName = $null
        } else {
            $ParentVolName = $JsonParameters.PSobject.Properties["parent_vol_name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "perfpolicy_id"))) { #optional property not found
            $PerfpolicyId = $null
        } else {
            $PerfpolicyId = $JsonParameters.PSobject.Properties["perfpolicy_id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "perfpolicy_name"))) { #optional property not found
            $PerfpolicyName = $null
        } else {
            $PerfpolicyName = $JsonParameters.PSobject.Properties["perfpolicy_name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "pool_id"))) { #optional property not found
            $PoolId = $null
        } else {
            $PoolId = $JsonParameters.PSobject.Properties["pool_id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "pool_name"))) { #optional property not found
            $PoolName = $null
        } else {
            $PoolName = $JsonParameters.PSobject.Properties["pool_name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "read_only"))) { #optional property not found
            $ReadOnly = $null
        } else {
            $ReadOnly = $JsonParameters.PSobject.Properties["read_only"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "replication_role"))) { #optional property not found
            $ReplicationRole = $null
        } else {
            $ReplicationRole = $JsonParameters.PSobject.Properties["replication_role"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "secondary_serial_number"))) { #optional property not found
            $SecondarySerialNumber = $null
        } else {
            $SecondarySerialNumber = $JsonParameters.PSobject.Properties["secondary_serial_number"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "serial_number"))) { #optional property not found
            $SerialNumber = $null
        } else {
            $SerialNumber = $JsonParameters.PSobject.Properties["serial_number"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "size"))) { #optional property not found
            $Size = $null
        } else {
            $Size = $JsonParameters.PSobject.Properties["size"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "target_name"))) { #optional property not found
            $TargetName = $null
        } else {
            $TargetName = $JsonParameters.PSobject.Properties["target_name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "volcoll_id"))) { #optional property not found
            $VolcollId = $null
        } else {
            $VolcollId = $JsonParameters.PSobject.Properties["volcoll_id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "volcoll_name"))) { #optional property not found
            $VolcollName = $null
        } else {
            $VolcollName = $JsonParameters.PSobject.Properties["volcoll_name"].value
        }

        $PSO = [PSCustomObject]@{
            "base_snap_id" = ${BaseSnapId}
            "base_snap_name" = ${BaseSnapName}
            "clone" = ${Clone}
            "dest_pool_id" = ${DestPoolId}
            "dest_pool_name" = ${DestPoolName}
            "folder_id" = ${FolderId}
            "folder_name" = ${FolderName}
            "id" = ${Id}
            "name" = ${Name}
            "online" = ${Online}
            "owned_by_group" = ${OwnedByGroup}
            "owned_by_group_id" = ${OwnedByGroupId}
            "parent_vol_id" = ${ParentVolId}
            "parent_vol_name" = ${ParentVolName}
            "perfpolicy_id" = ${PerfpolicyId}
            "perfpolicy_name" = ${PerfpolicyName}
            "pool_id" = ${PoolId}
            "pool_name" = ${PoolName}
            "read_only" = ${ReadOnly}
            "replication_role" = ${ReplicationRole}
            "secondary_serial_number" = ${SecondarySerialNumber}
            "serial_number" = ${SerialNumber}
            "size" = ${Size}
            "target_name" = ${TargetName}
            "volcoll_id" = ${VolcollId}
            "volcoll_name" = ${VolcollName}
        }

        return $PSO
    }

}

