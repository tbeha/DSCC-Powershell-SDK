#
# Data Services Cloud Console API
# Data Services Cloud Console API
# Version: 1.4.0
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER AssociatedLinks
Associated Links Details
.PARAMETER Connector
Connector on slot on IOM in Cage for connection
.PARAMETER ConsoleUri
consoleUri for detailed storage object
.PARAMETER CurrentSpeed
Current speed of connection
.PARAMETER CustomerId
customerId
.PARAMETER Disabled
Disabled for connection
.PARAMETER Displayname
Name to be used for display purposes
.PARAMETER Domain
Domain that the resource belongs to
.PARAMETER ElementStatusCode
No description available.
.PARAMETER EnclosureCardId
ID of the enclosure card
.PARAMETER EnclosureCardPCIUid
UID of the enclosure card PCI card
.PARAMETER EnclosureCardUid
Unique Identifier of the enclosure card
.PARAMETER EnclosureId
ID of the enclosure
.PARAMETER EnclosureName
Name of the enclosure.
.PARAMETER EnclosureUid
Unique Identifier of the enclosure. `Filter`
.PARAMETER Generation
generation
.PARAMETER Id
Unique Identifier of the resource
.PARAMETER Ipv4Address
ip v4 address of connection
.PARAMETER Ipv6Address
ip v6 address of connection
.PARAMETER Label
Connection label
.PARAMETER LinkSpeed
Link speed for connection
.PARAMETER Locate
Locate for connection
.PARAMETER MacAddress
mac address of connection
.PARAMETER NodePort
No description available.
.PARAMETER RequestUri
resourceUri for detailed enclosure object
.PARAMETER ResourceUri
resourceUri for detailed enclosure connector object
.PARAMETER Slot
Slot on IOM in Cage for connection
.PARAMETER SystemId
Id of the array
.PARAMETER Type
Type of connection
.OUTPUTS

ArcusenclosureConnectorDetails<PSCustomObject>
#>

function Initialize-ArcusenclosureConnectorDetails {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${AssociatedLinks},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${Connector},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ConsoleUri},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${CurrentSpeed},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${CustomerId},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Disabled},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Displayname},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Domain},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${ElementStatusCode},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${EnclosureCardId},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${EnclosureCardPCIUid},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${EnclosureCardUid},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${EnclosureId},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${EnclosureName},
        [Parameter(Position = 14, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${EnclosureUid},
        [Parameter(Position = 15, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Generation},
        [Parameter(Position = 16, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Id},
        [Parameter(Position = 17, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Ipv4Address},
        [Parameter(Position = 18, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Ipv6Address},
        [Parameter(Position = 19, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Label},
        [Parameter(Position = 20, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${LinkSpeed},
        [Parameter(Position = 21, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Locate},
        [Parameter(Position = 22, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${MacAddress},
        [Parameter(Position = 23, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${NodePort},
        [Parameter(Position = 24, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${RequestUri},
        [Parameter(Position = 25, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ResourceUri},
        [Parameter(Position = 26, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${Slot},
        [Parameter(Position = 27, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SystemId},
        [Parameter(Position = 28, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Type}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => ArcusenclosureConnectorDetails' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "associatedLinks" = ${AssociatedLinks}
            "connector" = ${Connector}
            "consoleUri" = ${ConsoleUri}
            "currentSpeed" = ${CurrentSpeed}
            "customerId" = ${CustomerId}
            "disabled" = ${Disabled}
            "displayname" = ${Displayname}
            "domain" = ${Domain}
            "elementStatusCode" = ${ElementStatusCode}
            "enclosureCardId" = ${EnclosureCardId}
            "enclosureCardPCIUid" = ${EnclosureCardPCIUid}
            "enclosureCardUid" = ${EnclosureCardUid}
            "enclosureId" = ${EnclosureId}
            "enclosureName" = ${EnclosureName}
            "enclosureUid" = ${EnclosureUid}
            "generation" = ${Generation}
            "id" = ${Id}
            "ipv4Address" = ${Ipv4Address}
            "ipv6Address" = ${Ipv6Address}
            "label" = ${Label}
            "linkSpeed" = ${LinkSpeed}
            "locate" = ${Locate}
            "macAddress" = ${MacAddress}
            "nodePort" = ${NodePort}
            "requestUri" = ${RequestUri}
            "resourceUri" = ${ResourceUri}
            "slot" = ${Slot}
            "systemId" = ${SystemId}
            "type" = ${Type}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to ArcusenclosureConnectorDetails<PSCustomObject>

.DESCRIPTION

Convert from JSON to ArcusenclosureConnectorDetails<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

ArcusenclosureConnectorDetails<PSCustomObject>
#>
function ConvertFrom-JsonToArcusenclosureConnectorDetails {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => ArcusenclosureConnectorDetails' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in ArcusenclosureConnectorDetails
        $AllProperties = ("associatedLinks", "connector", "consoleUri", "currentSpeed", "customerId", "disabled", "displayname", "domain", "elementStatusCode", "enclosureCardId", "enclosureCardPCIUid", "enclosureCardUid", "enclosureId", "enclosureName", "enclosureUid", "generation", "id", "ipv4Address", "ipv6Address", "label", "linkSpeed", "locate", "macAddress", "nodePort", "requestUri", "resourceUri", "slot", "systemId", "type")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "associatedLinks"))) { #optional property not found
            $AssociatedLinks = $null
        } else {
            $AssociatedLinks = $JsonParameters.PSobject.Properties["associatedLinks"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "connector"))) { #optional property not found
            $Connector = $null
        } else {
            $Connector = $JsonParameters.PSobject.Properties["connector"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "consoleUri"))) { #optional property not found
            $ConsoleUri = $null
        } else {
            $ConsoleUri = $JsonParameters.PSobject.Properties["consoleUri"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "currentSpeed"))) { #optional property not found
            $CurrentSpeed = $null
        } else {
            $CurrentSpeed = $JsonParameters.PSobject.Properties["currentSpeed"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "customerId"))) { #optional property not found
            $CustomerId = $null
        } else {
            $CustomerId = $JsonParameters.PSobject.Properties["customerId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "disabled"))) { #optional property not found
            $Disabled = $null
        } else {
            $Disabled = $JsonParameters.PSobject.Properties["disabled"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "displayname"))) { #optional property not found
            $Displayname = $null
        } else {
            $Displayname = $JsonParameters.PSobject.Properties["displayname"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "domain"))) { #optional property not found
            $Domain = $null
        } else {
            $Domain = $JsonParameters.PSobject.Properties["domain"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "elementStatusCode"))) { #optional property not found
            $ElementStatusCode = $null
        } else {
            $ElementStatusCode = $JsonParameters.PSobject.Properties["elementStatusCode"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "enclosureCardId"))) { #optional property not found
            $EnclosureCardId = $null
        } else {
            $EnclosureCardId = $JsonParameters.PSobject.Properties["enclosureCardId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "enclosureCardPCIUid"))) { #optional property not found
            $EnclosureCardPCIUid = $null
        } else {
            $EnclosureCardPCIUid = $JsonParameters.PSobject.Properties["enclosureCardPCIUid"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "enclosureCardUid"))) { #optional property not found
            $EnclosureCardUid = $null
        } else {
            $EnclosureCardUid = $JsonParameters.PSobject.Properties["enclosureCardUid"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "enclosureId"))) { #optional property not found
            $EnclosureId = $null
        } else {
            $EnclosureId = $JsonParameters.PSobject.Properties["enclosureId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "enclosureName"))) { #optional property not found
            $EnclosureName = $null
        } else {
            $EnclosureName = $JsonParameters.PSobject.Properties["enclosureName"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "enclosureUid"))) { #optional property not found
            $EnclosureUid = $null
        } else {
            $EnclosureUid = $JsonParameters.PSobject.Properties["enclosureUid"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "generation"))) { #optional property not found
            $Generation = $null
        } else {
            $Generation = $JsonParameters.PSobject.Properties["generation"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) { #optional property not found
            $Id = $null
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ipv4Address"))) { #optional property not found
            $Ipv4Address = $null
        } else {
            $Ipv4Address = $JsonParameters.PSobject.Properties["ipv4Address"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ipv6Address"))) { #optional property not found
            $Ipv6Address = $null
        } else {
            $Ipv6Address = $JsonParameters.PSobject.Properties["ipv6Address"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "label"))) { #optional property not found
            $Label = $null
        } else {
            $Label = $JsonParameters.PSobject.Properties["label"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "linkSpeed"))) { #optional property not found
            $LinkSpeed = $null
        } else {
            $LinkSpeed = $JsonParameters.PSobject.Properties["linkSpeed"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "locate"))) { #optional property not found
            $Locate = $null
        } else {
            $Locate = $JsonParameters.PSobject.Properties["locate"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "macAddress"))) { #optional property not found
            $MacAddress = $null
        } else {
            $MacAddress = $JsonParameters.PSobject.Properties["macAddress"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "nodePort"))) { #optional property not found
            $NodePort = $null
        } else {
            $NodePort = $JsonParameters.PSobject.Properties["nodePort"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "requestUri"))) { #optional property not found
            $RequestUri = $null
        } else {
            $RequestUri = $JsonParameters.PSobject.Properties["requestUri"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "resourceUri"))) { #optional property not found
            $ResourceUri = $null
        } else {
            $ResourceUri = $JsonParameters.PSobject.Properties["resourceUri"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "slot"))) { #optional property not found
            $Slot = $null
        } else {
            $Slot = $JsonParameters.PSobject.Properties["slot"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "systemId"))) { #optional property not found
            $SystemId = $null
        } else {
            $SystemId = $JsonParameters.PSobject.Properties["systemId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "type"))) { #optional property not found
            $Type = $null
        } else {
            $Type = $JsonParameters.PSobject.Properties["type"].value
        }

        $PSO = [PSCustomObject]@{
            "associatedLinks" = ${AssociatedLinks}
            "connector" = ${Connector}
            "consoleUri" = ${ConsoleUri}
            "currentSpeed" = ${CurrentSpeed}
            "customerId" = ${CustomerId}
            "disabled" = ${Disabled}
            "displayname" = ${Displayname}
            "domain" = ${Domain}
            "elementStatusCode" = ${ElementStatusCode}
            "enclosureCardId" = ${EnclosureCardId}
            "enclosureCardPCIUid" = ${EnclosureCardPCIUid}
            "enclosureCardUid" = ${EnclosureCardUid}
            "enclosureId" = ${EnclosureId}
            "enclosureName" = ${EnclosureName}
            "enclosureUid" = ${EnclosureUid}
            "generation" = ${Generation}
            "id" = ${Id}
            "ipv4Address" = ${Ipv4Address}
            "ipv6Address" = ${Ipv6Address}
            "label" = ${Label}
            "linkSpeed" = ${LinkSpeed}
            "locate" = ${Locate}
            "macAddress" = ${MacAddress}
            "nodePort" = ${NodePort}
            "requestUri" = ${RequestUri}
            "resourceUri" = ${ResourceUri}
            "slot" = ${Slot}
            "systemId" = ${SystemId}
            "type" = ${Type}
        }

        return $PSO
    }

}

