#
# Data Services Cloud Console API
# Data Services Cloud Console API
# Version: 1.4.0
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER CustomerId
customerId
.PARAMETER Generation
generation
.PARAMETER Policy
No description available.
.PARAMETER ProtectionPolicyType
Protection policy type: schedule, sync or async
.PARAMETER Schedules
No description available.
.PARAMETER Type
type
.OUTPUTS

PrimeraProtectionPolicy<PSCustomObject>
#>

function Initialize-PrimeraProtectionPolicy {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${CustomerId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Generation},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Policy},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ProtectionPolicyType},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Schedules},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Type}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => PrimeraProtectionPolicy' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "customerId" = ${CustomerId}
            "generation" = ${Generation}
            "policy" = ${Policy}
            "protectionPolicyType" = ${ProtectionPolicyType}
            "schedules" = ${Schedules}
            "type" = ${Type}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to PrimeraProtectionPolicy<PSCustomObject>

.DESCRIPTION

Convert from JSON to PrimeraProtectionPolicy<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

PrimeraProtectionPolicy<PSCustomObject>
#>
function ConvertFrom-JsonToPrimeraProtectionPolicy {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => PrimeraProtectionPolicy' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in PrimeraProtectionPolicy
        $AllProperties = ("customerId", "generation", "policy", "protectionPolicyType", "schedules", "type")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "customerId"))) { #optional property not found
            $CustomerId = $null
        } else {
            $CustomerId = $JsonParameters.PSobject.Properties["customerId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "generation"))) { #optional property not found
            $Generation = $null
        } else {
            $Generation = $JsonParameters.PSobject.Properties["generation"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "policy"))) { #optional property not found
            $Policy = $null
        } else {
            $Policy = $JsonParameters.PSobject.Properties["policy"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "protectionPolicyType"))) { #optional property not found
            $ProtectionPolicyType = $null
        } else {
            $ProtectionPolicyType = $JsonParameters.PSobject.Properties["protectionPolicyType"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "schedules"))) { #optional property not found
            $Schedules = $null
        } else {
            $Schedules = $JsonParameters.PSobject.Properties["schedules"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "type"))) { #optional property not found
            $Type = $null
        } else {
            $Type = $JsonParameters.PSobject.Properties["type"].value
        }

        $PSO = [PSCustomObject]@{
            "customerId" = ${CustomerId}
            "generation" = ${Generation}
            "policy" = ${Policy}
            "protectionPolicyType" = ${ProtectionPolicyType}
            "schedules" = ${Schedules}
            "type" = ${Type}
        }

        return $PSO
    }

}

