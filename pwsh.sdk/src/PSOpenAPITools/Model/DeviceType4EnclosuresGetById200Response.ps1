#
# Data Services Cloud Console API
# Data Services Cloud Console API
# Version: 1.4.0
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER AssociatedLinks
Associated Links Details
.PARAMETER ChainPosLoopA
No description available.
.PARAMETER ChainPosLoopB
No description available.
.PARAMETER ConsoleUri
consoleUri for detailed storage object
.PARAMETER CustomerId
customerId
.PARAMETER Dcsdata
No description available.
.PARAMETER DetailedState
No description available.
.PARAMETER Displayname
Enclosure Display name
.PARAMETER Domain
Domain that the resource belongs to
.PARAMETER EnclosureId
ID of the enclosure
.PARAMETER EnclosureType
No description available.
.PARAMETER Errors
Errors occurred in enclosure
.PARAMETER FailIndicator
No description available.
.PARAMETER FailRequested
No description available.
.PARAMETER FormFactor
No description available.
.PARAMETER Generation
generation
.PARAMETER Id
Unique Identifier of the resource
.PARAMETER LocateEnabled
Indicates if the locate beacon is enabled or not
.PARAMETER Location
Location of the resource
.PARAMETER LoopSplit
No description available.
.PARAMETER Manufacturing
No description available.
.PARAMETER Name
Name of the resource. `Filter, Sort`
.PARAMETER NodeWwn
WWn of the node resource
.PARAMETER RequestUri
resourceUri for detailed enclosure object
.PARAMETER ResourceUri
resourceUri for detailed enclosure disk object
.PARAMETER State
No description available.
.PARAMETER SubType
Enclosure sub type
.PARAMETER SystemId
systemId
.PARAMETER Type
type
.PARAMETER WarnIndicator
No description available.
.PARAMETER WarnRequested
No description available.
.PARAMETER AdmitTime
No description available.
.PARAMETER Capacity
No description available.
.PARAMETER ConsumableSizeMiB
consumable size of disk in MiB
.PARAMETER DevType
Type of the disk.
.PARAMETER DiskId
id of the disk
.PARAMETER EnclosureUid
Unique Identifier of the enclosure.
.PARAMETER FwStatus
firmware status
.PARAMETER FwVersion
Firmware Version.
.PARAMETER InsertTime
No description available.
.PARAMETER LifeLeftPCT
Life Left Percentage
.PARAMETER MediaType
Media Type of the disk
.PARAMETER MfgCapacityGB
manufacturing capacity of disk in GB
.PARAMETER Paths
Disk Loop
.PARAMETER PositionLast
No description available.
.PARAMETER PositionNow
No description available.
.PARAMETER Protocol
No description available.
.PARAMETER RawSizeMiB
raw Size of disk in GB
.PARAMETER ReadErrors
No description available.
.PARAMETER SedStatus
SED Status
.PARAMETER WriteErrors
No description available.
.PARAMETER Wwn
WWN of the resource. `Filter, Sort`
.PARAMETER ElementStatusCode
Enclosure status code
.PARAMETER EnclosureCardId
ID of enclosure card.
.PARAMETER EnclosureName
Name of the enclosure
.PARAMETER IsNodeCard
No description available.
.PARAMETER LocateSevenSegDisplay
Seven segment display on enclosure card when locate is on
.PARAMETER LoopA
No description available.
.PARAMETER LoopB
No description available.
.PARAMETER SafeToRemove
Indicates if the component is safe to remove
.PARAMETER SevenSegDisplay
Seven segment display
.PARAMETER AcStatus
No description available.
.PARAMETER DcStatus
No description available.
.PARAMETER EnclosurePowerId
Numeric ID of the resource
.PARAMETER FailInput
No description available.
.PARAMETER FailOutput
No description available.
.PARAMETER ModelReadOnly
No description available.
.PARAMETER Dc4data
No description available.
.PARAMETER DiskCount
Number of disks present
.PARAMETER OkIndicator
No description available.
.PARAMETER PortBypassA
No description available.
.PARAMETER PortBypassB
No description available.
.PARAMETER Power
No description available.
.PARAMETER PredFailIndicator
No description available.
.PARAMETER SledId
Numeric ID of the resource
.PARAMETER StateLoopA
No description available.
.PARAMETER StateLoopB
No description available.
.PARAMETER Temperature
temperature of the resource part
.PARAMETER Position
No description available.
.PARAMETER FailInd
Status of the Failure Visual Indication.
.PARAMETER OkInt
Status of the OK Visual Indication.
.PARAMETER OsVersion
Enclosure Card CDM OS name/version
.PARAMETER PUid
Enclosure Card CDM puid.
.PARAMETER Updating
Revision firmware of the PCI card
.OUTPUTS

DeviceType4EnclosuresGetById200Response<PSCustomObject>
#>

function Initialize-DeviceType4EnclosuresGetById200Response {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${AssociatedLinks},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${ChainPosLoopA},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${ChainPosLoopB},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ConsoleUri},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${CustomerId},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Dcsdata},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${DetailedState},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Displayname},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Domain},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${EnclosureId},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("ENCLOSURE_UNKNOWN", "ENCLOSURE_DC0", "ENCLOSURE_DC1", "ENCLOSURE_DC2", "ENCLOSURE_DC3", "ENCLOSURE_DC4", "ENCLOSURE_DCS1", "ENCLOSURE_DCS2", "ENCLOSURE_DCN1", "ENCLOSURE_DCS3", "ENCLOSURE_DCS4", "ENCLOSURE_DCS5", "ENCLOSURE_DCS6", "ENCLOSURE_DCS7", "ENCLOSURE_DCS8", "ENCLOSURE_DCN2", "ENCLOSURE_DCN3", "ENCLOSURE_DCN4", "ENCLOSURE_DCS9", "ENCLOSURE_DCS10", "ENCLOSURE_DCS11", "ENCLOSURE_DCN5", "ENCLOSURE_DCS12", "ENCLOSURE_DCN6", "ENCLOSURE_DCN7", "ENCLOSURE_DCF1", "ENCLOSURE_DCF2")]
        [PSCustomObject]
        ${EnclosureType},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Errors},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${FailIndicator},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${FailRequested},
        [Parameter(Position = 14, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${FormFactor},
        [Parameter(Position = 15, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Generation},
        [Parameter(Position = 16, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Id},
        [Parameter(Position = 17, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${LocateEnabled},
        [Parameter(Position = 18, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Location},
        [Parameter(Position = 19, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${LoopSplit},
        [Parameter(Position = 20, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Manufacturing},
        [Parameter(Position = 21, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 22, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${NodeWwn},
        [Parameter(Position = 23, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${RequestUri},
        [Parameter(Position = 24, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ResourceUri},
        [Parameter(Position = 25, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${State},
        [Parameter(Position = 26, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SubType},
        [Parameter(Position = 27, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SystemId},
        [Parameter(Position = 28, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Type},
        [Parameter(Position = 29, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${WarnIndicator},
        [Parameter(Position = 30, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${WarnRequested},
        [Parameter(Position = 31, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${AdmitTime},
        [Parameter(Position = 32, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Capacity},
        [Parameter(Position = 33, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${ConsumableSizeMiB},
        [Parameter(Position = 34, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${DevType},
        [Parameter(Position = 35, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${DiskId},
        [Parameter(Position = 36, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${EnclosureUid},
        [Parameter(Position = 37, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${FwStatus},
        [Parameter(Position = 38, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${FwVersion},
        [Parameter(Position = 39, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${InsertTime},
        [Parameter(Position = 40, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Decimal]]
        ${LifeLeftPCT},
        [Parameter(Position = 41, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${MediaType},
        [Parameter(Position = 42, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${MfgCapacityGB},
        [Parameter(Position = 43, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Paths},
        [Parameter(Position = 44, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${PositionLast},
        [Parameter(Position = 45, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${PositionNow},
        [Parameter(Position = 46, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Protocol},
        [Parameter(Position = 47, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${RawSizeMiB},
        [Parameter(Position = 48, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${ReadErrors},
        [Parameter(Position = 49, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SedStatus},
        [Parameter(Position = 50, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${WriteErrors},
        [Parameter(Position = 51, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Wwn},
        [Parameter(Position = 52, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ElementStatusCode},
        [Parameter(Position = 53, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${EnclosureCardId},
        [Parameter(Position = 54, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${EnclosureName},
        [Parameter(Position = 55, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${IsNodeCard},
        [Parameter(Position = 56, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${LocateSevenSegDisplay},
        [Parameter(Position = 57, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${LoopA},
        [Parameter(Position = 58, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${LoopB},
        [Parameter(Position = 59, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SafeToRemove},
        [Parameter(Position = 60, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SevenSegDisplay},
        [Parameter(Position = 61, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${AcStatus},
        [Parameter(Position = 62, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${DcStatus},
        [Parameter(Position = 63, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${EnclosurePowerId},
        [Parameter(Position = 64, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${FailInput},
        [Parameter(Position = 65, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${FailOutput},
        [Parameter(Position = 66, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${ModelReadOnly},
        [Parameter(Position = 67, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Dc4data},
        [Parameter(Position = 68, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${DiskCount},
        [Parameter(Position = 69, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${OkIndicator},
        [Parameter(Position = 70, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${PortBypassA},
        [Parameter(Position = 71, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${PortBypassB},
        [Parameter(Position = 72, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${Power},
        [Parameter(Position = 73, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${PredFailIndicator},
        [Parameter(Position = 74, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${SledId},
        [Parameter(Position = 75, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${StateLoopA},
        [Parameter(Position = 76, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${StateLoopB},
        [Parameter(Position = 77, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Temperature},
        [Parameter(Position = 78, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Position},
        [Parameter(Position = 79, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${FailInd},
        [Parameter(Position = 80, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${OkInt},
        [Parameter(Position = 81, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${OsVersion},
        [Parameter(Position = 82, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${PUid},
        [Parameter(Position = 83, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Updating}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => DeviceType4EnclosuresGetById200Response' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if (!$Name -and $Name.length -gt 255) {
            throw "invalid value for 'Name', the character length must be smaller than or equal to 255."
        }


        $PSO = [PSCustomObject]@{
            "associatedLinks" = ${AssociatedLinks}
            "chainPosLoopA" = ${ChainPosLoopA}
            "chainPosLoopB" = ${ChainPosLoopB}
            "consoleUri" = ${ConsoleUri}
            "customerId" = ${CustomerId}
            "dcsdata" = ${Dcsdata}
            "detailedState" = ${DetailedState}
            "displayname" = ${Displayname}
            "domain" = ${Domain}
            "enclosureId" = ${EnclosureId}
            "enclosureType" = ${EnclosureType}
            "errors" = ${Errors}
            "failIndicator" = ${FailIndicator}
            "failRequested" = ${FailRequested}
            "formFactor" = ${FormFactor}
            "generation" = ${Generation}
            "id" = ${Id}
            "locateEnabled" = ${LocateEnabled}
            "location" = ${Location}
            "loopSplit" = ${LoopSplit}
            "manufacturing" = ${Manufacturing}
            "name" = ${Name}
            "nodeWwn" = ${NodeWwn}
            "requestUri" = ${RequestUri}
            "resourceUri" = ${ResourceUri}
            "state" = ${State}
            "subType" = ${SubType}
            "systemId" = ${SystemId}
            "type" = ${Type}
            "warnIndicator" = ${WarnIndicator}
            "warnRequested" = ${WarnRequested}
            "admitTime" = ${AdmitTime}
            "capacity" = ${Capacity}
            "consumableSizeMiB" = ${ConsumableSizeMiB}
            "devType" = ${DevType}
            "diskId" = ${DiskId}
            "enclosureUid" = ${EnclosureUid}
            "fwStatus" = ${FwStatus}
            "fwVersion" = ${FwVersion}
            "insertTime" = ${InsertTime}
            "lifeLeftPCT" = ${LifeLeftPCT}
            "mediaType" = ${MediaType}
            "mfgCapacityGB" = ${MfgCapacityGB}
            "paths" = ${Paths}
            "positionLast" = ${PositionLast}
            "positionNow" = ${PositionNow}
            "protocol" = ${Protocol}
            "rawSizeMiB" = ${RawSizeMiB}
            "readErrors" = ${ReadErrors}
            "sedStatus" = ${SedStatus}
            "writeErrors" = ${WriteErrors}
            "wwn" = ${Wwn}
            "elementStatusCode" = ${ElementStatusCode}
            "enclosureCardId" = ${EnclosureCardId}
            "enclosureName" = ${EnclosureName}
            "isNodeCard" = ${IsNodeCard}
            "locateSevenSegDisplay" = ${LocateSevenSegDisplay}
            "loopA" = ${LoopA}
            "loopB" = ${LoopB}
            "safeToRemove" = ${SafeToRemove}
            "sevenSegDisplay" = ${SevenSegDisplay}
            "acStatus" = ${AcStatus}
            "dcStatus" = ${DcStatus}
            "enclosurePowerId" = ${EnclosurePowerId}
            "failInput" = ${FailInput}
            "failOutput" = ${FailOutput}
            "modelReadOnly" = ${ModelReadOnly}
            "dc4data" = ${Dc4data}
            "diskCount" = ${DiskCount}
            "okIndicator" = ${OkIndicator}
            "portBypassA" = ${PortBypassA}
            "portBypassB" = ${PortBypassB}
            "power" = ${Power}
            "predFailIndicator" = ${PredFailIndicator}
            "sledId" = ${SledId}
            "stateLoopA" = ${StateLoopA}
            "stateLoopB" = ${StateLoopB}
            "temperature" = ${Temperature}
            "position" = ${Position}
            "failInd" = ${FailInd}
            "okInt" = ${OkInt}
            "osVersion" = ${OsVersion}
            "pUid" = ${PUid}
            "updating" = ${Updating}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to DeviceType4EnclosuresGetById200Response<PSCustomObject>

.DESCRIPTION

Convert from JSON to DeviceType4EnclosuresGetById200Response<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

DeviceType4EnclosuresGetById200Response<PSCustomObject>
#>
function ConvertFrom-JsonToDeviceType4EnclosuresGetById200Response {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => DeviceType4EnclosuresGetById200Response' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in DeviceType4EnclosuresGetById200Response
        $AllProperties = ("associatedLinks", "chainPosLoopA", "chainPosLoopB", "consoleUri", "customerId", "dcsdata", "detailedState", "displayname", "domain", "enclosureId", "enclosureType", "errors", "failIndicator", "failRequested", "formFactor", "generation", "id", "locateEnabled", "location", "loopSplit", "manufacturing", "name", "nodeWwn", "requestUri", "resourceUri", "state", "subType", "systemId", "type", "warnIndicator", "warnRequested", "admitTime", "capacity", "consumableSizeMiB", "devType", "diskId", "enclosureUid", "fwStatus", "fwVersion", "insertTime", "lifeLeftPCT", "mediaType", "mfgCapacityGB", "paths", "positionLast", "positionNow", "protocol", "rawSizeMiB", "readErrors", "sedStatus", "writeErrors", "wwn", "elementStatusCode", "enclosureCardId", "enclosureName", "isNodeCard", "locateSevenSegDisplay", "loopA", "loopB", "safeToRemove", "sevenSegDisplay", "acStatus", "dcStatus", "enclosurePowerId", "failInput", "failOutput", "modelReadOnly", "dc4data", "diskCount", "okIndicator", "portBypassA", "portBypassB", "power", "predFailIndicator", "sledId", "stateLoopA", "stateLoopB", "temperature", "position", "failInd", "okInt", "osVersion", "pUid", "updating")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "associatedLinks"))) { #optional property not found
            $AssociatedLinks = $null
        } else {
            $AssociatedLinks = $JsonParameters.PSobject.Properties["associatedLinks"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "chainPosLoopA"))) { #optional property not found
            $ChainPosLoopA = $null
        } else {
            $ChainPosLoopA = $JsonParameters.PSobject.Properties["chainPosLoopA"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "chainPosLoopB"))) { #optional property not found
            $ChainPosLoopB = $null
        } else {
            $ChainPosLoopB = $JsonParameters.PSobject.Properties["chainPosLoopB"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "consoleUri"))) { #optional property not found
            $ConsoleUri = $null
        } else {
            $ConsoleUri = $JsonParameters.PSobject.Properties["consoleUri"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "customerId"))) { #optional property not found
            $CustomerId = $null
        } else {
            $CustomerId = $JsonParameters.PSobject.Properties["customerId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "dcsdata"))) { #optional property not found
            $Dcsdata = $null
        } else {
            $Dcsdata = $JsonParameters.PSobject.Properties["dcsdata"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "detailedState"))) { #optional property not found
            $DetailedState = $null
        } else {
            $DetailedState = $JsonParameters.PSobject.Properties["detailedState"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "displayname"))) { #optional property not found
            $Displayname = $null
        } else {
            $Displayname = $JsonParameters.PSobject.Properties["displayname"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "domain"))) { #optional property not found
            $Domain = $null
        } else {
            $Domain = $JsonParameters.PSobject.Properties["domain"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "enclosureId"))) { #optional property not found
            $EnclosureId = $null
        } else {
            $EnclosureId = $JsonParameters.PSobject.Properties["enclosureId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "enclosureType"))) { #optional property not found
            $EnclosureType = $null
        } else {
            $EnclosureType = $JsonParameters.PSobject.Properties["enclosureType"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "errors"))) { #optional property not found
            $Errors = $null
        } else {
            $Errors = $JsonParameters.PSobject.Properties["errors"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "failIndicator"))) { #optional property not found
            $FailIndicator = $null
        } else {
            $FailIndicator = $JsonParameters.PSobject.Properties["failIndicator"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "failRequested"))) { #optional property not found
            $FailRequested = $null
        } else {
            $FailRequested = $JsonParameters.PSobject.Properties["failRequested"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "formFactor"))) { #optional property not found
            $FormFactor = $null
        } else {
            $FormFactor = $JsonParameters.PSobject.Properties["formFactor"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "generation"))) { #optional property not found
            $Generation = $null
        } else {
            $Generation = $JsonParameters.PSobject.Properties["generation"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) { #optional property not found
            $Id = $null
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "locateEnabled"))) { #optional property not found
            $LocateEnabled = $null
        } else {
            $LocateEnabled = $JsonParameters.PSobject.Properties["locateEnabled"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "location"))) { #optional property not found
            $Location = $null
        } else {
            $Location = $JsonParameters.PSobject.Properties["location"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "loopSplit"))) { #optional property not found
            $LoopSplit = $null
        } else {
            $LoopSplit = $JsonParameters.PSobject.Properties["loopSplit"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "manufacturing"))) { #optional property not found
            $Manufacturing = $null
        } else {
            $Manufacturing = $JsonParameters.PSobject.Properties["manufacturing"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) { #optional property not found
            $Name = $null
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "nodeWwn"))) { #optional property not found
            $NodeWwn = $null
        } else {
            $NodeWwn = $JsonParameters.PSobject.Properties["nodeWwn"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "requestUri"))) { #optional property not found
            $RequestUri = $null
        } else {
            $RequestUri = $JsonParameters.PSobject.Properties["requestUri"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "resourceUri"))) { #optional property not found
            $ResourceUri = $null
        } else {
            $ResourceUri = $JsonParameters.PSobject.Properties["resourceUri"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "state"))) { #optional property not found
            $State = $null
        } else {
            $State = $JsonParameters.PSobject.Properties["state"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "subType"))) { #optional property not found
            $SubType = $null
        } else {
            $SubType = $JsonParameters.PSobject.Properties["subType"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "systemId"))) { #optional property not found
            $SystemId = $null
        } else {
            $SystemId = $JsonParameters.PSobject.Properties["systemId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "type"))) { #optional property not found
            $Type = $null
        } else {
            $Type = $JsonParameters.PSobject.Properties["type"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "warnIndicator"))) { #optional property not found
            $WarnIndicator = $null
        } else {
            $WarnIndicator = $JsonParameters.PSobject.Properties["warnIndicator"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "warnRequested"))) { #optional property not found
            $WarnRequested = $null
        } else {
            $WarnRequested = $JsonParameters.PSobject.Properties["warnRequested"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "admitTime"))) { #optional property not found
            $AdmitTime = $null
        } else {
            $AdmitTime = $JsonParameters.PSobject.Properties["admitTime"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "capacity"))) { #optional property not found
            $Capacity = $null
        } else {
            $Capacity = $JsonParameters.PSobject.Properties["capacity"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "consumableSizeMiB"))) { #optional property not found
            $ConsumableSizeMiB = $null
        } else {
            $ConsumableSizeMiB = $JsonParameters.PSobject.Properties["consumableSizeMiB"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "devType"))) { #optional property not found
            $DevType = $null
        } else {
            $DevType = $JsonParameters.PSobject.Properties["devType"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "diskId"))) { #optional property not found
            $DiskId = $null
        } else {
            $DiskId = $JsonParameters.PSobject.Properties["diskId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "enclosureUid"))) { #optional property not found
            $EnclosureUid = $null
        } else {
            $EnclosureUid = $JsonParameters.PSobject.Properties["enclosureUid"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "fwStatus"))) { #optional property not found
            $FwStatus = $null
        } else {
            $FwStatus = $JsonParameters.PSobject.Properties["fwStatus"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "fwVersion"))) { #optional property not found
            $FwVersion = $null
        } else {
            $FwVersion = $JsonParameters.PSobject.Properties["fwVersion"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "insertTime"))) { #optional property not found
            $InsertTime = $null
        } else {
            $InsertTime = $JsonParameters.PSobject.Properties["insertTime"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "lifeLeftPCT"))) { #optional property not found
            $LifeLeftPCT = $null
        } else {
            $LifeLeftPCT = $JsonParameters.PSobject.Properties["lifeLeftPCT"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "mediaType"))) { #optional property not found
            $MediaType = $null
        } else {
            $MediaType = $JsonParameters.PSobject.Properties["mediaType"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "mfgCapacityGB"))) { #optional property not found
            $MfgCapacityGB = $null
        } else {
            $MfgCapacityGB = $JsonParameters.PSobject.Properties["mfgCapacityGB"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "paths"))) { #optional property not found
            $Paths = $null
        } else {
            $Paths = $JsonParameters.PSobject.Properties["paths"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "positionLast"))) { #optional property not found
            $PositionLast = $null
        } else {
            $PositionLast = $JsonParameters.PSobject.Properties["positionLast"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "positionNow"))) { #optional property not found
            $PositionNow = $null
        } else {
            $PositionNow = $JsonParameters.PSobject.Properties["positionNow"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "protocol"))) { #optional property not found
            $Protocol = $null
        } else {
            $Protocol = $JsonParameters.PSobject.Properties["protocol"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "rawSizeMiB"))) { #optional property not found
            $RawSizeMiB = $null
        } else {
            $RawSizeMiB = $JsonParameters.PSobject.Properties["rawSizeMiB"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "readErrors"))) { #optional property not found
            $ReadErrors = $null
        } else {
            $ReadErrors = $JsonParameters.PSobject.Properties["readErrors"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "sedStatus"))) { #optional property not found
            $SedStatus = $null
        } else {
            $SedStatus = $JsonParameters.PSobject.Properties["sedStatus"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "writeErrors"))) { #optional property not found
            $WriteErrors = $null
        } else {
            $WriteErrors = $JsonParameters.PSobject.Properties["writeErrors"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "wwn"))) { #optional property not found
            $Wwn = $null
        } else {
            $Wwn = $JsonParameters.PSobject.Properties["wwn"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "elementStatusCode"))) { #optional property not found
            $ElementStatusCode = $null
        } else {
            $ElementStatusCode = $JsonParameters.PSobject.Properties["elementStatusCode"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "enclosureCardId"))) { #optional property not found
            $EnclosureCardId = $null
        } else {
            $EnclosureCardId = $JsonParameters.PSobject.Properties["enclosureCardId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "enclosureName"))) { #optional property not found
            $EnclosureName = $null
        } else {
            $EnclosureName = $JsonParameters.PSobject.Properties["enclosureName"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "isNodeCard"))) { #optional property not found
            $IsNodeCard = $null
        } else {
            $IsNodeCard = $JsonParameters.PSobject.Properties["isNodeCard"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "locateSevenSegDisplay"))) { #optional property not found
            $LocateSevenSegDisplay = $null
        } else {
            $LocateSevenSegDisplay = $JsonParameters.PSobject.Properties["locateSevenSegDisplay"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "loopA"))) { #optional property not found
            $LoopA = $null
        } else {
            $LoopA = $JsonParameters.PSobject.Properties["loopA"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "loopB"))) { #optional property not found
            $LoopB = $null
        } else {
            $LoopB = $JsonParameters.PSobject.Properties["loopB"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "safeToRemove"))) { #optional property not found
            $SafeToRemove = $null
        } else {
            $SafeToRemove = $JsonParameters.PSobject.Properties["safeToRemove"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "sevenSegDisplay"))) { #optional property not found
            $SevenSegDisplay = $null
        } else {
            $SevenSegDisplay = $JsonParameters.PSobject.Properties["sevenSegDisplay"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "acStatus"))) { #optional property not found
            $AcStatus = $null
        } else {
            $AcStatus = $JsonParameters.PSobject.Properties["acStatus"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "dcStatus"))) { #optional property not found
            $DcStatus = $null
        } else {
            $DcStatus = $JsonParameters.PSobject.Properties["dcStatus"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "enclosurePowerId"))) { #optional property not found
            $EnclosurePowerId = $null
        } else {
            $EnclosurePowerId = $JsonParameters.PSobject.Properties["enclosurePowerId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "failInput"))) { #optional property not found
            $FailInput = $null
        } else {
            $FailInput = $JsonParameters.PSobject.Properties["failInput"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "failOutput"))) { #optional property not found
            $FailOutput = $null
        } else {
            $FailOutput = $JsonParameters.PSobject.Properties["failOutput"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "modelReadOnly"))) { #optional property not found
            $ModelReadOnly = $null
        } else {
            $ModelReadOnly = $JsonParameters.PSobject.Properties["modelReadOnly"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "dc4data"))) { #optional property not found
            $Dc4data = $null
        } else {
            $Dc4data = $JsonParameters.PSobject.Properties["dc4data"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "diskCount"))) { #optional property not found
            $DiskCount = $null
        } else {
            $DiskCount = $JsonParameters.PSobject.Properties["diskCount"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "okIndicator"))) { #optional property not found
            $OkIndicator = $null
        } else {
            $OkIndicator = $JsonParameters.PSobject.Properties["okIndicator"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "portBypassA"))) { #optional property not found
            $PortBypassA = $null
        } else {
            $PortBypassA = $JsonParameters.PSobject.Properties["portBypassA"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "portBypassB"))) { #optional property not found
            $PortBypassB = $null
        } else {
            $PortBypassB = $JsonParameters.PSobject.Properties["portBypassB"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "power"))) { #optional property not found
            $Power = $null
        } else {
            $Power = $JsonParameters.PSobject.Properties["power"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "predFailIndicator"))) { #optional property not found
            $PredFailIndicator = $null
        } else {
            $PredFailIndicator = $JsonParameters.PSobject.Properties["predFailIndicator"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "sledId"))) { #optional property not found
            $SledId = $null
        } else {
            $SledId = $JsonParameters.PSobject.Properties["sledId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "stateLoopA"))) { #optional property not found
            $StateLoopA = $null
        } else {
            $StateLoopA = $JsonParameters.PSobject.Properties["stateLoopA"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "stateLoopB"))) { #optional property not found
            $StateLoopB = $null
        } else {
            $StateLoopB = $JsonParameters.PSobject.Properties["stateLoopB"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "temperature"))) { #optional property not found
            $Temperature = $null
        } else {
            $Temperature = $JsonParameters.PSobject.Properties["temperature"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "position"))) { #optional property not found
            $Position = $null
        } else {
            $Position = $JsonParameters.PSobject.Properties["position"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "failInd"))) { #optional property not found
            $FailInd = $null
        } else {
            $FailInd = $JsonParameters.PSobject.Properties["failInd"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "okInt"))) { #optional property not found
            $OkInt = $null
        } else {
            $OkInt = $JsonParameters.PSobject.Properties["okInt"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "osVersion"))) { #optional property not found
            $OsVersion = $null
        } else {
            $OsVersion = $JsonParameters.PSobject.Properties["osVersion"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "pUid"))) { #optional property not found
            $PUid = $null
        } else {
            $PUid = $JsonParameters.PSobject.Properties["pUid"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "updating"))) { #optional property not found
            $Updating = $null
        } else {
            $Updating = $JsonParameters.PSobject.Properties["updating"].value
        }

        $PSO = [PSCustomObject]@{
            "associatedLinks" = ${AssociatedLinks}
            "chainPosLoopA" = ${ChainPosLoopA}
            "chainPosLoopB" = ${ChainPosLoopB}
            "consoleUri" = ${ConsoleUri}
            "customerId" = ${CustomerId}
            "dcsdata" = ${Dcsdata}
            "detailedState" = ${DetailedState}
            "displayname" = ${Displayname}
            "domain" = ${Domain}
            "enclosureId" = ${EnclosureId}
            "enclosureType" = ${EnclosureType}
            "errors" = ${Errors}
            "failIndicator" = ${FailIndicator}
            "failRequested" = ${FailRequested}
            "formFactor" = ${FormFactor}
            "generation" = ${Generation}
            "id" = ${Id}
            "locateEnabled" = ${LocateEnabled}
            "location" = ${Location}
            "loopSplit" = ${LoopSplit}
            "manufacturing" = ${Manufacturing}
            "name" = ${Name}
            "nodeWwn" = ${NodeWwn}
            "requestUri" = ${RequestUri}
            "resourceUri" = ${ResourceUri}
            "state" = ${State}
            "subType" = ${SubType}
            "systemId" = ${SystemId}
            "type" = ${Type}
            "warnIndicator" = ${WarnIndicator}
            "warnRequested" = ${WarnRequested}
            "admitTime" = ${AdmitTime}
            "capacity" = ${Capacity}
            "consumableSizeMiB" = ${ConsumableSizeMiB}
            "devType" = ${DevType}
            "diskId" = ${DiskId}
            "enclosureUid" = ${EnclosureUid}
            "fwStatus" = ${FwStatus}
            "fwVersion" = ${FwVersion}
            "insertTime" = ${InsertTime}
            "lifeLeftPCT" = ${LifeLeftPCT}
            "mediaType" = ${MediaType}
            "mfgCapacityGB" = ${MfgCapacityGB}
            "paths" = ${Paths}
            "positionLast" = ${PositionLast}
            "positionNow" = ${PositionNow}
            "protocol" = ${Protocol}
            "rawSizeMiB" = ${RawSizeMiB}
            "readErrors" = ${ReadErrors}
            "sedStatus" = ${SedStatus}
            "writeErrors" = ${WriteErrors}
            "wwn" = ${Wwn}
            "elementStatusCode" = ${ElementStatusCode}
            "enclosureCardId" = ${EnclosureCardId}
            "enclosureName" = ${EnclosureName}
            "isNodeCard" = ${IsNodeCard}
            "locateSevenSegDisplay" = ${LocateSevenSegDisplay}
            "loopA" = ${LoopA}
            "loopB" = ${LoopB}
            "safeToRemove" = ${SafeToRemove}
            "sevenSegDisplay" = ${SevenSegDisplay}
            "acStatus" = ${AcStatus}
            "dcStatus" = ${DcStatus}
            "enclosurePowerId" = ${EnclosurePowerId}
            "failInput" = ${FailInput}
            "failOutput" = ${FailOutput}
            "modelReadOnly" = ${ModelReadOnly}
            "dc4data" = ${Dc4data}
            "diskCount" = ${DiskCount}
            "okIndicator" = ${OkIndicator}
            "portBypassA" = ${PortBypassA}
            "portBypassB" = ${PortBypassB}
            "power" = ${Power}
            "predFailIndicator" = ${PredFailIndicator}
            "sledId" = ${SledId}
            "stateLoopA" = ${StateLoopA}
            "stateLoopB" = ${StateLoopB}
            "temperature" = ${Temperature}
            "position" = ${Position}
            "failInd" = ${FailInd}
            "okInt" = ${OkInt}
            "osVersion" = ${OsVersion}
            "pUid" = ${PUid}
            "updating" = ${Updating}
        }

        return $PSO
    }

}

