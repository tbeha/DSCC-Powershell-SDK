#
# Data Services Cloud Console API
# Data Services Cloud Console API
# Version: 1.4.0
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER AveMbPs
Average evacuation speed in MB/s; valid only when sw_state is evacuating, ie. evacuation is underway.
.PARAMETER AveSegmentPs
Average evacuation speed in segments/sec; valid only when sw_state is evacuating, ie. evacuation is underway.
.PARAMETER AveTtc
Average time to complete in seconds; valid only when sw_state is evacuating, ie. evacuation is underway.
.PARAMETER Driveset
Driveset index for this shelf.
.PARAMETER IsCapacityValid
Is the capacity fields in this data struct valid.
.PARAMETER IsFlashShelf
Is this a all-flash-shelf.
.PARAMETER PauseState
State of evacuation, paused or in-progress; valid only when sw_state is evacuating, ie. evacuation is underway.
.PARAMETER PctCompletion
Evacuation percent completion; valid only when sw_state is evacuating, ie. evacuation is underway.
.PARAMETER RawCacheCapacity
Raw cache capacity for this shelf.
.PARAMETER RawCapacity
Hdd raw capacity for this shelf.
.PARAMETER SwState
Software state. Possible values:'available', 'online', 'foreign', 'unknown'.
.PARAMETER UsableCacheCapacity
Estimated usable cache capacity for this shelf.
.PARAMETER UsableCapacity
Estimated usable capacity for this shelf.
.OUTPUTS

NimbleNsDiskSetAttr<PSCustomObject>
#>

function Initialize-NimbleNsDiskSetAttr {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${AveMbPs},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${AveSegmentPs},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${AveTtc},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${Driveset},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${IsCapacityValid},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${IsFlashShelf},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${PauseState},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${PctCompletion},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${RawCacheCapacity},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${RawCapacity},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SwState},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${UsableCacheCapacity},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${UsableCapacity}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => NimbleNsDiskSetAttr' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "ave_mb_ps" = ${AveMbPs}
            "ave_segment_ps" = ${AveSegmentPs}
            "ave_ttc" = ${AveTtc}
            "driveset" = ${Driveset}
            "is_capacity_valid" = ${IsCapacityValid}
            "is_flash_shelf" = ${IsFlashShelf}
            "pause_state" = ${PauseState}
            "pct_completion" = ${PctCompletion}
            "raw_cache_capacity" = ${RawCacheCapacity}
            "raw_capacity" = ${RawCapacity}
            "sw_state" = ${SwState}
            "usable_cache_capacity" = ${UsableCacheCapacity}
            "usable_capacity" = ${UsableCapacity}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to NimbleNsDiskSetAttr<PSCustomObject>

.DESCRIPTION

Convert from JSON to NimbleNsDiskSetAttr<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

NimbleNsDiskSetAttr<PSCustomObject>
#>
function ConvertFrom-JsonToNimbleNsDiskSetAttr {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => NimbleNsDiskSetAttr' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in NimbleNsDiskSetAttr
        $AllProperties = ("ave_mb_ps", "ave_segment_ps", "ave_ttc", "driveset", "is_capacity_valid", "is_flash_shelf", "pause_state", "pct_completion", "raw_cache_capacity", "raw_capacity", "sw_state", "usable_cache_capacity", "usable_capacity")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ave_mb_ps"))) { #optional property not found
            $AveMbPs = $null
        } else {
            $AveMbPs = $JsonParameters.PSobject.Properties["ave_mb_ps"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ave_segment_ps"))) { #optional property not found
            $AveSegmentPs = $null
        } else {
            $AveSegmentPs = $JsonParameters.PSobject.Properties["ave_segment_ps"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ave_ttc"))) { #optional property not found
            $AveTtc = $null
        } else {
            $AveTtc = $JsonParameters.PSobject.Properties["ave_ttc"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "driveset"))) { #optional property not found
            $Driveset = $null
        } else {
            $Driveset = $JsonParameters.PSobject.Properties["driveset"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "is_capacity_valid"))) { #optional property not found
            $IsCapacityValid = $null
        } else {
            $IsCapacityValid = $JsonParameters.PSobject.Properties["is_capacity_valid"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "is_flash_shelf"))) { #optional property not found
            $IsFlashShelf = $null
        } else {
            $IsFlashShelf = $JsonParameters.PSobject.Properties["is_flash_shelf"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "pause_state"))) { #optional property not found
            $PauseState = $null
        } else {
            $PauseState = $JsonParameters.PSobject.Properties["pause_state"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "pct_completion"))) { #optional property not found
            $PctCompletion = $null
        } else {
            $PctCompletion = $JsonParameters.PSobject.Properties["pct_completion"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "raw_cache_capacity"))) { #optional property not found
            $RawCacheCapacity = $null
        } else {
            $RawCacheCapacity = $JsonParameters.PSobject.Properties["raw_cache_capacity"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "raw_capacity"))) { #optional property not found
            $RawCapacity = $null
        } else {
            $RawCapacity = $JsonParameters.PSobject.Properties["raw_capacity"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "sw_state"))) { #optional property not found
            $SwState = $null
        } else {
            $SwState = $JsonParameters.PSobject.Properties["sw_state"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "usable_cache_capacity"))) { #optional property not found
            $UsableCacheCapacity = $null
        } else {
            $UsableCacheCapacity = $JsonParameters.PSobject.Properties["usable_cache_capacity"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "usable_capacity"))) { #optional property not found
            $UsableCapacity = $null
        } else {
            $UsableCapacity = $JsonParameters.PSobject.Properties["usable_capacity"].value
        }

        $PSO = [PSCustomObject]@{
            "ave_mb_ps" = ${AveMbPs}
            "ave_segment_ps" = ${AveSegmentPs}
            "ave_ttc" = ${AveTtc}
            "driveset" = ${Driveset}
            "is_capacity_valid" = ${IsCapacityValid}
            "is_flash_shelf" = ${IsFlashShelf}
            "pause_state" = ${PauseState}
            "pct_completion" = ${PctCompletion}
            "raw_cache_capacity" = ${RawCacheCapacity}
            "raw_capacity" = ${RawCapacity}
            "sw_state" = ${SwState}
            "usable_cache_capacity" = ${UsableCacheCapacity}
            "usable_capacity" = ${UsableCapacity}
        }

        return $PSO
    }

}

