#
# Data Services Cloud Console API
# Data Services Cloud Console API
# Version: 1.4.0
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER CtrlrOwner
The controller owning this sensor. Possible values: 'A', 'B', 'independent'.
.PARAMETER CurrentReading
A sensor type specific reading (RPM for fans, degrees celsius for temperature).
.PARAMETER DisplayName
A human readable name for the sensor.
.PARAMETER Location
The location of this sensor.
.PARAMETER Name
A uniquely identifying name.
.PARAMETER State
The current state of this sensor. Possible values: 'sensor_ok', 'sensor_alert_cond', 'sensor_missing', 'sensor_reading_unavail', 'sensor_failed'.
.OUTPUTS

NimbleNsCtrlrHwSensorInfo<PSCustomObject>
#>

function Initialize-NimbleNsCtrlrHwSensorInfo {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${CtrlrOwner},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${CurrentReading},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${DisplayName},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Location},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${State}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => NimbleNsCtrlrHwSensorInfo' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "ctrlr_owner" = ${CtrlrOwner}
            "current_reading" = ${CurrentReading}
            "display_name" = ${DisplayName}
            "location" = ${Location}
            "name" = ${Name}
            "state" = ${State}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to NimbleNsCtrlrHwSensorInfo<PSCustomObject>

.DESCRIPTION

Convert from JSON to NimbleNsCtrlrHwSensorInfo<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

NimbleNsCtrlrHwSensorInfo<PSCustomObject>
#>
function ConvertFrom-JsonToNimbleNsCtrlrHwSensorInfo {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => NimbleNsCtrlrHwSensorInfo' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in NimbleNsCtrlrHwSensorInfo
        $AllProperties = ("ctrlr_owner", "current_reading", "display_name", "location", "name", "state")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ctrlr_owner"))) { #optional property not found
            $CtrlrOwner = $null
        } else {
            $CtrlrOwner = $JsonParameters.PSobject.Properties["ctrlr_owner"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "current_reading"))) { #optional property not found
            $CurrentReading = $null
        } else {
            $CurrentReading = $JsonParameters.PSobject.Properties["current_reading"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "display_name"))) { #optional property not found
            $DisplayName = $null
        } else {
            $DisplayName = $JsonParameters.PSobject.Properties["display_name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "location"))) { #optional property not found
            $Location = $null
        } else {
            $Location = $JsonParameters.PSobject.Properties["location"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) { #optional property not found
            $Name = $null
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "state"))) { #optional property not found
            $State = $null
        } else {
            $State = $JsonParameters.PSobject.Properties["state"].value
        }

        $PSO = [PSCustomObject]@{
            "ctrlr_owner" = ${CtrlrOwner}
            "current_reading" = ${CurrentReading}
            "display_name" = ${DisplayName}
            "location" = ${Location}
            "name" = ${Name}
            "state" = ${State}
        }

        return $PSO
    }

}

