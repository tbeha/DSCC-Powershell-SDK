#
# Data Services Cloud Console API
# Data Services Cloud Console API
# Version: 1.4.0
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

kpi metrics with read, write and total average values

.PARAMETER Read
No description available.
.PARAMETER Total
No description available.
.PARAMETER Write
No description available.
.OUTPUTS

ArcusKpiMetrics<PSCustomObject>
#>

function Initialize-ArcusKpiMetrics {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Read},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Total},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Write}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => ArcusKpiMetrics' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "read" = ${Read}
            "total" = ${Total}
            "write" = ${Write}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to ArcusKpiMetrics<PSCustomObject>

.DESCRIPTION

Convert from JSON to ArcusKpiMetrics<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

ArcusKpiMetrics<PSCustomObject>
#>
function ConvertFrom-JsonToArcusKpiMetrics {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => ArcusKpiMetrics' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in ArcusKpiMetrics
        $AllProperties = ("read", "total", "write")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "read"))) { #optional property not found
            $Read = $null
        } else {
            $Read = $JsonParameters.PSobject.Properties["read"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "total"))) { #optional property not found
            $Total = $null
        } else {
            $Total = $JsonParameters.PSobject.Properties["total"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "write"))) { #optional property not found
            $Write = $null
        } else {
            $Write = $JsonParameters.PSobject.Properties["write"].value
        }

        $PSO = [PSCustomObject]@{
            "read" = ${Read}
            "total" = ${Total}
            "write" = ${Write}
        }

        return $PSO
    }

}

