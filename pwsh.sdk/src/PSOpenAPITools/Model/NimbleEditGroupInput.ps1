#
# Data Services Cloud Console API
# Data Services Cloud Console API
# Version: 1.4.0
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER AutoSwitchoverEnabled
Whether automatic switchover of Group management services feature is enabled.
.PARAMETER AutocleanUnmanagedSnapshotsEnabled
Whether auto-clean unmanaged snapshots feature is enabled.
.PARAMETER AutocleanUnmanagedSnapshotsTtlUnit
Unit for unmanaged snapshot time to live.
.PARAMETER CcModeEnabled
Enable or disable Common Criteria mode.
.PARAMETER Date
Unix epoch time local to the group. Seconds since last epoch i.e. 00:00 January 1, 1970. Setting this along with ntp_server causes ntp_server to be reset.
.PARAMETER DefaultIscsiTargetScope
Newly created volumes are exported under iSCSI Group Target or iSCSI Volume Target.
.PARAMETER GroupSnapshotTtl
Snapshot Time-to-live(TTL) configured at group level for automatic deletion of unmanaged snapshots. Value 0 indicates unlimited TTL.
.PARAMETER GroupTargetName
Iscsi target name for this group. Plain string.
.PARAMETER Name
Name of the group. String of up to 64 alphanumeric characters, - and . and : are allowed after first character.
.PARAMETER NtpServer
Either IP address or hostname of the NTP server for this group.
.PARAMETER TdzEnabled
Is Target Driven Zoning (TDZ) enabled on this group.
.PARAMETER TdzPrefix
Target Driven Zoning (TDZ) prefix for peer zones created by TDZ.
.PARAMETER Timezone
Timezone in which this group is located. Plain string.
.PARAMETER Tlsv1Enabled
Enable or disable TLSv1.0 and TLSv1.1.
.OUTPUTS

NimbleEditGroupInput<PSCustomObject>
#>

function Initialize-NimbleEditGroupInput {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${AutoSwitchoverEnabled},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${AutocleanUnmanagedSnapshotsEnabled},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${AutocleanUnmanagedSnapshotsTtlUnit},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${CcModeEnabled},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${Date},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${DefaultIscsiTargetScope},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${GroupSnapshotTtl},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${GroupTargetName},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${NtpServer},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${TdzEnabled},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${TdzPrefix},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Timezone},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${Tlsv1Enabled}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => NimbleEditGroupInput' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "auto_switchover_enabled" = ${AutoSwitchoverEnabled}
            "autoclean_unmanaged_snapshots_enabled" = ${AutocleanUnmanagedSnapshotsEnabled}
            "autoclean_unmanaged_snapshots_ttl_unit" = ${AutocleanUnmanagedSnapshotsTtlUnit}
            "cc_mode_enabled" = ${CcModeEnabled}
            "date" = ${Date}
            "default_iscsi_target_scope" = ${DefaultIscsiTargetScope}
            "group_snapshot_ttl" = ${GroupSnapshotTtl}
            "group_target_name" = ${GroupTargetName}
            "name" = ${Name}
            "ntp_server" = ${NtpServer}
            "tdz_enabled" = ${TdzEnabled}
            "tdz_prefix" = ${TdzPrefix}
            "timezone" = ${Timezone}
            "tlsv1_enabled" = ${Tlsv1Enabled}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to NimbleEditGroupInput<PSCustomObject>

.DESCRIPTION

Convert from JSON to NimbleEditGroupInput<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

NimbleEditGroupInput<PSCustomObject>
#>
function ConvertFrom-JsonToNimbleEditGroupInput {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => NimbleEditGroupInput' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in NimbleEditGroupInput
        $AllProperties = ("auto_switchover_enabled", "autoclean_unmanaged_snapshots_enabled", "autoclean_unmanaged_snapshots_ttl_unit", "cc_mode_enabled", "date", "default_iscsi_target_scope", "group_snapshot_ttl", "group_target_name", "name", "ntp_server", "tdz_enabled", "tdz_prefix", "timezone", "tlsv1_enabled")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "auto_switchover_enabled"))) { #optional property not found
            $AutoSwitchoverEnabled = $null
        } else {
            $AutoSwitchoverEnabled = $JsonParameters.PSobject.Properties["auto_switchover_enabled"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "autoclean_unmanaged_snapshots_enabled"))) { #optional property not found
            $AutocleanUnmanagedSnapshotsEnabled = $null
        } else {
            $AutocleanUnmanagedSnapshotsEnabled = $JsonParameters.PSobject.Properties["autoclean_unmanaged_snapshots_enabled"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "autoclean_unmanaged_snapshots_ttl_unit"))) { #optional property not found
            $AutocleanUnmanagedSnapshotsTtlUnit = $null
        } else {
            $AutocleanUnmanagedSnapshotsTtlUnit = $JsonParameters.PSobject.Properties["autoclean_unmanaged_snapshots_ttl_unit"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "cc_mode_enabled"))) { #optional property not found
            $CcModeEnabled = $null
        } else {
            $CcModeEnabled = $JsonParameters.PSobject.Properties["cc_mode_enabled"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "date"))) { #optional property not found
            $Date = $null
        } else {
            $Date = $JsonParameters.PSobject.Properties["date"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "default_iscsi_target_scope"))) { #optional property not found
            $DefaultIscsiTargetScope = $null
        } else {
            $DefaultIscsiTargetScope = $JsonParameters.PSobject.Properties["default_iscsi_target_scope"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "group_snapshot_ttl"))) { #optional property not found
            $GroupSnapshotTtl = $null
        } else {
            $GroupSnapshotTtl = $JsonParameters.PSobject.Properties["group_snapshot_ttl"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "group_target_name"))) { #optional property not found
            $GroupTargetName = $null
        } else {
            $GroupTargetName = $JsonParameters.PSobject.Properties["group_target_name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) { #optional property not found
            $Name = $null
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ntp_server"))) { #optional property not found
            $NtpServer = $null
        } else {
            $NtpServer = $JsonParameters.PSobject.Properties["ntp_server"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "tdz_enabled"))) { #optional property not found
            $TdzEnabled = $null
        } else {
            $TdzEnabled = $JsonParameters.PSobject.Properties["tdz_enabled"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "tdz_prefix"))) { #optional property not found
            $TdzPrefix = $null
        } else {
            $TdzPrefix = $JsonParameters.PSobject.Properties["tdz_prefix"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "timezone"))) { #optional property not found
            $Timezone = $null
        } else {
            $Timezone = $JsonParameters.PSobject.Properties["timezone"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "tlsv1_enabled"))) { #optional property not found
            $Tlsv1Enabled = $null
        } else {
            $Tlsv1Enabled = $JsonParameters.PSobject.Properties["tlsv1_enabled"].value
        }

        $PSO = [PSCustomObject]@{
            "auto_switchover_enabled" = ${AutoSwitchoverEnabled}
            "autoclean_unmanaged_snapshots_enabled" = ${AutocleanUnmanagedSnapshotsEnabled}
            "autoclean_unmanaged_snapshots_ttl_unit" = ${AutocleanUnmanagedSnapshotsTtlUnit}
            "cc_mode_enabled" = ${CcModeEnabled}
            "date" = ${Date}
            "default_iscsi_target_scope" = ${DefaultIscsiTargetScope}
            "group_snapshot_ttl" = ${GroupSnapshotTtl}
            "group_target_name" = ${GroupTargetName}
            "name" = ${Name}
            "ntp_server" = ${NtpServer}
            "tdz_enabled" = ${TdzEnabled}
            "tdz_prefix" = ${TdzPrefix}
            "timezone" = ${Timezone}
            "tlsv1_enabled" = ${Tlsv1Enabled}
        }

        return $PSO
    }

}

