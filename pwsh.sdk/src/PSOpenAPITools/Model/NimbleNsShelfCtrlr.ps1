#
# Data Services Cloud Console API
# Data Services Cloud Console API
# Version: 1.4.0
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER CachedSerial
CachedSerial - Cached serial.
.PARAMETER CtrlrAttrsetList
List of ctrlr attribute set for each logical controller.
.PARAMETER CtrlrHwModel
Controller hardware model. Possible values:'head_x9', 'head_x8', 'head_gen5_2u', 'es2_4u', 'head_vmware', 'es1_3u', 'head_x9_2u', 'head_x10', 'head_gen5', 'es3_4u', 'unknown'.
.PARAMETER CtrlrSensorLastRun
The time of last valid sensor reading, in epoch seconds.
.PARAMETER CtrlrSensors
The list of individual sensor reading in this controller.
.PARAMETER CtrlrSide
Position of this controller in the chassis. Possible values:'A', 'B', 'unknown'.
.PARAMETER EncLocId
Location ID based on SAS topology.
.PARAMETER ExpSasAddr
Expander SAS address.
.PARAMETER ExtraAttributes
Extra attributes as attribute value pairs.
.PARAMETER FanOverallStatus
The overall status for the fans on this controller. Possible values:'Missing', 'Failed', 'OK', 'Alerted'.
.PARAMETER HwMasterState
SES device hardware mastership state. Possible values:'not master', 'failed', 'unknown', 'master'.
.PARAMETER HwMshipFailure
SES device hardware mastership failure.
.PARAMETER IdentifyStatus
Status of chassis identifier.
.PARAMETER PortInfo
Port info for each SAS port.
.PARAMETER PsuOverallStatus
The overall status for the PSU on this controller.. Possible values: 'OK', 'Alerted', 'Failed', 'Missing'.
.PARAMETER SwMasterState
SES device software mastership state. Possible values:'not master', 'want master', 'unknown', 'master', 'release master'.
.PARAMETER TempOverallStatus
The overall status for the temperature of this controller.  Possible values:'Missing', 'Failed', 'OK', 'Alerted'.
.OUTPUTS

NimbleNsShelfCtrlr<PSCustomObject>
#>

function Initialize-NimbleNsShelfCtrlr {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${CachedSerial},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${CtrlrAttrsetList},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${CtrlrHwModel},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${CtrlrSensorLastRun},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${CtrlrSensors},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${CtrlrSide},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${EncLocId},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ExpSasAddr},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${ExtraAttributes},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${FanOverallStatus},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${HwMasterState},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${HwMshipFailure},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${IdentifyStatus},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${PortInfo},
        [Parameter(Position = 14, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${PsuOverallStatus},
        [Parameter(Position = 15, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SwMasterState},
        [Parameter(Position = 16, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${TempOverallStatus}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => NimbleNsShelfCtrlr' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "cached_serial" = ${CachedSerial}
            "ctrlr_attrset_list" = ${CtrlrAttrsetList}
            "ctrlr_hw_model" = ${CtrlrHwModel}
            "ctrlr_sensor_last_run" = ${CtrlrSensorLastRun}
            "ctrlr_sensors" = ${CtrlrSensors}
            "ctrlr_side" = ${CtrlrSide}
            "enc_loc_id" = ${EncLocId}
            "exp_sas_addr" = ${ExpSasAddr}
            "extra_attributes" = ${ExtraAttributes}
            "fan_overall_status" = ${FanOverallStatus}
            "hw_master_state" = ${HwMasterState}
            "hw_mship_failure" = ${HwMshipFailure}
            "identify_status" = ${IdentifyStatus}
            "port_info" = ${PortInfo}
            "psu_overall_status" = ${PsuOverallStatus}
            "sw_master_state" = ${SwMasterState}
            "temp_overall_status" = ${TempOverallStatus}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to NimbleNsShelfCtrlr<PSCustomObject>

.DESCRIPTION

Convert from JSON to NimbleNsShelfCtrlr<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

NimbleNsShelfCtrlr<PSCustomObject>
#>
function ConvertFrom-JsonToNimbleNsShelfCtrlr {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => NimbleNsShelfCtrlr' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in NimbleNsShelfCtrlr
        $AllProperties = ("cached_serial", "ctrlr_attrset_list", "ctrlr_hw_model", "ctrlr_sensor_last_run", "ctrlr_sensors", "ctrlr_side", "enc_loc_id", "exp_sas_addr", "extra_attributes", "fan_overall_status", "hw_master_state", "hw_mship_failure", "identify_status", "port_info", "psu_overall_status", "sw_master_state", "temp_overall_status")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "cached_serial"))) { #optional property not found
            $CachedSerial = $null
        } else {
            $CachedSerial = $JsonParameters.PSobject.Properties["cached_serial"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ctrlr_attrset_list"))) { #optional property not found
            $CtrlrAttrsetList = $null
        } else {
            $CtrlrAttrsetList = $JsonParameters.PSobject.Properties["ctrlr_attrset_list"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ctrlr_hw_model"))) { #optional property not found
            $CtrlrHwModel = $null
        } else {
            $CtrlrHwModel = $JsonParameters.PSobject.Properties["ctrlr_hw_model"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ctrlr_sensor_last_run"))) { #optional property not found
            $CtrlrSensorLastRun = $null
        } else {
            $CtrlrSensorLastRun = $JsonParameters.PSobject.Properties["ctrlr_sensor_last_run"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ctrlr_sensors"))) { #optional property not found
            $CtrlrSensors = $null
        } else {
            $CtrlrSensors = $JsonParameters.PSobject.Properties["ctrlr_sensors"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ctrlr_side"))) { #optional property not found
            $CtrlrSide = $null
        } else {
            $CtrlrSide = $JsonParameters.PSobject.Properties["ctrlr_side"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "enc_loc_id"))) { #optional property not found
            $EncLocId = $null
        } else {
            $EncLocId = $JsonParameters.PSobject.Properties["enc_loc_id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "exp_sas_addr"))) { #optional property not found
            $ExpSasAddr = $null
        } else {
            $ExpSasAddr = $JsonParameters.PSobject.Properties["exp_sas_addr"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "extra_attributes"))) { #optional property not found
            $ExtraAttributes = $null
        } else {
            $ExtraAttributes = $JsonParameters.PSobject.Properties["extra_attributes"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "fan_overall_status"))) { #optional property not found
            $FanOverallStatus = $null
        } else {
            $FanOverallStatus = $JsonParameters.PSobject.Properties["fan_overall_status"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "hw_master_state"))) { #optional property not found
            $HwMasterState = $null
        } else {
            $HwMasterState = $JsonParameters.PSobject.Properties["hw_master_state"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "hw_mship_failure"))) { #optional property not found
            $HwMshipFailure = $null
        } else {
            $HwMshipFailure = $JsonParameters.PSobject.Properties["hw_mship_failure"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "identify_status"))) { #optional property not found
            $IdentifyStatus = $null
        } else {
            $IdentifyStatus = $JsonParameters.PSobject.Properties["identify_status"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "port_info"))) { #optional property not found
            $PortInfo = $null
        } else {
            $PortInfo = $JsonParameters.PSobject.Properties["port_info"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "psu_overall_status"))) { #optional property not found
            $PsuOverallStatus = $null
        } else {
            $PsuOverallStatus = $JsonParameters.PSobject.Properties["psu_overall_status"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "sw_master_state"))) { #optional property not found
            $SwMasterState = $null
        } else {
            $SwMasterState = $JsonParameters.PSobject.Properties["sw_master_state"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "temp_overall_status"))) { #optional property not found
            $TempOverallStatus = $null
        } else {
            $TempOverallStatus = $JsonParameters.PSobject.Properties["temp_overall_status"].value
        }

        $PSO = [PSCustomObject]@{
            "cached_serial" = ${CachedSerial}
            "ctrlr_attrset_list" = ${CtrlrAttrsetList}
            "ctrlr_hw_model" = ${CtrlrHwModel}
            "ctrlr_sensor_last_run" = ${CtrlrSensorLastRun}
            "ctrlr_sensors" = ${CtrlrSensors}
            "ctrlr_side" = ${CtrlrSide}
            "enc_loc_id" = ${EncLocId}
            "exp_sas_addr" = ${ExpSasAddr}
            "extra_attributes" = ${ExtraAttributes}
            "fan_overall_status" = ${FanOverallStatus}
            "hw_master_state" = ${HwMasterState}
            "hw_mship_failure" = ${HwMshipFailure}
            "identify_status" = ${IdentifyStatus}
            "port_info" = ${PortInfo}
            "psu_overall_status" = ${PsuOverallStatus}
            "sw_master_state" = ${SwMasterState}
            "temp_overall_status" = ${TempOverallStatus}
        }

        return $PSO
    }

}

