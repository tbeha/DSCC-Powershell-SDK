#
# Data Services Cloud Console API
# Data Services Cloud Console API
# Version: 1.4.0
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Commonname
Displayname of the resource
.PARAMETER Detail
No description available.
.PARAMETER Domain
Domain of the resource
.PARAMETER Enddate
No description available.
.PARAMETER Fingerprint
Fingerprint of the resource
.PARAMETER Hash
Hash of the resource
.PARAMETER Id
Unique Identifier of the resource
.PARAMETER Issuer
Issuer of the resource
.PARAMETER Isvalid
validity of the resource
.PARAMETER KeyUsage
key usage of the resource
.PARAMETER Pem
trusted certificate pem
.PARAMETER Serial
Serial of the resource
.PARAMETER Signaturetype
Signature type of the resource
.PARAMETER Startdate
No description available.
.PARAMETER Subject
Subject of the resource
.PARAMETER SystemId
SystemID of the array
.PARAMETER Type
The type of resource.
.PARAMETER Uri
URI of the resource
.OUTPUTS

TrustedCertificatesList<PSCustomObject>
#>

function Initialize-TrustedCertificatesList {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Commonname},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Detail},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Domain},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Enddate},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Fingerprint},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Hash},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Id},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Issuer},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${Isvalid},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${KeyUsage},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Pem},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Serial},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Signaturetype},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Startdate},
        [Parameter(Position = 14, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Subject},
        [Parameter(Position = 15, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SystemId},
        [Parameter(Position = 16, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Type},
        [Parameter(Position = 17, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Uri}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => TrustedCertificatesList' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "commonname" = ${Commonname}
            "detail" = ${Detail}
            "domain" = ${Domain}
            "enddate" = ${Enddate}
            "fingerprint" = ${Fingerprint}
            "hash" = ${Hash}
            "id" = ${Id}
            "issuer" = ${Issuer}
            "isvalid" = ${Isvalid}
            "keyUsage" = ${KeyUsage}
            "pem" = ${Pem}
            "serial" = ${Serial}
            "signaturetype" = ${Signaturetype}
            "startdate" = ${Startdate}
            "subject" = ${Subject}
            "systemId" = ${SystemId}
            "type" = ${Type}
            "uri" = ${Uri}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to TrustedCertificatesList<PSCustomObject>

.DESCRIPTION

Convert from JSON to TrustedCertificatesList<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

TrustedCertificatesList<PSCustomObject>
#>
function ConvertFrom-JsonToTrustedCertificatesList {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => TrustedCertificatesList' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in TrustedCertificatesList
        $AllProperties = ("commonname", "detail", "domain", "enddate", "fingerprint", "hash", "id", "issuer", "isvalid", "keyUsage", "pem", "serial", "signaturetype", "startdate", "subject", "systemId", "type", "uri")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "commonname"))) { #optional property not found
            $Commonname = $null
        } else {
            $Commonname = $JsonParameters.PSobject.Properties["commonname"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "detail"))) { #optional property not found
            $Detail = $null
        } else {
            $Detail = $JsonParameters.PSobject.Properties["detail"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "domain"))) { #optional property not found
            $Domain = $null
        } else {
            $Domain = $JsonParameters.PSobject.Properties["domain"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "enddate"))) { #optional property not found
            $Enddate = $null
        } else {
            $Enddate = $JsonParameters.PSobject.Properties["enddate"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "fingerprint"))) { #optional property not found
            $Fingerprint = $null
        } else {
            $Fingerprint = $JsonParameters.PSobject.Properties["fingerprint"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "hash"))) { #optional property not found
            $Hash = $null
        } else {
            $Hash = $JsonParameters.PSobject.Properties["hash"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) { #optional property not found
            $Id = $null
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "issuer"))) { #optional property not found
            $Issuer = $null
        } else {
            $Issuer = $JsonParameters.PSobject.Properties["issuer"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "isvalid"))) { #optional property not found
            $Isvalid = $null
        } else {
            $Isvalid = $JsonParameters.PSobject.Properties["isvalid"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "keyUsage"))) { #optional property not found
            $KeyUsage = $null
        } else {
            $KeyUsage = $JsonParameters.PSobject.Properties["keyUsage"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "pem"))) { #optional property not found
            $Pem = $null
        } else {
            $Pem = $JsonParameters.PSobject.Properties["pem"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "serial"))) { #optional property not found
            $Serial = $null
        } else {
            $Serial = $JsonParameters.PSobject.Properties["serial"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "signaturetype"))) { #optional property not found
            $Signaturetype = $null
        } else {
            $Signaturetype = $JsonParameters.PSobject.Properties["signaturetype"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "startdate"))) { #optional property not found
            $Startdate = $null
        } else {
            $Startdate = $JsonParameters.PSobject.Properties["startdate"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "subject"))) { #optional property not found
            $Subject = $null
        } else {
            $Subject = $JsonParameters.PSobject.Properties["subject"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "systemId"))) { #optional property not found
            $SystemId = $null
        } else {
            $SystemId = $JsonParameters.PSobject.Properties["systemId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "type"))) { #optional property not found
            $Type = $null
        } else {
            $Type = $JsonParameters.PSobject.Properties["type"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "uri"))) { #optional property not found
            $Uri = $null
        } else {
            $Uri = $JsonParameters.PSobject.Properties["uri"].value
        }

        $PSO = [PSCustomObject]@{
            "commonname" = ${Commonname}
            "detail" = ${Detail}
            "domain" = ${Domain}
            "enddate" = ${Enddate}
            "fingerprint" = ${Fingerprint}
            "hash" = ${Hash}
            "id" = ${Id}
            "issuer" = ${Issuer}
            "isvalid" = ${Isvalid}
            "keyUsage" = ${KeyUsage}
            "pem" = ${Pem}
            "serial" = ${Serial}
            "signaturetype" = ${Signaturetype}
            "startdate" = ${Startdate}
            "subject" = ${Subject}
            "systemId" = ${SystemId}
            "type" = ${Type}
            "uri" = ${Uri}
        }

        return $PSO
    }

}

