#
# Data Services Cloud Console API
# Data Services Cloud Console API
# Version: 1.4.0
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER HA
No description available.
.PARAMETER RAIDType

.PARAMETER DeviceSpeed
No description available.
.PARAMETER DeviceType
No description available.
.PARAMETER DiskFilter
No description available.
.PARAMETER RequestedHA
No description available.
.PARAMETER SetSize
No description available.
.PARAMETER StepSize
No description available.
.OUTPUTS

ArcususerAllocationSettings<PSCustomObject>
#>

function Initialize-ArcususerAllocationSettings {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${HA},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${RAIDType},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${DeviceSpeed},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${DeviceType},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${DiskFilter},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${RequestedHA},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SetSize},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${StepSize}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => ArcususerAllocationSettings' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "HA" = ${HA}
            "RAIDType" = ${RAIDType}
            "deviceSpeed" = ${DeviceSpeed}
            "deviceType" = ${DeviceType}
            "diskFilter" = ${DiskFilter}
            "requestedHA" = ${RequestedHA}
            "setSize" = ${SetSize}
            "stepSize" = ${StepSize}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to ArcususerAllocationSettings<PSCustomObject>

.DESCRIPTION

Convert from JSON to ArcususerAllocationSettings<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

ArcususerAllocationSettings<PSCustomObject>
#>
function ConvertFrom-JsonToArcususerAllocationSettings {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => ArcususerAllocationSettings' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in ArcususerAllocationSettings
        $AllProperties = ("HA", "RAIDType", "deviceSpeed", "deviceType", "diskFilter", "requestedHA", "setSize", "stepSize")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "HA"))) { #optional property not found
            $HA = $null
        } else {
            $HA = $JsonParameters.PSobject.Properties["HA"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "RAIDType"))) { #optional property not found
            $RAIDType = $null
        } else {
            $RAIDType = $JsonParameters.PSobject.Properties["RAIDType"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "deviceSpeed"))) { #optional property not found
            $DeviceSpeed = $null
        } else {
            $DeviceSpeed = $JsonParameters.PSobject.Properties["deviceSpeed"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "deviceType"))) { #optional property not found
            $DeviceType = $null
        } else {
            $DeviceType = $JsonParameters.PSobject.Properties["deviceType"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "diskFilter"))) { #optional property not found
            $DiskFilter = $null
        } else {
            $DiskFilter = $JsonParameters.PSobject.Properties["diskFilter"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "requestedHA"))) { #optional property not found
            $RequestedHA = $null
        } else {
            $RequestedHA = $JsonParameters.PSobject.Properties["requestedHA"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "setSize"))) { #optional property not found
            $SetSize = $null
        } else {
            $SetSize = $JsonParameters.PSobject.Properties["setSize"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "stepSize"))) { #optional property not found
            $StepSize = $null
        } else {
            $StepSize = $JsonParameters.PSobject.Properties["stepSize"].value
        }

        $PSO = [PSCustomObject]@{
            "HA" = ${HA}
            "RAIDType" = ${RAIDType}
            "deviceSpeed" = ${DeviceSpeed}
            "deviceType" = ${DeviceType}
            "diskFilter" = ${DiskFilter}
            "requestedHA" = ${RequestedHA}
            "setSize" = ${SetSize}
            "stepSize" = ${StepSize}
        }

        return $PSO
    }

}

