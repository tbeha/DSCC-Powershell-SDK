#
# Data Services Cloud Console API
# Data Services Cloud Console API
# Version: 1.4.0
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Message
Task Message task message.
.PARAMETER Status
Task Status Status of the task.
.PARAMETER TaskUri
Task URI which can be used to monitor the status of the operation.
.OUTPUTS

TaskResponse<PSCustomObject>
#>

function Initialize-TaskResponse {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Message},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Status},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${TaskUri}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => TaskResponse' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $TaskUri) {
            throw "invalid value for 'TaskUri', 'TaskUri' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "message" = ${Message}
            "status" = ${Status}
            "taskUri" = ${TaskUri}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to TaskResponse<PSCustomObject>

.DESCRIPTION

Convert from JSON to TaskResponse<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

TaskResponse<PSCustomObject>
#>
function ConvertFrom-JsonToTaskResponse {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => TaskResponse' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in TaskResponse
        $AllProperties = ("message", "status", "taskUri")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'taskUri' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "taskUri"))) {
            throw "Error! JSON cannot be serialized due to the required property 'taskUri' missing."
        } else {
            $TaskUri = $JsonParameters.PSobject.Properties["taskUri"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "message"))) { #optional property not found
            $Message = $null
        } else {
            $Message = $JsonParameters.PSobject.Properties["message"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "status"))) { #optional property not found
            $Status = $null
        } else {
            $Status = $JsonParameters.PSobject.Properties["status"].value
        }

        $PSO = [PSCustomObject]@{
            "message" = ${Message}
            "status" = ${Status}
            "taskUri" = ${TaskUri}
        }

        return $PSO
    }

}

