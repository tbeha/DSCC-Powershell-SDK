#
# Data Services Cloud Console API
# Data Services Cloud Console API
# Version: 1.4.0
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER BwLimitKbps
throughput threshold at particular timestamp
.PARAMETER ConsoleUri
consoleUri for detailed storage object
.PARAMETER Generation
generation
.PARAMETER Timestampms
epoch timestamp
.PARAMETER Type
type
.PARAMETER Wqlen
wait qlen value at particular timestamp
.OUTPUTS

QosMetricSeriesData<PSCustomObject>
#>

function Initialize-QosMetricSeriesData {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Decimal]]
        ${BwLimitKbps},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ConsoleUri},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Generation},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${Timestampms},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Type},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Decimal]]
        ${Wqlen}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => QosMetricSeriesData' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "bwLimitKbps" = ${BwLimitKbps}
            "consoleUri" = ${ConsoleUri}
            "generation" = ${Generation}
            "timestampms" = ${Timestampms}
            "type" = ${Type}
            "wqlen" = ${Wqlen}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to QosMetricSeriesData<PSCustomObject>

.DESCRIPTION

Convert from JSON to QosMetricSeriesData<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

QosMetricSeriesData<PSCustomObject>
#>
function ConvertFrom-JsonToQosMetricSeriesData {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => QosMetricSeriesData' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in QosMetricSeriesData
        $AllProperties = ("bwLimitKbps", "consoleUri", "generation", "timestampms", "type", "wqlen")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "bwLimitKbps"))) { #optional property not found
            $BwLimitKbps = $null
        } else {
            $BwLimitKbps = $JsonParameters.PSobject.Properties["bwLimitKbps"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "consoleUri"))) { #optional property not found
            $ConsoleUri = $null
        } else {
            $ConsoleUri = $JsonParameters.PSobject.Properties["consoleUri"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "generation"))) { #optional property not found
            $Generation = $null
        } else {
            $Generation = $JsonParameters.PSobject.Properties["generation"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "timestampms"))) { #optional property not found
            $Timestampms = $null
        } else {
            $Timestampms = $JsonParameters.PSobject.Properties["timestampms"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "type"))) { #optional property not found
            $Type = $null
        } else {
            $Type = $JsonParameters.PSobject.Properties["type"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "wqlen"))) { #optional property not found
            $Wqlen = $null
        } else {
            $Wqlen = $JsonParameters.PSobject.Properties["wqlen"].value
        }

        $PSO = [PSCustomObject]@{
            "bwLimitKbps" = ${BwLimitKbps}
            "consoleUri" = ${ConsoleUri}
            "generation" = ${Generation}
            "timestampms" = ${Timestampms}
            "type" = ${Type}
            "wqlen" = ${Wqlen}
        }

        return $PSO
    }

}

