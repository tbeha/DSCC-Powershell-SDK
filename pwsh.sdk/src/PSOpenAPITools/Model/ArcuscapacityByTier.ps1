#
# Data Services Cloud Console API
# Data Services Cloud Console API
# Version: 1.4.0
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER FcFree
fc free capacity
.PARAMETER FcUsed
fc used capacity
.PARAMETER NlFree
nl free capacity
.PARAMETER NlUsed
nl used capacity
.PARAMETER SsdFree
ssd free capacity
.PARAMETER SsdUsed
ssd used capacity
.PARAMETER TotalUsed
usable capacity
.PARAMETER UsableCapacity
usable capacity
.OUTPUTS

ArcuscapacityByTier<PSCustomObject>
#>

function Initialize-ArcuscapacityByTier {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Decimal]]
        ${FcFree},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Decimal]]
        ${FcUsed},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Decimal]]
        ${NlFree},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Decimal]]
        ${NlUsed},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Decimal]]
        ${SsdFree},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Decimal]]
        ${SsdUsed},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Decimal]]
        ${TotalUsed},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Decimal]]
        ${UsableCapacity}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => ArcuscapacityByTier' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "fcFree" = ${FcFree}
            "fcUsed" = ${FcUsed}
            "nlFree" = ${NlFree}
            "nlUsed" = ${NlUsed}
            "ssdFree" = ${SsdFree}
            "ssdUsed" = ${SsdUsed}
            "totalUsed" = ${TotalUsed}
            "usableCapacity" = ${UsableCapacity}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to ArcuscapacityByTier<PSCustomObject>

.DESCRIPTION

Convert from JSON to ArcuscapacityByTier<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

ArcuscapacityByTier<PSCustomObject>
#>
function ConvertFrom-JsonToArcuscapacityByTier {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => ArcuscapacityByTier' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in ArcuscapacityByTier
        $AllProperties = ("fcFree", "fcUsed", "nlFree", "nlUsed", "ssdFree", "ssdUsed", "totalUsed", "usableCapacity")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "fcFree"))) { #optional property not found
            $FcFree = $null
        } else {
            $FcFree = $JsonParameters.PSobject.Properties["fcFree"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "fcUsed"))) { #optional property not found
            $FcUsed = $null
        } else {
            $FcUsed = $JsonParameters.PSobject.Properties["fcUsed"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "nlFree"))) { #optional property not found
            $NlFree = $null
        } else {
            $NlFree = $JsonParameters.PSobject.Properties["nlFree"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "nlUsed"))) { #optional property not found
            $NlUsed = $null
        } else {
            $NlUsed = $JsonParameters.PSobject.Properties["nlUsed"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ssdFree"))) { #optional property not found
            $SsdFree = $null
        } else {
            $SsdFree = $JsonParameters.PSobject.Properties["ssdFree"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ssdUsed"))) { #optional property not found
            $SsdUsed = $null
        } else {
            $SsdUsed = $JsonParameters.PSobject.Properties["ssdUsed"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "totalUsed"))) { #optional property not found
            $TotalUsed = $null
        } else {
            $TotalUsed = $JsonParameters.PSobject.Properties["totalUsed"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "usableCapacity"))) { #optional property not found
            $UsableCapacity = $null
        } else {
            $UsableCapacity = $JsonParameters.PSobject.Properties["usableCapacity"].value
        }

        $PSO = [PSCustomObject]@{
            "fcFree" = ${FcFree}
            "fcUsed" = ${FcUsed}
            "nlFree" = ${NlFree}
            "nlUsed" = ${NlUsed}
            "ssdFree" = ${SsdFree}
            "ssdUsed" = ${SsdUsed}
            "totalUsed" = ${TotalUsed}
            "usableCapacity" = ${UsableCapacity}
        }

        return $PSO
    }

}

