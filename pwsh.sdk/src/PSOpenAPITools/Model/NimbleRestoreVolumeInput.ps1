#
# Data Services Cloud Console API
# Data Services Cloud Console API
# Version: 1.4.0
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Restore volume data from a previous snapshot.

.PARAMETER BaseSnapId
ID of the snapshot to which this the volume is restored.
.PARAMETER EnableVolOffline
Option to specify if volume should be set offline before restore. This value should be set to true if the volume is online.
.OUTPUTS

NimbleRestoreVolumeInput<PSCustomObject>
#>

function Initialize-NimbleRestoreVolumeInput {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${BaseSnapId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${EnableVolOffline}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => NimbleRestoreVolumeInput' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "base_snap_id" = ${BaseSnapId}
            "enable_vol_offline" = ${EnableVolOffline}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to NimbleRestoreVolumeInput<PSCustomObject>

.DESCRIPTION

Convert from JSON to NimbleRestoreVolumeInput<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

NimbleRestoreVolumeInput<PSCustomObject>
#>
function ConvertFrom-JsonToNimbleRestoreVolumeInput {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => NimbleRestoreVolumeInput' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in NimbleRestoreVolumeInput
        $AllProperties = ("base_snap_id", "enable_vol_offline")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'base_snap_id' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "base_snap_id"))) {
            throw "Error! JSON cannot be serialized due to the required property 'base_snap_id' missing."
        } else {
            $BaseSnapId = $JsonParameters.PSobject.Properties["base_snap_id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "enable_vol_offline"))) { #optional property not found
            $EnableVolOffline = $null
        } else {
            $EnableVolOffline = $JsonParameters.PSobject.Properties["enable_vol_offline"].value
        }

        $PSO = [PSCustomObject]@{
            "base_snap_id" = ${BaseSnapId}
            "enable_vol_offline" = ${EnableVolOffline}
        }

        return $PSO
    }

}

