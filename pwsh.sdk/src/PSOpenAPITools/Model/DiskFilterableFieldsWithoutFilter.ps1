#
# Data Services Cloud Console API
# Data Services Cloud Console API
# Version: 1.4.0
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER ArrayId
ID of array the disk belongs to. A 42 digit hexadecimal number.
.PARAMETER ArrayName
Name of array the disk belongs to. String of up to 64 alphanumeric characters, - and . and : are allowed after first character.
.PARAMETER DiskType
Type of disk (HDD, SSD, N/A). Disk type. Possible values: 'hdd', 'ssd'.
.PARAMETER Id
Identifier of disk. A 42 digit hexadecimal number.
.PARAMETER Model
Disk model name.
.PARAMETER Serial
Disk serial number(N/A if empty).
.PARAMETER ShelfId
Identifies the physical shelf the disk belongs to. A 42 digit hexadecimal number.
.PARAMETER ShelfSerial
Serial number of the shelf the disk is attached to.
.PARAMETER State
Disk hardware state. Disk state. Possible values: 'valid', 'in use', 'failed', absent', 'removed', 'void', 't_fail', 'foreign'.
.OUTPUTS

DiskFilterableFieldsWithoutFilter<PSCustomObject>
#>

function Initialize-DiskFilterableFieldsWithoutFilter {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ArrayId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ArrayName},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${DiskType},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Id},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Model},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Serial},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ShelfId},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ShelfSerial},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${State}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => DiskFilterableFieldsWithoutFilter' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "array_id" = ${ArrayId}
            "array_name" = ${ArrayName}
            "disk_type" = ${DiskType}
            "id" = ${Id}
            "model" = ${Model}
            "serial" = ${Serial}
            "shelf_id" = ${ShelfId}
            "shelf_serial" = ${ShelfSerial}
            "state" = ${State}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to DiskFilterableFieldsWithoutFilter<PSCustomObject>

.DESCRIPTION

Convert from JSON to DiskFilterableFieldsWithoutFilter<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

DiskFilterableFieldsWithoutFilter<PSCustomObject>
#>
function ConvertFrom-JsonToDiskFilterableFieldsWithoutFilter {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => DiskFilterableFieldsWithoutFilter' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in DiskFilterableFieldsWithoutFilter
        $AllProperties = ("array_id", "array_name", "disk_type", "id", "model", "serial", "shelf_id", "shelf_serial", "state")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "array_id"))) { #optional property not found
            $ArrayId = $null
        } else {
            $ArrayId = $JsonParameters.PSobject.Properties["array_id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "array_name"))) { #optional property not found
            $ArrayName = $null
        } else {
            $ArrayName = $JsonParameters.PSobject.Properties["array_name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "disk_type"))) { #optional property not found
            $DiskType = $null
        } else {
            $DiskType = $JsonParameters.PSobject.Properties["disk_type"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) { #optional property not found
            $Id = $null
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "model"))) { #optional property not found
            $Model = $null
        } else {
            $Model = $JsonParameters.PSobject.Properties["model"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "serial"))) { #optional property not found
            $Serial = $null
        } else {
            $Serial = $JsonParameters.PSobject.Properties["serial"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "shelf_id"))) { #optional property not found
            $ShelfId = $null
        } else {
            $ShelfId = $JsonParameters.PSobject.Properties["shelf_id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "shelf_serial"))) { #optional property not found
            $ShelfSerial = $null
        } else {
            $ShelfSerial = $JsonParameters.PSobject.Properties["shelf_serial"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "state"))) { #optional property not found
            $State = $null
        } else {
            $State = $JsonParameters.PSobject.Properties["state"].value
        }

        $PSO = [PSCustomObject]@{
            "array_id" = ${ArrayId}
            "array_name" = ${ArrayName}
            "disk_type" = ${DiskType}
            "id" = ${Id}
            "model" = ${Model}
            "serial" = ${Serial}
            "shelf_id" = ${ShelfId}
            "shelf_serial" = ${ShelfSerial}
            "state" = ${State}
        }

        return $PSO
    }

}

