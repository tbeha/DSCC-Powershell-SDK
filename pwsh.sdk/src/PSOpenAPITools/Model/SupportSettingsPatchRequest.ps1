#
# Data Services Cloud Console API
# Data Services Cloud Console API
# Version: 1.4.0
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Request schema

.PARAMETER AllowRemoteAccess
Specifies whether remote access is allowed or not
.PARAMETER BundleEnabled
Specifies whether log collection bundle is enabled or not.
.PARAMETER BundleInterval
Specifies the bundle interval in seconds(minimum interval 30 minutes)
.PARAMETER CompressMethod
Specifies compress method
.PARAMETER Customer
Company name of the installation site
.PARAMETER Location
Location of the installation site
.PARAMETER LogEnabled
Specifies whether logging  is enabled or not.
.PARAMETER LogInterval
Specifies log interval in seconds(minimum interval 30 minutes)
.PARAMETER RtsEnabled
Specifies whether log scrubbing is enabled or not.
.PARAMETER SendCallHome
Specifies whether call home is enabled or not
.PARAMETER Site
Installation site
.OUTPUTS

SupportSettingsPatchRequest<PSCustomObject>
#>

function Initialize-SupportSettingsPatchRequest {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("DISABLE", "ENABLE_NONROOT", "ENABLE_ROOT")]
        [String]
        ${AllowRemoteAccess},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${BundleEnabled},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Decimal]]
        ${BundleInterval},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("bzip2")]
        [String]
        ${CompressMethod},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Customer},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Location},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${LogEnabled},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Decimal]]
        ${LogInterval},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${RtsEnabled},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${SendCallHome},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Site}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => SupportSettingsPatchRequest' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($BundleInterval -and $BundleInterval -lt 1800) {
          throw "invalid value for 'BundleInterval', must be greater than or equal to 1800."
        }

        if (!$Customer -and $Customer.length -gt 64) {
            throw "invalid value for 'Customer', the character length must be smaller than or equal to 64."
        }

        if (!$Location -and $Location.length -gt 64) {
            throw "invalid value for 'Location', the character length must be smaller than or equal to 64."
        }

        if ($LogInterval -and $LogInterval -lt 1800) {
          throw "invalid value for 'LogInterval', must be greater than or equal to 1800."
        }

        if (!$Site -and $Site.length -gt 64) {
            throw "invalid value for 'Site', the character length must be smaller than or equal to 64."
        }


        $PSO = [PSCustomObject]@{
            "allowRemoteAccess" = ${AllowRemoteAccess}
            "bundleEnabled" = ${BundleEnabled}
            "bundleInterval" = ${BundleInterval}
            "compressMethod" = ${CompressMethod}
            "customer" = ${Customer}
            "location" = ${Location}
            "logEnabled" = ${LogEnabled}
            "logInterval" = ${LogInterval}
            "rtsEnabled" = ${RtsEnabled}
            "sendCallHome" = ${SendCallHome}
            "site" = ${Site}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to SupportSettingsPatchRequest<PSCustomObject>

.DESCRIPTION

Convert from JSON to SupportSettingsPatchRequest<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

SupportSettingsPatchRequest<PSCustomObject>
#>
function ConvertFrom-JsonToSupportSettingsPatchRequest {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => SupportSettingsPatchRequest' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in SupportSettingsPatchRequest
        $AllProperties = ("allowRemoteAccess", "bundleEnabled", "bundleInterval", "compressMethod", "customer", "location", "logEnabled", "logInterval", "rtsEnabled", "sendCallHome", "site")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "allowRemoteAccess"))) { #optional property not found
            $AllowRemoteAccess = $null
        } else {
            $AllowRemoteAccess = $JsonParameters.PSobject.Properties["allowRemoteAccess"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "bundleEnabled"))) { #optional property not found
            $BundleEnabled = $null
        } else {
            $BundleEnabled = $JsonParameters.PSobject.Properties["bundleEnabled"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "bundleInterval"))) { #optional property not found
            $BundleInterval = $null
        } else {
            $BundleInterval = $JsonParameters.PSobject.Properties["bundleInterval"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "compressMethod"))) { #optional property not found
            $CompressMethod = $null
        } else {
            $CompressMethod = $JsonParameters.PSobject.Properties["compressMethod"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "customer"))) { #optional property not found
            $Customer = $null
        } else {
            $Customer = $JsonParameters.PSobject.Properties["customer"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "location"))) { #optional property not found
            $Location = $null
        } else {
            $Location = $JsonParameters.PSobject.Properties["location"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "logEnabled"))) { #optional property not found
            $LogEnabled = $null
        } else {
            $LogEnabled = $JsonParameters.PSobject.Properties["logEnabled"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "logInterval"))) { #optional property not found
            $LogInterval = $null
        } else {
            $LogInterval = $JsonParameters.PSobject.Properties["logInterval"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "rtsEnabled"))) { #optional property not found
            $RtsEnabled = $null
        } else {
            $RtsEnabled = $JsonParameters.PSobject.Properties["rtsEnabled"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "sendCallHome"))) { #optional property not found
            $SendCallHome = $null
        } else {
            $SendCallHome = $JsonParameters.PSobject.Properties["sendCallHome"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "site"))) { #optional property not found
            $Site = $null
        } else {
            $Site = $JsonParameters.PSobject.Properties["site"].value
        }

        $PSO = [PSCustomObject]@{
            "allowRemoteAccess" = ${AllowRemoteAccess}
            "bundleEnabled" = ${BundleEnabled}
            "bundleInterval" = ${BundleInterval}
            "compressMethod" = ${CompressMethod}
            "customer" = ${Customer}
            "location" = ${Location}
            "logEnabled" = ${LogEnabled}
            "logInterval" = ${LogInterval}
            "rtsEnabled" = ${RtsEnabled}
            "sendCallHome" = ${SendCallHome}
            "site" = ${Site}
        }

        return $PSO
    }

}

