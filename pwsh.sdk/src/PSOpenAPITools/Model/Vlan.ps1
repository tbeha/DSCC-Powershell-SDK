#
# Data Services Cloud Console API
# Data Services Cloud Console API
# Version: 1.4.0
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER GatewayAddress
VLAN Gateway address for the iSCSI port
.PARAMETER ISNSPrimaryAddress
The iSNS server IP address
.PARAMETER ISNSTcpPort
TCP port number for the iSNS server
.PARAMETER IpAddress
VLAN IP address for the iSCSI port
.PARAMETER Mtu
Maximum transmission unit (MTU) size
.PARAMETER SendTargetGroupTag
The SendTargets Group Tag (STGT) for the iSCSI port
.PARAMETER SubnetMask
VLAN Subnet mask for the iSCSI port
.PARAMETER TargetPortalGroupTag
The Target portal Group Tag (TPGT) for the iSCSI port
.PARAMETER VlanId
VLAN id for the iSCSI port
.OUTPUTS

Vlan<PSCustomObject>
#>

function Initialize-Vlan {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${GatewayAddress},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ISNSPrimaryAddress},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ISNSTcpPort},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${IpAddress},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Mtu},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SendTargetGroupTag},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SubnetMask},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${TargetPortalGroupTag},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${VlanId}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => Vlan' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "gatewayAddress" = ${GatewayAddress}
            "iSNSPrimaryAddress" = ${ISNSPrimaryAddress}
            "iSNSTcpPort" = ${ISNSTcpPort}
            "ipAddress" = ${IpAddress}
            "mtu" = ${Mtu}
            "sendTargetGroupTag" = ${SendTargetGroupTag}
            "subnetMask" = ${SubnetMask}
            "targetPortalGroupTag" = ${TargetPortalGroupTag}
            "vlanId" = ${VlanId}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to Vlan<PSCustomObject>

.DESCRIPTION

Convert from JSON to Vlan<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

Vlan<PSCustomObject>
#>
function ConvertFrom-JsonToVlan {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => Vlan' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in Vlan
        $AllProperties = ("gatewayAddress", "iSNSPrimaryAddress", "iSNSTcpPort", "ipAddress", "mtu", "sendTargetGroupTag", "subnetMask", "targetPortalGroupTag", "vlanId")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "gatewayAddress"))) { #optional property not found
            $GatewayAddress = $null
        } else {
            $GatewayAddress = $JsonParameters.PSobject.Properties["gatewayAddress"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "iSNSPrimaryAddress"))) { #optional property not found
            $ISNSPrimaryAddress = $null
        } else {
            $ISNSPrimaryAddress = $JsonParameters.PSobject.Properties["iSNSPrimaryAddress"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "iSNSTcpPort"))) { #optional property not found
            $ISNSTcpPort = $null
        } else {
            $ISNSTcpPort = $JsonParameters.PSobject.Properties["iSNSTcpPort"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ipAddress"))) { #optional property not found
            $IpAddress = $null
        } else {
            $IpAddress = $JsonParameters.PSobject.Properties["ipAddress"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "mtu"))) { #optional property not found
            $Mtu = $null
        } else {
            $Mtu = $JsonParameters.PSobject.Properties["mtu"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "sendTargetGroupTag"))) { #optional property not found
            $SendTargetGroupTag = $null
        } else {
            $SendTargetGroupTag = $JsonParameters.PSobject.Properties["sendTargetGroupTag"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "subnetMask"))) { #optional property not found
            $SubnetMask = $null
        } else {
            $SubnetMask = $JsonParameters.PSobject.Properties["subnetMask"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "targetPortalGroupTag"))) { #optional property not found
            $TargetPortalGroupTag = $null
        } else {
            $TargetPortalGroupTag = $JsonParameters.PSobject.Properties["targetPortalGroupTag"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "vlanId"))) { #optional property not found
            $VlanId = $null
        } else {
            $VlanId = $JsonParameters.PSobject.Properties["vlanId"].value
        }

        $PSO = [PSCustomObject]@{
            "gatewayAddress" = ${GatewayAddress}
            "iSNSPrimaryAddress" = ${ISNSPrimaryAddress}
            "iSNSTcpPort" = ${ISNSTcpPort}
            "ipAddress" = ${IpAddress}
            "mtu" = ${Mtu}
            "sendTargetGroupTag" = ${SendTargetGroupTag}
            "subnetMask" = ${SubnetMask}
            "targetPortalGroupTag" = ${TargetPortalGroupTag}
            "vlanId" = ${VlanId}
        }

        return $PSO
    }

}

