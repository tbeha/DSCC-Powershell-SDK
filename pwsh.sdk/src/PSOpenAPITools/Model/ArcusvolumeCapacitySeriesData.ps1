#
# Data Services Cloud Console API
# Data Services Cloud Console API
# Version: 1.4.0
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER ActualUsageMiB
Actual usage value in MiB
.PARAMETER HostWrittenCapacityMiB
Host written capacity in MiB
.PARAMETER TimestampMs
epoch timestamp
.OUTPUTS

ArcusvolumeCapacitySeriesData<PSCustomObject>
#>

function Initialize-ArcusvolumeCapacitySeriesData {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Decimal]]
        ${ActualUsageMiB},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Decimal]]
        ${HostWrittenCapacityMiB},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${TimestampMs}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => ArcusvolumeCapacitySeriesData' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "actualUsageMiB" = ${ActualUsageMiB}
            "hostWrittenCapacityMiB" = ${HostWrittenCapacityMiB}
            "timestampMs" = ${TimestampMs}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to ArcusvolumeCapacitySeriesData<PSCustomObject>

.DESCRIPTION

Convert from JSON to ArcusvolumeCapacitySeriesData<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

ArcusvolumeCapacitySeriesData<PSCustomObject>
#>
function ConvertFrom-JsonToArcusvolumeCapacitySeriesData {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => ArcusvolumeCapacitySeriesData' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in ArcusvolumeCapacitySeriesData
        $AllProperties = ("actualUsageMiB", "hostWrittenCapacityMiB", "timestampMs")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "actualUsageMiB"))) { #optional property not found
            $ActualUsageMiB = $null
        } else {
            $ActualUsageMiB = $JsonParameters.PSobject.Properties["actualUsageMiB"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "hostWrittenCapacityMiB"))) { #optional property not found
            $HostWrittenCapacityMiB = $null
        } else {
            $HostWrittenCapacityMiB = $JsonParameters.PSobject.Properties["hostWrittenCapacityMiB"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "timestampMs"))) { #optional property not found
            $TimestampMs = $null
        } else {
            $TimestampMs = $JsonParameters.PSobject.Properties["timestampMs"].value
        }

        $PSO = [PSCustomObject]@{
            "actualUsageMiB" = ${ActualUsageMiB}
            "hostWrittenCapacityMiB" = ${HostWrittenCapacityMiB}
            "timestampMs" = ${TimestampMs}
        }

        return $PSO
    }

}

