#
# Data Services Cloud Console API
# Data Services Cloud Console API
# Version: 1.4.0
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Request schema

.PARAMETER DnsServer1
DNS Server IP
.PARAMETER DnsServer2
DNS Server IP
.PARAMETER DnsServer3
DNS Server IP
.PARAMETER SearchDomain
Specifies the search domain, the search list is limited to 6 domains with a total of 256 characters.
.OUTPUTS

DNSSettingsPutRequest<PSCustomObject>
#>

function Initialize-DNSSettingsPutRequest {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${DnsServer1},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${DnsServer2},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${DnsServer3},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SearchDomain}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => DNSSettingsPutRequest' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $DnsServer1) {
            throw "invalid value for 'DnsServer1', 'DnsServer1' cannot be null."
        }

        if (!$SearchDomain -and $SearchDomain.length -gt 256) {
            throw "invalid value for 'SearchDomain', the character length must be smaller than or equal to 256."
        }


        $PSO = [PSCustomObject]@{
            "dnsServer1" = ${DnsServer1}
            "dnsServer2" = ${DnsServer2}
            "dnsServer3" = ${DnsServer3}
            "searchDomain" = ${SearchDomain}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to DNSSettingsPutRequest<PSCustomObject>

.DESCRIPTION

Convert from JSON to DNSSettingsPutRequest<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

DNSSettingsPutRequest<PSCustomObject>
#>
function ConvertFrom-JsonToDNSSettingsPutRequest {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => DNSSettingsPutRequest' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in DNSSettingsPutRequest
        $AllProperties = ("dnsServer1", "dnsServer2", "dnsServer3", "searchDomain")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'dnsServer1' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "dnsServer1"))) {
            throw "Error! JSON cannot be serialized due to the required property 'dnsServer1' missing."
        } else {
            $DnsServer1 = $JsonParameters.PSobject.Properties["dnsServer1"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "dnsServer2"))) { #optional property not found
            $DnsServer2 = $null
        } else {
            $DnsServer2 = $JsonParameters.PSobject.Properties["dnsServer2"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "dnsServer3"))) { #optional property not found
            $DnsServer3 = $null
        } else {
            $DnsServer3 = $JsonParameters.PSobject.Properties["dnsServer3"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "searchDomain"))) { #optional property not found
            $SearchDomain = $null
        } else {
            $SearchDomain = $JsonParameters.PSobject.Properties["searchDomain"].value
        }

        $PSO = [PSCustomObject]@{
            "dnsServer1" = ${DnsServer1}
            "dnsServer2" = ${DnsServer2}
            "dnsServer3" = ${DnsServer3}
            "searchDomain" = ${SearchDomain}
        }

        return $PSO
    }

}

