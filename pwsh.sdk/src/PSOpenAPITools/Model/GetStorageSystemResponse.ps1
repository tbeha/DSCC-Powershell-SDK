#
# Data Services Cloud Console API
# Data Services Cloud Console API
# Version: 1.4.0
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Response body for device-type6 file-server

.PARAMETER ClusterIP
Cluster Management IP
.PARAMETER ConnectionStatus
Specifies the connection status of the fileserver
.PARAMETER CustomerId
The customer application identifier
.PARAMETER DataReductionRatio
Gives data reduction ratio
.PARAMETER Enclosures
Compute Nodes enclosure details
.PARAMETER FreeCapacityInGiB
Free capacity (GiB) on a specific fileserver
.PARAMETER Generation
This value updates when the resource is updated and can be used as a short way to determine if a resource has changed or which of two different copies of a resource is more up to date. 
.PARAMETER HealthStatus
Health Status of the file server
.PARAMETER Id
Specifies the id of the file server
.PARAMETER JbofEnclosures
JBOF enclosure details
.PARAMETER LogicalCapacityInUse
This value indicates the logical capacity in use which is nothing but a predata reduction value.
.PARAMETER MemoryRaidRebuildProgress
This represents memory Raid Rebuild Progress
.PARAMETER MemoryRaidState
This represents memory RAID state
.PARAMETER ModelNum
Model of the fileserver
.PARAMETER Name
Specifies the name of the file server
.PARAMETER NvramRaidRebuildProgress
This represents NVRAM Raid Rebuild Progress
.PARAMETER NvramRaidState
This represents an active optane data section protection state.
.PARAMETER NvramSize
NVRAM size
.PARAMETER PhysicalCapacityInUse
This value indicates the usable capacity after the data protection overhead + reserved overhead.
.PARAMETER ResourceUri
Resource URI of the file server
.PARAMETER SavingsInGiB
Gives Capacity savings (GiB) value on a specific fileserver
.PARAMETER SavingsPct
Gives Capacity savings percentage
.PARAMETER SerialNumber
The serial number of the cluster
.PARAMETER SnapUsageInGiB
Gives snap space usage(GiB) on a specific fileserver
.PARAMETER SsdRaidRebuildProgress
This represents SSD Raid Rebuild Progress
.PARAMETER SsdRaidState
This indicates the RAID state of erasure coding on the persistent media
.PARAMETER SwVersion
Specifies the software version
.PARAMETER Switches
switch details
.PARAMETER TotalCapacityInGiB
This value indicates the total capacity of the cluster
.PARAMETER Type
Specifies the file server type
.PARAMETER UpTime
How long the fileserver has been running in hours, minutes, and seconds
.PARAMETER UsedCapacityInGiB
Gives Used capacity (GiB) value on a specific fileserver
.PARAMETER UsedCapacityPercentage
Used capacity percentage of the fileserver
.PARAMETER Uuid
Specifies the uuid of the file server
.OUTPUTS

GetStorageSystemResponse<PSCustomObject>
#>

function Initialize-GetStorageSystemResponse {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ClusterIP},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("CONNECTED", "DISCONNECTED", "")]
        [String]
        ${ConnectionStatus},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${CustomerId},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${DataReductionRatio},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Enclosures},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Double]]
        ${FreeCapacityInGiB},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${Generation},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("INIT", "ACTIVATING", "ONLINE", "DEACTIVATING", "OFFLINE", "FAILED", "UNKNOWN", "")]
        [String]
        ${HealthStatus},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${Id},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${JbofEnclosures},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${LogicalCapacityInUse},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${MemoryRaidRebuildProgress},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${MemoryRaidState},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ModelNum},
        [Parameter(Position = 14, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 15, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${NvramRaidRebuildProgress},
        [Parameter(Position = 16, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${NvramRaidState},
        [Parameter(Position = 17, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${NvramSize},
        [Parameter(Position = 18, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${PhysicalCapacityInUse},
        [Parameter(Position = 19, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ResourceUri},
        [Parameter(Position = 20, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Double]]
        ${SavingsInGiB},
        [Parameter(Position = 21, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Double]]
        ${SavingsPct},
        [Parameter(Position = 22, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SerialNumber},
        [Parameter(Position = 23, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Double]]
        ${SnapUsageInGiB},
        [Parameter(Position = 24, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${SsdRaidRebuildProgress},
        [Parameter(Position = 25, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SsdRaidState},
        [Parameter(Position = 26, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SwVersion},
        [Parameter(Position = 27, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Switches},
        [Parameter(Position = 28, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Double]]
        ${TotalCapacityInGiB},
        [Parameter(Position = 29, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Type},
        [Parameter(Position = 30, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${UpTime},
        [Parameter(Position = 31, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Double]]
        ${UsedCapacityInGiB},
        [Parameter(Position = 32, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Double]]
        ${UsedCapacityPercentage},
        [Parameter(Position = 33, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Uuid}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => GetStorageSystemResponse' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($Generation -and $Generation -lt 0) {
          throw "invalid value for 'Generation', must be greater than or equal to 0."
        }

        if ($NvramSize -and $NvramSize -lt 0) {
          throw "invalid value for 'NvramSize', must be greater than or equal to 0."
        }

        if ($UpTime -and $UpTime -lt 0) {
          throw "invalid value for 'UpTime', must be greater than or equal to 0."
        }


        $PSO = [PSCustomObject]@{
            "clusterIP" = ${ClusterIP}
            "connectionStatus" = ${ConnectionStatus}
            "customerId" = ${CustomerId}
            "dataReductionRatio" = ${DataReductionRatio}
            "enclosures" = ${Enclosures}
            "freeCapacityInGiB" = ${FreeCapacityInGiB}
            "generation" = ${Generation}
            "healthStatus" = ${HealthStatus}
            "id" = ${Id}
            "jbofEnclosures" = ${JbofEnclosures}
            "logicalCapacityInUse" = ${LogicalCapacityInUse}
            "memoryRaidRebuildProgress" = ${MemoryRaidRebuildProgress}
            "memoryRaidState" = ${MemoryRaidState}
            "modelNum" = ${ModelNum}
            "name" = ${Name}
            "nvramRaidRebuildProgress" = ${NvramRaidRebuildProgress}
            "nvramRaidState" = ${NvramRaidState}
            "nvramSize" = ${NvramSize}
            "physicalCapacityInUse" = ${PhysicalCapacityInUse}
            "resourceUri" = ${ResourceUri}
            "savingsInGiB" = ${SavingsInGiB}
            "savingsPct" = ${SavingsPct}
            "serialNumber" = ${SerialNumber}
            "snapUsageInGiB" = ${SnapUsageInGiB}
            "ssdRaidRebuildProgress" = ${SsdRaidRebuildProgress}
            "ssdRaidState" = ${SsdRaidState}
            "swVersion" = ${SwVersion}
            "switches" = ${Switches}
            "totalCapacityInGiB" = ${TotalCapacityInGiB}
            "type" = ${Type}
            "upTime" = ${UpTime}
            "usedCapacityInGiB" = ${UsedCapacityInGiB}
            "usedCapacityPercentage" = ${UsedCapacityPercentage}
            "uuid" = ${Uuid}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to GetStorageSystemResponse<PSCustomObject>

.DESCRIPTION

Convert from JSON to GetStorageSystemResponse<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

GetStorageSystemResponse<PSCustomObject>
#>
function ConvertFrom-JsonToGetStorageSystemResponse {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => GetStorageSystemResponse' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in GetStorageSystemResponse
        $AllProperties = ("clusterIP", "connectionStatus", "customerId", "dataReductionRatio", "enclosures", "freeCapacityInGiB", "generation", "healthStatus", "id", "jbofEnclosures", "logicalCapacityInUse", "memoryRaidRebuildProgress", "memoryRaidState", "modelNum", "name", "nvramRaidRebuildProgress", "nvramRaidState", "nvramSize", "physicalCapacityInUse", "resourceUri", "savingsInGiB", "savingsPct", "serialNumber", "snapUsageInGiB", "ssdRaidRebuildProgress", "ssdRaidState", "swVersion", "switches", "totalCapacityInGiB", "type", "upTime", "usedCapacityInGiB", "usedCapacityPercentage", "uuid")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "clusterIP"))) { #optional property not found
            $ClusterIP = $null
        } else {
            $ClusterIP = $JsonParameters.PSobject.Properties["clusterIP"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "connectionStatus"))) { #optional property not found
            $ConnectionStatus = $null
        } else {
            $ConnectionStatus = $JsonParameters.PSobject.Properties["connectionStatus"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "customerId"))) { #optional property not found
            $CustomerId = $null
        } else {
            $CustomerId = $JsonParameters.PSobject.Properties["customerId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "dataReductionRatio"))) { #optional property not found
            $DataReductionRatio = $null
        } else {
            $DataReductionRatio = $JsonParameters.PSobject.Properties["dataReductionRatio"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "enclosures"))) { #optional property not found
            $Enclosures = $null
        } else {
            $Enclosures = $JsonParameters.PSobject.Properties["enclosures"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "freeCapacityInGiB"))) { #optional property not found
            $FreeCapacityInGiB = $null
        } else {
            $FreeCapacityInGiB = $JsonParameters.PSobject.Properties["freeCapacityInGiB"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "generation"))) { #optional property not found
            $Generation = $null
        } else {
            $Generation = $JsonParameters.PSobject.Properties["generation"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "healthStatus"))) { #optional property not found
            $HealthStatus = $null
        } else {
            $HealthStatus = $JsonParameters.PSobject.Properties["healthStatus"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) { #optional property not found
            $Id = $null
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "jbofEnclosures"))) { #optional property not found
            $JbofEnclosures = $null
        } else {
            $JbofEnclosures = $JsonParameters.PSobject.Properties["jbofEnclosures"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "logicalCapacityInUse"))) { #optional property not found
            $LogicalCapacityInUse = $null
        } else {
            $LogicalCapacityInUse = $JsonParameters.PSobject.Properties["logicalCapacityInUse"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "memoryRaidRebuildProgress"))) { #optional property not found
            $MemoryRaidRebuildProgress = $null
        } else {
            $MemoryRaidRebuildProgress = $JsonParameters.PSobject.Properties["memoryRaidRebuildProgress"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "memoryRaidState"))) { #optional property not found
            $MemoryRaidState = $null
        } else {
            $MemoryRaidState = $JsonParameters.PSobject.Properties["memoryRaidState"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "modelNum"))) { #optional property not found
            $ModelNum = $null
        } else {
            $ModelNum = $JsonParameters.PSobject.Properties["modelNum"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) { #optional property not found
            $Name = $null
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "nvramRaidRebuildProgress"))) { #optional property not found
            $NvramRaidRebuildProgress = $null
        } else {
            $NvramRaidRebuildProgress = $JsonParameters.PSobject.Properties["nvramRaidRebuildProgress"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "nvramRaidState"))) { #optional property not found
            $NvramRaidState = $null
        } else {
            $NvramRaidState = $JsonParameters.PSobject.Properties["nvramRaidState"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "nvramSize"))) { #optional property not found
            $NvramSize = $null
        } else {
            $NvramSize = $JsonParameters.PSobject.Properties["nvramSize"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "physicalCapacityInUse"))) { #optional property not found
            $PhysicalCapacityInUse = $null
        } else {
            $PhysicalCapacityInUse = $JsonParameters.PSobject.Properties["physicalCapacityInUse"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "resourceUri"))) { #optional property not found
            $ResourceUri = $null
        } else {
            $ResourceUri = $JsonParameters.PSobject.Properties["resourceUri"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "savingsInGiB"))) { #optional property not found
            $SavingsInGiB = $null
        } else {
            $SavingsInGiB = $JsonParameters.PSobject.Properties["savingsInGiB"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "savingsPct"))) { #optional property not found
            $SavingsPct = $null
        } else {
            $SavingsPct = $JsonParameters.PSobject.Properties["savingsPct"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "serialNumber"))) { #optional property not found
            $SerialNumber = $null
        } else {
            $SerialNumber = $JsonParameters.PSobject.Properties["serialNumber"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "snapUsageInGiB"))) { #optional property not found
            $SnapUsageInGiB = $null
        } else {
            $SnapUsageInGiB = $JsonParameters.PSobject.Properties["snapUsageInGiB"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ssdRaidRebuildProgress"))) { #optional property not found
            $SsdRaidRebuildProgress = $null
        } else {
            $SsdRaidRebuildProgress = $JsonParameters.PSobject.Properties["ssdRaidRebuildProgress"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ssdRaidState"))) { #optional property not found
            $SsdRaidState = $null
        } else {
            $SsdRaidState = $JsonParameters.PSobject.Properties["ssdRaidState"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "swVersion"))) { #optional property not found
            $SwVersion = $null
        } else {
            $SwVersion = $JsonParameters.PSobject.Properties["swVersion"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "switches"))) { #optional property not found
            $Switches = $null
        } else {
            $Switches = $JsonParameters.PSobject.Properties["switches"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "totalCapacityInGiB"))) { #optional property not found
            $TotalCapacityInGiB = $null
        } else {
            $TotalCapacityInGiB = $JsonParameters.PSobject.Properties["totalCapacityInGiB"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "type"))) { #optional property not found
            $Type = $null
        } else {
            $Type = $JsonParameters.PSobject.Properties["type"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "upTime"))) { #optional property not found
            $UpTime = $null
        } else {
            $UpTime = $JsonParameters.PSobject.Properties["upTime"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "usedCapacityInGiB"))) { #optional property not found
            $UsedCapacityInGiB = $null
        } else {
            $UsedCapacityInGiB = $JsonParameters.PSobject.Properties["usedCapacityInGiB"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "usedCapacityPercentage"))) { #optional property not found
            $UsedCapacityPercentage = $null
        } else {
            $UsedCapacityPercentage = $JsonParameters.PSobject.Properties["usedCapacityPercentage"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "uuid"))) { #optional property not found
            $Uuid = $null
        } else {
            $Uuid = $JsonParameters.PSobject.Properties["uuid"].value
        }

        $PSO = [PSCustomObject]@{
            "clusterIP" = ${ClusterIP}
            "connectionStatus" = ${ConnectionStatus}
            "customerId" = ${CustomerId}
            "dataReductionRatio" = ${DataReductionRatio}
            "enclosures" = ${Enclosures}
            "freeCapacityInGiB" = ${FreeCapacityInGiB}
            "generation" = ${Generation}
            "healthStatus" = ${HealthStatus}
            "id" = ${Id}
            "jbofEnclosures" = ${JbofEnclosures}
            "logicalCapacityInUse" = ${LogicalCapacityInUse}
            "memoryRaidRebuildProgress" = ${MemoryRaidRebuildProgress}
            "memoryRaidState" = ${MemoryRaidState}
            "modelNum" = ${ModelNum}
            "name" = ${Name}
            "nvramRaidRebuildProgress" = ${NvramRaidRebuildProgress}
            "nvramRaidState" = ${NvramRaidState}
            "nvramSize" = ${NvramSize}
            "physicalCapacityInUse" = ${PhysicalCapacityInUse}
            "resourceUri" = ${ResourceUri}
            "savingsInGiB" = ${SavingsInGiB}
            "savingsPct" = ${SavingsPct}
            "serialNumber" = ${SerialNumber}
            "snapUsageInGiB" = ${SnapUsageInGiB}
            "ssdRaidRebuildProgress" = ${SsdRaidRebuildProgress}
            "ssdRaidState" = ${SsdRaidState}
            "swVersion" = ${SwVersion}
            "switches" = ${Switches}
            "totalCapacityInGiB" = ${TotalCapacityInGiB}
            "type" = ${Type}
            "upTime" = ${UpTime}
            "usedCapacityInGiB" = ${UsedCapacityInGiB}
            "usedCapacityPercentage" = ${UsedCapacityPercentage}
            "uuid" = ${Uuid}
        }

        return $PSO
    }

}

